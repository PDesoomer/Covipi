{"version":3,"file":"google-maps-api-wrapper.d.ts","sources":["google-maps-api-wrapper.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport * as mapTypes from './google-maps-types';\nimport { Polyline, PolylineOptions } from './google-maps-types';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\nexport declare class GoogleMapsAPIWrapper {\n    private _loader;\n    private _zone;\n    private _map;\n    private _mapResolver;\n    constructor(_loader: MapsAPILoader, _zone: NgZone);\n    createMap(el: HTMLElement, mapOptions: mapTypes.MapOptions): Promise<void>;\n    setMapOptions(options: mapTypes.MapOptions): void;\n    /**\n     * Creates a google map marker with the map context\n     */\n    createMarker(options?: mapTypes.MarkerOptions, addToMap?: boolean): Promise<mapTypes.Marker>;\n    createInfoWindow(options?: mapTypes.InfoWindowOptions): Promise<mapTypes.InfoWindow>;\n    /**\n     * Creates a google.map.Circle for the current map.\n     */\n    createCircle(options: mapTypes.CircleOptions): Promise<mapTypes.Circle>;\n    /**\n     * Creates a google.map.Rectangle for the current map.\n     */\n    createRectangle(options: mapTypes.RectangleOptions): Promise<mapTypes.Rectangle>;\n    createPolyline(options: PolylineOptions): Promise<Polyline>;\n    createPolygon(options: mapTypes.PolygonOptions): Promise<mapTypes.Polygon>;\n    /**\n     * Creates a new google.map.Data layer for the current map\n     */\n    createDataLayer(options?: mapTypes.DataOptions): Promise<mapTypes.Data>;\n    /**\n     * Creates a TransitLayer instance for a map\n     * @param {TransitLayerOptions} options - used for setting layer options\n     * @returns {Promise<TransitLayer>} a new transit layer object\n     */\n    createTransitLayer(options: mapTypes.TransitLayerOptions): Promise<mapTypes.TransitLayer>;\n    /**\n     * Creates a BicyclingLayer instance for a map\n     * @param {BicyclingLayerOptions} options - used for setting layer options\n     * @returns {Promise<BicyclingLayer>} a new bicycling layer object\n     */\n    createBicyclingLayer(options: mapTypes.BicyclingLayerOptions): Promise<mapTypes.BicyclingLayer>;\n    /**\n     * Determines if given coordinates are insite a Polygon path.\n     */\n    containsLocation(latLng: mapTypes.LatLngLiteral, polygon: mapTypes.Polygon): Promise<boolean>;\n    subscribeToMapEvent<E>(eventName: string): Observable<E>;\n    clearInstanceListeners(): void;\n    setCenter(latLng: mapTypes.LatLngLiteral): Promise<void>;\n    getZoom(): Promise<number>;\n    getBounds(): Promise<mapTypes.LatLngBounds>;\n    getMapTypeId(): Promise<mapTypes.MapTypeId>;\n    setZoom(zoom: number): Promise<void>;\n    getCenter(): Promise<mapTypes.LatLng>;\n    panTo(latLng: mapTypes.LatLng | mapTypes.LatLngLiteral): Promise<void>;\n    panBy(x: number, y: number): Promise<void>;\n    fitBounds(latLng: mapTypes.LatLngBounds | mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void>;\n    panToBounds(latLng: mapTypes.LatLngBounds | mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void>;\n    /**\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n     */\n    getNativeMap(): Promise<mapTypes.GoogleMap>;\n    /**\n     * Triggers the given event name on the map instance.\n     */\n    triggerMapEvent(eventName: string): Promise<void>;\n}\n"]}