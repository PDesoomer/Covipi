/**
* @license Angular v10.1.0-next.6+7.sha-aaa1d8e
* (c) 2010-2020 Google LLC. https://angular.io/
* License: MIT
*/
!function(n){"function"==typeof define&&define.amd?define(n):n()}((function(){"use strict";
/**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */Zone.__load_patch("jsonp",(n,o,e)=>{o[o.__symbol__("jsonp")]=function s(c){if(!c||!c.jsonp||!c.sendFuncName)return;const a=function(){};[c.successFuncName,c.failedFuncName].forEach(o=>{o&&(n[o]?e.patchMethod(n,o,o=>(s,c)=>{const a=n[e.symbol("jsonTask")];return a?(a.callback=o,a.invoke.apply(s,c)):o.apply(s,c)}):Object.defineProperty(n,o,{configurable:!0,enumerable:!0,get:function(){return function(){const s=n[e.symbol("jsonpTask")],c=n[e.symbol(`jsonp${o}callback`)];return s?(c&&(s.callback=c),n[e.symbol("jsonpTask")]=void 0,s.invoke.apply(this,arguments)):c?c.apply(this,arguments):null}},set:function(n){this[e.symbol(`jsonp${o}callback`)]=n}}))}),e.patchMethod(c.jsonp,c.sendFuncName,s=>(c,t)=>{n[e.symbol("jsonpTask")]=o.current.scheduleMacroTask("jsonp",a,{},n=>s.apply(c,t),a)})}})}));