{"ast":null,"code":"import _get from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function switchMap(project, resultSelector) {\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(switchMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new SwitchMapOperator(project));\n  };\n}\n\nvar SwitchMapOperator = /*#__PURE__*/function () {\n  function SwitchMapOperator(project) {\n    _classCallCheck(this, SwitchMapOperator);\n\n    this.project = project;\n  }\n\n  _createClass(SwitchMapOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    }\n  }]);\n\n  return SwitchMapOperator;\n}();\n\nvar SwitchMapSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(SwitchMapSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(SwitchMapSubscriber);\n\n  function SwitchMapSubscriber(destination, project) {\n    var _this;\n\n    _classCallCheck(this, SwitchMapSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(SwitchMapSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var result;\n      var index = this.index++;\n\n      try {\n        result = this.project(value, index);\n      } catch (error) {\n        this.destination.error(error);\n        return;\n      }\n\n      this._innerSub(result);\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(result) {\n      var innerSubscription = this.innerSubscription;\n\n      if (innerSubscription) {\n        innerSubscription.unsubscribe();\n      }\n\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      this.innerSubscription = innerSubscribe(result, innerSubscriber);\n\n      if (this.innerSubscription !== innerSubscriber) {\n        destination.add(this.innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var innerSubscription = this.innerSubscription;\n\n      if (!innerSubscription || innerSubscription.closed) {\n        _get(_getPrototypeOf(SwitchMapSubscriber.prototype), \"_complete\", this).call(this);\n      }\n\n      this.unsubscribe();\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.innerSubscription = undefined;\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      this.innerSubscription = undefined;\n\n      if (this.isStopped) {\n        _get(_getPrototypeOf(SwitchMapSubscriber.prototype), \"_complete\", this).call(this);\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this.destination.next(innerValue);\n    }\n  }]);\n\n  return SwitchMapSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/switchMap.ts"],"names":[],"mappings":";;;;;;AAKA,SAAS,GAAT,QAAoB,OAApB;AACA,SAAS,IAAT,QAAqB,oBAArB;AACA,SAAS,qBAAT,EAAgC,qBAAhC,EAAuD,cAAvD,QAA6E,mBAA7E;AAwEA,OAAM,SAAU,SAAV,CACJ,OADI,EAEJ,cAFI,EAEyG;AAE7G,MAAI,OAAO,cAAP,KAA0B,UAA9B,EAA0C;AACxC,WAAO,UAAC,MAAD;AAAA,aAA2B,MAAM,CAAC,IAAP,CAChC,SAAS,CAAC,UAAC,CAAD,EAAI,CAAJ;AAAA,eAAU,IAAI,CAAC,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAJ,CAAoB,IAApB,CAClB,GAAG,CAAC,UAAC,CAAD,EAAI,EAAJ;AAAA,iBAAW,cAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,CAAzB;AAAA,SAAD,CADe,CAAV;AAAA,OAAD,CADuB,CAA3B;AAAA,KAAP;AAKD;;AACD,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,OAAtB,CAAZ,CAA3B;AAAA,GAAP;AACD;;IAEK,iB;AACJ,6BAAoB,OAApB,EAA4E;AAAA;;AAAxD,SAAA,OAAA,GAAA,OAAA;AACnB;;;;yBAEI,U,EAA2B,M,EAAW;AACzC,aAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,KAAK,OAAzC,CAAjB,CAAP;AACD;;;;;;IAQG,mB;;;;;AAIJ,+BAAY,WAAZ,EACoB,OADpB,EAC4E;AAAA;;AAAA;;AAC1E,8BAAM,WAAN;AADkB,UAAA,OAAA,GAAA,OAAA;AAJZ,UAAA,KAAA,GAAQ,CAAR;AAIoE;AAE3E;;;;0BAEe,K,EAAQ;AACtB,UAAI,MAAJ;AACA,UAAM,KAAK,GAAG,KAAK,KAAL,EAAd;;AACA,UAAI;AACF,QAAA,MAAM,GAAG,KAAK,OAAL,CAAa,KAAb,EAAoB,KAApB,CAAT;AACD,OAFD,CAEE,OAAO,KAAP,EAAc;AACd,aAAK,WAAL,CAAiB,KAAjB,CAAwB,KAAxB;AACA;AACD;;AACD,WAAK,SAAL,CAAe,MAAf;AACD;;;8BAEiB,M,EAA0B;AAC1C,UAAM,iBAAiB,GAAG,KAAK,iBAA/B;;AACA,UAAI,iBAAJ,EAAuB;AACrB,QAAA,iBAAiB,CAAC,WAAlB;AACD;;AACD,UAAM,eAAe,GAAG,IAAI,qBAAJ,CAA0B,IAA1B,CAAxB;AACA,UAAM,WAAW,GAAG,KAAK,WAAzB;AACA,MAAA,WAAW,CAAC,GAAZ,CAAgB,eAAhB;AACA,WAAK,iBAAL,GAAyB,cAAc,CAAC,MAAD,EAAS,eAAT,CAAvC;;AAIA,UAAI,KAAK,iBAAL,KAA2B,eAA/B,EAAgD;AAC9C,QAAA,WAAW,CAAC,GAAZ,CAAgB,KAAK,iBAArB;AACD;AACF;;;gCAEkB;AAAA,UACV,iBADU,GACW,IADX,CACV,iBADU;;AAEjB,UAAI,CAAC,iBAAD,IAAsB,iBAAiB,CAAC,MAA5C,EAAoD;AAClD;AACD;;AACD,WAAK,WAAL;AACD;;;mCAEqB;AACpB,WAAK,iBAAL,GAAyB,SAAzB;AACD;;;qCAEa;AACZ,WAAK,iBAAL,GAAyB,SAAzB;;AACA,UAAI,KAAK,SAAT,EAAoB;AAClB;AACD;AACF;;;+BAEU,U,EAAa;AACpB,WAAK,WAAL,CAAiB,IAAjB,CAAuB,UAAvB;AACH;;;;EA3DqC,qB","sourcesContent":["import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(switchMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n    }\n    return (source) => source.lift(new SwitchMapOperator(project));\n}\nclass SwitchMapOperator {\n    constructor(project) {\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    }\n}\nclass SwitchMapSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project) {\n        super(destination);\n        this.project = project;\n        this.index = 0;\n    }\n    _next(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result);\n    }\n    _innerSub(result) {\n        const innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        this.innerSubscription = innerSubscribe(result, innerSubscriber);\n        if (this.innerSubscription !== innerSubscriber) {\n            destination.add(this.innerSubscription);\n        }\n    }\n    _complete() {\n        const { innerSubscription } = this;\n        if (!innerSubscription || innerSubscription.closed) {\n            super._complete();\n        }\n        this.unsubscribe();\n    }\n    _unsubscribe() {\n        this.innerSubscription = undefined;\n    }\n    notifyComplete() {\n        this.innerSubscription = undefined;\n        if (this.isStopped) {\n            super._complete();\n        }\n    }\n    notifyNext(innerValue) {\n        this.destination.next(innerValue);\n    }\n}\n//# sourceMappingURL=switchMap.js.map"]},"metadata":{},"sourceType":"module"}