{"ast":null,"code":"import { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n  return new Observable(function (subscriber) {\n    var resource;\n\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    var result;\n\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    var source = result ? from(result) : EMPTY;\n    var subscription = source.subscribe(subscriber);\n    return function () {\n      subscription.unsubscribe();\n\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/internal/observable/using.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,IAAT,QAAqB,QAArB;AACA,SAAS,KAAT,QAAsB,SAAtB;AA8BA,OAAM,SAAU,KAAV,CAAmB,eAAnB,EACmB,iBADnB,EACoG;AACxG,SAAO,IAAI,UAAJ,CAAkB,UAAA,UAAU,EAAG;AACpC,QAAI,QAAJ;;AAEA,QAAI;AACF,MAAA,QAAQ,GAAG,eAAe,EAA1B;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,MAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACA,aAAO,SAAP;AACD;;AAED,QAAI,MAAJ;;AACA,QAAI;AACF,MAAA,MAAM,GAAG,iBAAiB,CAAC,QAAD,CAA1B;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,MAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACA,aAAO,SAAP;AACD;;AAED,QAAM,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,MAAD,CAAP,GAAkB,KAAvC;AACA,QAAM,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB,UAAjB,CAArB;AACA,WAAO,YAAK;AACV,MAAA,YAAY,CAAC,WAAb;;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,QAAQ,CAAC,WAAT;AACD;AACF,KALD;AAMD,GA1BM,CAAP;AA2BD","sourcesContent":["import { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n    return new Observable(subscriber => {\n        let resource;\n        try {\n            resource = resourceFactory();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        let result;\n        try {\n            result = observableFactory(resource);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        const source = result ? from(result) : EMPTY;\n        const subscription = source.subscribe(subscriber);\n        return () => {\n            subscription.unsubscribe();\n            if (resource) {\n                resource.unsubscribe();\n            }\n        };\n    });\n}\n//# sourceMappingURL=using.js.map"]},"metadata":{},"sourceType":"module"}