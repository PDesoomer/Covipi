{"ast":null,"code":"import _inherits from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function sample(notifier) {\n  return function (source) {\n    return source.lift(new SampleOperator(notifier));\n  };\n}\n\nvar SampleOperator = /*#__PURE__*/function () {\n  function SampleOperator(notifier) {\n    _classCallCheck(this, SampleOperator);\n\n    this.notifier = notifier;\n  }\n\n  _createClass(SampleOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var sampleSubscriber = new SampleSubscriber(subscriber);\n      var subscription = source.subscribe(sampleSubscriber);\n      subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n      return subscription;\n    }\n  }]);\n\n  return SampleOperator;\n}();\n\nvar SampleSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(SampleSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(SampleSubscriber);\n\n  function SampleSubscriber() {\n    var _this;\n\n    _classCallCheck(this, SampleSubscriber);\n\n    _this = _super.apply(this, arguments);\n    _this.hasValue = false;\n    return _this;\n  }\n\n  _createClass(SampleSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.value = value;\n      this.hasValue = true;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      this.emitValue();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      this.emitValue();\n    }\n  }, {\n    key: \"emitValue\",\n    value: function emitValue() {\n      if (this.hasValue) {\n        this.hasValue = false;\n        this.destination.next(this.value);\n      }\n    }\n  }]);\n\n  return SampleSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/sample.ts"],"names":[],"mappings":";;;;AAKA,SAAS,qBAAT,EAAgC,cAAhC,EAAgD,qBAAhD,QAA6E,mBAA7E;AA0CA,OAAM,SAAU,MAAV,CAAoB,QAApB,EAA6C;AACjD,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,cAAJ,CAAmB,QAAnB,CAAZ,CAA3B;AAAA,GAAP;AACD;;IAEK,c;AACJ,0BAAoB,QAApB,EAA6C;AAAA;;AAAzB,SAAA,QAAA,GAAA,QAAA;AACnB;;;;yBAEI,U,EAA2B,M,EAAW;AACzC,UAAM,gBAAgB,GAAG,IAAI,gBAAJ,CAAqB,UAArB,CAAzB;AACA,UAAM,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB,gBAAjB,CAArB;AACA,MAAA,YAAY,CAAC,GAAb,CAAiB,cAAc,CAAC,KAAK,QAAN,EAAgB,IAAI,qBAAJ,CAA0B,gBAA1B,CAAhB,CAA/B;AACA,aAAO,YAAP;AACD;;;;;;IAQG,gB;;;;;AAAN,8BAAA;AAAA;;AAAA;;;AAEU,UAAA,QAAA,GAAoB,KAApB;AAFV;AAuBC;;;;0BAnBiB,K,EAAQ;AACtB,WAAK,KAAL,GAAa,KAAb;AACA,WAAK,QAAL,GAAgB,IAAhB;AACD;;;iCAES;AACR,WAAK,SAAL;AACD;;;qCAEa;AACZ,WAAK,SAAL;AACD;;;gCAEQ;AACP,UAAI,KAAK,QAAT,EAAmB;AACjB,aAAK,QAAL,GAAgB,KAAhB;AACA,aAAK,WAAL,CAAiB,IAAjB,CAAuB,KAAK,KAA5B;AACD;AACF;;;;EAtBkC,qB","sourcesContent":["import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function sample(notifier) {\n    return (source) => source.lift(new SampleOperator(notifier));\n}\nclass SampleOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const sampleSubscriber = new SampleSubscriber(subscriber);\n        const subscription = source.subscribe(sampleSubscriber);\n        subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n        return subscription;\n    }\n}\nclass SampleSubscriber extends SimpleOuterSubscriber {\n    constructor() {\n        super(...arguments);\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n    }\n    notifyNext() {\n        this.emitValue();\n    }\n    notifyComplete() {\n        this.emitValue();\n    }\n    emitValue() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    }\n}\n//# sourceMappingURL=sample.js.map"]},"metadata":{},"sourceType":"module"}