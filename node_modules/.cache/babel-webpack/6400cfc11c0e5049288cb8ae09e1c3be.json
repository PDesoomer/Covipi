{"ast":null,"code":"import _classCallCheck from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, inject, EventEmitter, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY\n});\n/** @docs-private */\n\nfunction DIR_DOCUMENT_FACTORY() {\n  return inject(DOCUMENT);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n\n\nvar Directionality = /*#__PURE__*/function () {\n  function Directionality(_document) {\n    _classCallCheck(this, Directionality);\n\n    /** The current 'ltr' or 'rtl' value. */\n    this.value = 'ltr';\n    /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n\n    this.change = new EventEmitter();\n\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      var bodyDir = _document.body ? _document.body.dir : null;\n      var htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      var value = bodyDir || htmlDir;\n      this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';\n    }\n  }\n\n  _createClass(Directionality, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.change.complete();\n    }\n  }]);\n\n  return Directionality;\n}();\n\nDirectionality.ɵfac = function Directionality_Factory(t) {\n  return new (t || Directionality)(ɵngcc0.ɵɵinject(DIR_DOCUMENT, 8));\n};\n\nDirectionality.ɵprov = ɵɵdefineInjectable({\n  factory: function Directionality_Factory() {\n    return new Directionality(ɵɵinject(DIR_DOCUMENT, 8));\n  },\n  token: Directionality,\n  providedIn: \"root\"\n});\n\nDirectionality.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DIR_DOCUMENT]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Directionality, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DIR_DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n\n\nvar Dir = /*#__PURE__*/function () {\n  function Dir() {\n    _classCallCheck(this, Dir);\n\n    /** Normalized direction that accounts for invalid/unsupported values. */\n    this._dir = 'ltr';\n    /** Whether the `value` has been set to its initial value. */\n\n    this._isInitialized = false;\n    /** Event emitted when the direction changes. */\n\n    this.change = new EventEmitter();\n  }\n  /** @docs-private */\n\n\n  _createClass(Dir, [{\n    key: \"ngAfterContentInit\",\n\n    /** Initialize once default value has been set. */\n    value: function ngAfterContentInit() {\n      this._isInitialized = true;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.change.complete();\n    }\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this._dir;\n    },\n    set: function set(value) {\n      var old = this._dir;\n      var normalizedValue = value ? value.toLowerCase() : value;\n      this._rawDir = value;\n      this._dir = normalizedValue === 'ltr' || normalizedValue === 'rtl' ? normalizedValue : 'ltr';\n\n      if (old !== this._dir && this._isInitialized) {\n        this.change.emit(this._dir);\n      }\n    }\n    /** Current layout direction of the element. */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.dir;\n    }\n  }]);\n\n  return Dir;\n}();\n\nDir.ɵfac = function Dir_Factory(t) {\n  return new (t || Dir)();\n};\n\nDir.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: Dir,\n  selectors: [[\"\", \"dir\", \"\"]],\n  hostVars: 1,\n  hostBindings: function Dir_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx._rawDir);\n    }\n  },\n  inputs: {\n    dir: \"dir\"\n  },\n  outputs: {\n    change: \"dirChange\"\n  },\n  exportAs: [\"dir\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: Directionality,\n    useExisting: Dir\n  }])]\n});\nDir.propDecorators = {\n  change: [{\n    type: Output,\n    args: ['dirChange']\n  }],\n  dir: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Dir, [{\n    type: Directive,\n    args: [{\n      selector: '[dir]',\n      providers: [{\n        provide: Directionality,\n        useExisting: Dir\n      }],\n      host: {\n        '[attr.dir]': '_rawDir'\n      },\n      exportAs: 'dir'\n    }]\n  }], function () {\n    return [];\n  }, {\n    change: [{\n      type: Output,\n      args: ['dirChange']\n    }],\n    dir: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar BidiModule = function BidiModule() {\n  _classCallCheck(this, BidiModule);\n};\n\nBidiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BidiModule\n});\nBidiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function BidiModule_Factory(t) {\n    return new (t || BidiModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BidiModule, {\n    declarations: [Dir],\n    exports: [Dir]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BidiModule, [{\n    type: NgModule,\n    args: [{\n      exports: [Dir],\n      declarations: [Dir]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality, DIR_DOCUMENT_FACTORY as ɵangular_material_src_cdk_bidi_bidi_a };","map":{"version":3,"sources":["../../../../../../src/cdk/bidi/dir-document-token.ts","../../../../../../src/cdk/bidi/directionality.ts","../../../../../../src/cdk/bidi/dir.ts","../../../../../../src/cdk/bidi/bidi-module.ts","../../../../../../src/cdk/bidi/public-api.ts","../../../../../../src/cdk/bidi/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY,\n});\n\n/** @docs-private */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n  return inject(DOCUMENT);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Inject, Injectable, Optional, OnDestroy} from '@angular/core';\nimport {DIR_DOCUMENT} from './dir-document-token';\n\n\nexport type Direction = 'ltr' | 'rtl';\n\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      const value = bodyDir || htmlDir;\n      this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Output,\n  Input,\n  EventEmitter,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport {Direction, Directionality} from './directionality';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n  selector: '[dir]',\n  providers: [{provide: Directionality, useExisting: Dir}],\n  host: {'[attr.dir]': '_rawDir'},\n  exportAs: 'dir',\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n  /** Normalized direction that accounts for invalid/unsupported values. */\n  private _dir: Direction = 'ltr';\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Direction as passed in by the consumer. */\n  _rawDir: string;\n\n  /** Event emitted when the direction changes. */\n  @Output('dirChange') change = new EventEmitter<Direction>();\n\n  /** @docs-private */\n  @Input()\n  get dir(): Direction { return this._dir; }\n  set dir(value: Direction) {\n    const old = this._dir;\n    const normalizedValue = value ? value.toLowerCase() : value;\n\n    this._rawDir = value;\n    this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n\n    if (old !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n\n  /** Current layout direction of the element. */\n  get value(): Direction { return this.dir; }\n\n  /** Initialize once default value has been set. */\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {Dir} from './dir';\n\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir],\n})\nexport class BidiModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {Directionality, Direction} from './directionality';\nexport {DIR_DOCUMENT} from './dir-document-token';\nexport {Dir} from './dir';\nexport * from './bidi-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DIR_DOCUMENT_FACTORY as Éµangular_material_src_cdk_bidi_bidi_a} from './dir-document-token';"]},"metadata":{},"sourceType":"module"}