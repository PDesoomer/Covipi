{"ast":null,"code":"import _inherits from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return function (source) {\n    return source.lift(new CountOperator(predicate, source));\n  };\n}\n\nvar CountOperator = /*#__PURE__*/function () {\n  function CountOperator(predicate, source) {\n    _classCallCheck(this, CountOperator);\n\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  _createClass(CountOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    }\n  }]);\n\n  return CountOperator;\n}();\n\nvar CountSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(CountSubscriber, _Subscriber);\n\n  var _super = _createSuper(CountSubscriber);\n\n  function CountSubscriber(destination, predicate, source) {\n    var _this;\n\n    _classCallCheck(this, CountSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.count = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(CountSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.predicate) {\n        this._tryPredicate(value);\n      } else {\n        this.count++;\n      }\n    }\n  }, {\n    key: \"_tryPredicate\",\n    value: function _tryPredicate(value) {\n      var result;\n\n      try {\n        result = this.predicate(value, this.index++, this.source);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      if (result) {\n        this.count++;\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.destination.next(this.count);\n      this.destination.complete();\n    }\n  }]);\n\n  return CountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/count.ts"],"names":[],"mappings":";;;;AAGA,SAAS,UAAT,QAA2B,eAA3B;AA6DA,OAAM,SAAU,KAAV,CAAmB,SAAnB,EAA0F;AAC9F,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,aAAJ,CAAkB,SAAlB,EAA6B,MAA7B,CAAZ,CAA3B;AAAA,GAAP;AACD;;IAEK,a;AACJ,yBAAoB,SAApB,EACoB,MADpB,EAC0C;AAAA;;AADtB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACnB;;;;yBAEI,U,EAAgC,M,EAAW;AAC9C,aAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,eAAJ,CAAoB,UAApB,EAAgC,KAAK,SAArC,EAAgD,KAAK,MAArD,CAAjB,CAAP;AACD;;;;;;IAQG,e;;;;;AAIJ,2BAAY,WAAZ,EACoB,SADpB,EAEoB,MAFpB,EAE0C;AAAA;;AAAA;;AACxC,8BAAM,WAAN;AAFkB,UAAA,SAAA,GAAA,SAAA;AACA,UAAA,MAAA,GAAA,MAAA;AALZ,UAAA,KAAA,GAAgB,CAAhB;AACA,UAAA,KAAA,GAAgB,CAAhB;AAIkC;AAEzC;;;;0BAEe,K,EAAQ;AACtB,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,aAAL,CAAmB,KAAnB;AACD,OAFD,MAEO;AACL,aAAK,KAAL;AACD;AACF;;;kCAEqB,K,EAAQ;AAC5B,UAAI,MAAJ;;AAEA,UAAI;AACF,QAAA,MAAM,GAAG,KAAK,SAAL,CAAe,KAAf,EAAsB,KAAK,KAAL,EAAtB,EAAoC,KAAK,MAAzC,CAAT;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,aAAK,WAAL,CAAiB,KAAjB,CAAuB,GAAvB;AACA;AACD;;AAED,UAAI,MAAJ,EAAY;AACV,aAAK,KAAL;AACD;AACF;;;gCAEkB;AACjB,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAK,KAA3B;AACA,WAAK,WAAL,CAAiB,QAAjB;AACD;;;;EApC8B,U","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n    return (source) => source.lift(new CountOperator(predicate, source));\n}\nclass CountOperator {\n    constructor(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    }\n}\nclass CountSubscriber extends Subscriber {\n    constructor(destination, predicate, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    }\n    _tryPredicate(value) {\n        let result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    }\n    _complete() {\n        this.destination.next(this.count);\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=count.js.map"]},"metadata":{},"sourceType":"module"}