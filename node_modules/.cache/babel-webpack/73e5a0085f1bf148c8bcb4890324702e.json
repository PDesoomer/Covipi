{"ast":null,"code":"import _classCallCheck from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n\nimport * as ɵngcc0 from '@angular/core';\nvar hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\n\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n} catch (_a) {\n  hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n\n\nvar Platform = function Platform(_platformId) {\n  _classCallCheck(this, Platform);\n\n  this._platformId = _platformId; // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n\n  /** Whether the Angular application is being rendered in the browser. */\n\n  this.isBrowser = this._platformId ? isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n  /** Whether the current browser is Microsoft Edge. */\n\n  this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  /** Whether the current rendering engine is Microsoft Trident. */\n\n  this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent); // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n\n  /** Whether the current rendering engine is Blink. */\n\n  this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT; // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n\n  /** Whether the current rendering engine is WebKit. */\n\n  this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n  /** Whether the current platform is Apple iOS. */\n\n  this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window); // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n\n  /** Whether the current browser is Firefox. */\n\n  this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n\n  this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT; // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n\n  /** Whether the current browser is Safari. */\n\n  this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n};\n\nPlatform.ɵfac = function Platform_Factory(t) {\n  return new (t || Platform)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n};\n\nPlatform.ɵprov = ɵɵdefineInjectable({\n  factory: function Platform_Factory() {\n    return new Platform(ɵɵinject(PLATFORM_ID));\n  },\n  token: Platform,\n  providedIn: \"root\"\n});\n\nPlatform.ctorParameters = function () {\n  return [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Platform, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar PlatformModule = function PlatformModule() {\n  _classCallCheck(this, PlatformModule);\n};\n\nPlatformModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PlatformModule\n});\nPlatformModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function PlatformModule_Factory(t) {\n    return new (t || PlatformModule)();\n  }\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PlatformModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result Set of input types support by the current browser. */\n\n\nvar supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\n\nvar candidateInputTypes = [// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n// first changing it to something else:\n// The specified value \"\" does not conform to the required format.\n// The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];\n/** @returns The input types supported by this browser. */\n\nfunction getSupportedInputTypes() {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  } // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n\n\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  var featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(function (value) {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n  return supportedInputTypes;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\n\n\nvar supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\n\nfunction supportsPassiveEventListeners() {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n        get: function get() {\n          return supportsPassiveEvents = true;\n        }\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\n\n\nfunction normalizePassiveListenerOptions(options) {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\n\n\nvar rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\n\nvar scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\n\nfunction supportsScrollBehavior() {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported.\n    if (typeof document !== 'object' || !document) {\n      scrollBehaviorSupported = false;\n    } // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n\n\n    if ('scrollBehavior' in document.documentElement.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      var scrollToFunction = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\n\n\nfunction getRtlScrollAxisType() {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return 0\n    /* NORMAL */\n    ;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    var scrollContainer = document.createElement('div');\n    var containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n    var content = document.createElement('div');\n    var contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n    rtlScrollAxisType = 0\n    /* NORMAL */\n    ; // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1\n      /* NEGATED */\n      : 2\n      /* INVERTED */\n      ;\n    }\n\n    scrollContainer.parentNode.removeChild(scrollContainer);\n  }\n\n  return rtlScrollAxisType;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\n\nfunction _supportsShadowDom() {\n  if (shadowDomIsSupported == null) {\n    var head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\n\n\nfunction _getShadowRoot(element) {\n  if (_supportsShadowDom()) {\n    var rootNode = element.getRootNode ? element.getRootNode() : null; // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Platform, PlatformModule, _getShadowRoot, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };","map":{"version":3,"sources":["../../../../../../src/cdk/platform/platform.ts","../../../../../../src/cdk/platform/platform-module.ts","../../../../../../src/cdk/platform/features/input-types.ts","../../../../../../src/cdk/platform/features/passive-listeners.ts","../../../../../../src/cdk/platform/features/scrolling.ts","../../../../../../src/cdk/platform/features/shadow-dom.ts","../../../../../../src/cdk/platform/public-api.ts","../../../../../../src/cdk/platform/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = (typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator);\n} catch {\n  hasV8BreakIterator = false;\n}\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n  // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n  /** Whether the Angular application is being rendered in the browser. */\n  isBrowser: boolean = this._platformId ?\n      isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  /** Whether the current rendering engine is Blink. */\n  BLINK: boolean = this.isBrowser && (!!((window as any).chrome || hasV8BreakIterator) &&\n      typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  /** Whether the current rendering engine is WebKit. */\n  WEBKIT: boolean = this.isBrowser &&\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n      !('MSStream' in window);\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  /** Whether the current browser is Firefox. */\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  /** Whether the current browser is Safari. */\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  constructor(@Inject(PLATFORM_ID) private _platformId: Object) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\n\n@NgModule({})\nexport class PlatformModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes: Set<string>;\n\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n\n/** @returns The input types supported by this browser. */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n\n  return supportedInputTypes;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents: boolean;\n\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nexport function supportsPassiveEventListeners(): boolean {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test', null!, Object.defineProperty({}, 'passive', {\n        get: () => supportsPassiveEvents = true\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nexport function normalizePassiveListenerOptions(options: AddEventListenerOptions):\n  AddEventListenerOptions | boolean {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nexport const enum RtlScrollAxisType {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL,\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED,\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType: RtlScrollAxisType|undefined;\n\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported: boolean|undefined;\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported.\n    if (typeof document !== 'object' || !document) {\n      scrollBehaviorSupported = false;\n    }\n\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if ('scrollBehavior' in document.documentElement!.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction: Function|undefined = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType =\n          scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n\n    scrollContainer.parentNode!.removeChild(scrollContainer);\n  }\n  return rtlScrollAxisType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet shadowDomIsSupported: boolean;\n\n/** Checks whether the user's browser support Shadow DOM. */\nexport function _supportsShadowDom(): boolean {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && ((head as any).createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement): Node | null {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './platform';\nexport * from './platform-module';\nexport * from './features/input-types';\nexport * from './features/passive-listeners';\nexport * from './features/scrolling';\nexport * from './features/shadow-dom';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}