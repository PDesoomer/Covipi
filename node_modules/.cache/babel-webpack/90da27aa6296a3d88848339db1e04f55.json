{"ast":null,"code":"import _assertThisInitialized from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nexport function sequenceEqual(compareTo, comparator) {\n  return function (source) {\n    return source.lift(new SequenceEqualOperator(compareTo, comparator));\n  };\n}\nexport var SequenceEqualOperator = /*#__PURE__*/function () {\n  function SequenceEqualOperator(compareTo, comparator) {\n    _classCallCheck(this, SequenceEqualOperator);\n\n    this.compareTo = compareTo;\n    this.comparator = comparator;\n  }\n\n  _createClass(SequenceEqualOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n    }\n  }]);\n\n  return SequenceEqualOperator;\n}();\nexport var SequenceEqualSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(SequenceEqualSubscriber, _Subscriber);\n\n  var _super = _createSuper(SequenceEqualSubscriber);\n\n  function SequenceEqualSubscriber(destination, compareTo, comparator) {\n    var _this;\n\n    _classCallCheck(this, SequenceEqualSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.compareTo = compareTo;\n    _this.comparator = comparator;\n    _this._a = [];\n    _this._b = [];\n    _this._oneComplete = false;\n\n    _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _assertThisInitialized(_this))));\n\n    return _this;\n  }\n\n  _createClass(SequenceEqualSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this._oneComplete && this._b.length === 0) {\n        this.emit(false);\n      } else {\n        this._a.push(value);\n\n        this.checkValues();\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      if (this._oneComplete) {\n        this.emit(this._a.length === 0 && this._b.length === 0);\n      } else {\n        this._oneComplete = true;\n      }\n\n      this.unsubscribe();\n    }\n  }, {\n    key: \"checkValues\",\n    value: function checkValues() {\n      var _a = this._a,\n          _b = this._b,\n          comparator = this.comparator;\n\n      while (_a.length > 0 && _b.length > 0) {\n        var a = _a.shift();\n\n        var b = _b.shift();\n\n        var areEqual = false;\n\n        try {\n          areEqual = comparator ? comparator(a, b) : a === b;\n        } catch (e) {\n          this.destination.error(e);\n        }\n\n        if (!areEqual) {\n          this.emit(false);\n        }\n      }\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(value) {\n      var destination = this.destination;\n      destination.next(value);\n      destination.complete();\n    }\n  }, {\n    key: \"nextB\",\n    value: function nextB(value) {\n      if (this._oneComplete && this._a.length === 0) {\n        this.emit(false);\n      } else {\n        this._b.push(value);\n\n        this.checkValues();\n      }\n    }\n  }, {\n    key: \"completeB\",\n    value: function completeB() {\n      if (this._oneComplete) {\n        this.emit(this._a.length === 0 && this._b.length === 0);\n      } else {\n        this._oneComplete = true;\n      }\n    }\n  }]);\n\n  return SequenceEqualSubscriber;\n}(Subscriber);\n\nvar SequenceEqualCompareToSubscriber = /*#__PURE__*/function (_Subscriber2) {\n  _inherits(SequenceEqualCompareToSubscriber, _Subscriber2);\n\n  var _super2 = _createSuper(SequenceEqualCompareToSubscriber);\n\n  function SequenceEqualCompareToSubscriber(destination, parent) {\n    var _this2;\n\n    _classCallCheck(this, SequenceEqualCompareToSubscriber);\n\n    _this2 = _super2.call(this, destination);\n    _this2.parent = parent;\n    return _this2;\n  }\n\n  _createClass(SequenceEqualCompareToSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.parent.nextB(value);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.parent.error(err);\n      this.unsubscribe();\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.parent.completeB();\n      this.unsubscribe();\n    }\n  }]);\n\n  return SequenceEqualCompareToSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/sequenceEqual.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function sequenceEqual(compareTo, comparator) {\n    return (source) => source.lift(new SequenceEqualOperator(compareTo, comparator));\n}\nexport class SequenceEqualOperator {\n    constructor(compareTo, comparator) {\n        this.compareTo = compareTo;\n        this.comparator = comparator;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n    }\n}\nexport class SequenceEqualSubscriber extends Subscriber {\n    constructor(destination, compareTo, comparator) {\n        super(destination);\n        this.compareTo = compareTo;\n        this.comparator = comparator;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    _next(value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    }\n    _complete() {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n        this.unsubscribe();\n    }\n    checkValues() {\n        const { _a, _b, comparator } = this;\n        while (_a.length > 0 && _b.length > 0) {\n            let a = _a.shift();\n            let b = _b.shift();\n            let areEqual = false;\n            try {\n                areEqual = comparator ? comparator(a, b) : a === b;\n            }\n            catch (e) {\n                this.destination.error(e);\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    }\n    emit(value) {\n        const { destination } = this;\n        destination.next(value);\n        destination.complete();\n    }\n    nextB(value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    }\n    completeB() {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    }\n}\nclass SequenceEqualCompareToSubscriber extends Subscriber {\n    constructor(destination, parent) {\n        super(destination);\n        this.parent = parent;\n    }\n    _next(value) {\n        this.parent.nextB(value);\n    }\n    _error(err) {\n        this.parent.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.completeB();\n        this.unsubscribe();\n    }\n}\n//# sourceMappingURL=sequenceEqual.js.map"]},"metadata":{},"sourceType":"module"}