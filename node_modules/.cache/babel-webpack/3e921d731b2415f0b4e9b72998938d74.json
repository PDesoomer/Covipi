{"ast":null,"code":"import _classCallCheck from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nvar MatTextareaAutosize = /*#__PURE__*/function (_CdkTextareaAutosize) {\n  _inherits(MatTextareaAutosize, _CdkTextareaAutosize);\n\n  var _super = _createSuper(MatTextareaAutosize);\n\n  function MatTextareaAutosize() {\n    _classCallCheck(this, MatTextareaAutosize);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MatTextareaAutosize, [{\n    key: \"matAutosizeMinRows\",\n    get: function get() {\n      return this.minRows;\n    },\n    set: function set(value) {\n      this.minRows = value;\n    }\n  }, {\n    key: \"matAutosizeMaxRows\",\n    get: function get() {\n      return this.maxRows;\n    },\n    set: function set(value) {\n      this.maxRows = value;\n    }\n  }, {\n    key: \"matAutosize\",\n    get: function get() {\n      return this.enabled;\n    },\n    set: function set(value) {\n      this.enabled = value;\n    }\n  }, {\n    key: \"matTextareaAutosize\",\n    get: function get() {\n      return this.enabled;\n    },\n    set: function set(value) {\n      this.enabled = value;\n    }\n  }]);\n\n  return MatTextareaAutosize;\n}(CdkTextareaAutosize);\n\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) {\n  return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize);\n};\n\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTextareaAutosize,\n  selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"],\n  inputs: {\n    cdkAutosizeMinRows: \"cdkAutosizeMinRows\",\n    cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\",\n    matAutosizeMinRows: \"matAutosizeMinRows\",\n    matAutosizeMaxRows: \"matAutosizeMaxRows\",\n    matAutosize: [\"mat-autosize\", \"matAutosize\"],\n    matTextareaAutosize: \"matTextareaAutosize\"\n  },\n  exportAs: [\"matTextareaAutosize\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTextareaAutosize.propDecorators = {\n  matAutosizeMinRows: [{\n    type: Input\n  }],\n  matAutosizeMaxRows: [{\n    type: Input\n  }],\n  matAutosize: [{\n    type: Input,\n    args: ['mat-autosize']\n  }],\n  matTextareaAutosize: [{\n    type: Input\n  }]\n};\nvar ɵMatTextareaAutosize_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n      exportAs: 'matTextareaAutosize',\n      inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n      host: {\n        'class': 'cdk-textarea-autosize mat-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1'\n      }\n    }]\n  }], null, {\n    matAutosizeMinRows: [{\n      type: Input\n    }],\n    matAutosizeMaxRows: [{\n      type: Input\n    }],\n    matAutosize: [{\n      type: Input,\n      args: ['mat-autosize']\n    }],\n    matTextareaAutosize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(\"Input type \\\"\".concat(type, \"\\\" isn't supported by matInput.\"));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\n\n\nvar MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n\nvar MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nvar nextUniqueId = 0; // Boilerplate for applying mixins to MatInput.\n\n/** @docs-private */\n\nvar MatInputBase = function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n/** @docs-private */\nngControl) {\n  _classCallCheck(this, MatInputBase);\n\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n\nvar _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\n\n\nvar MatInput = /*#__PURE__*/function (_MatInputMixinBase2) {\n  _inherits(MatInput, _MatInputMixinBase2);\n\n  var _super2 = _createSuper(MatInput);\n\n  function MatInput(_elementRef, _platform,\n  /** @docs-private */\n  ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, // TODO: Remove this once the legacy appearance has been removed. We only need\n  // to inject the form-field for determining whether the placeholder has been promoted.\n  _formField) {\n    var _this;\n\n    _classCallCheck(this, MatInput);\n\n    _this = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this._elementRef = _elementRef;\n    _this._platform = _platform;\n    _this.ngControl = ngControl;\n    _this._autofillMonitor = _autofillMonitor;\n    _this._formField = _formField;\n    _this._uid = \"mat-input-\".concat(nextUniqueId++);\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.autofilled = false;\n    _this._disabled = false;\n    _this._required = false;\n    _this._type = 'text';\n    _this._readonly = false;\n    _this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(function (t) {\n      return getSupportedInputTypes().has(t);\n    });\n    var element = _this._elementRef.nativeElement;\n    var nodeName = element.nodeName.toLowerCase(); // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n\n    _this._inputValueAccessor = inputValueAccessor || element;\n    _this._previousNativeValue = _this.value; // Force setter to be called in case id was not specified.\n\n    _this.id = _this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(function () {\n        _elementRef.nativeElement.addEventListener('keyup', function (event) {\n          var el = event.target;\n\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    _this._isServer = !_this._platform.isBrowser;\n    _this._isNativeSelect = nodeName === 'select';\n    _this._isTextarea = nodeName === 'textarea';\n\n    if (_this._isNativeSelect) {\n      _this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n\n    return _this;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  _createClass(MatInput, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n          _this2.autofilled = event.isAutofilled;\n\n          _this2.stateChanges.next();\n        });\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.stateChanges.next();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.stateChanges.complete();\n\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n      }\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      } // We need to dirty-check the native element's value, because there are some cases where\n      // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n      // updating the value using `emitEvent: false`).\n\n\n      this._dirtyCheckNativeValue(); // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n      // present or not depends on a query which is prone to \"changed after checked\" errors.\n\n\n      this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n\n  }, {\n    key: \"_focusChanged\",\n    value: function _focusChanged(isFocused) {\n      if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n        this.focused = isFocused;\n        this.stateChanges.next();\n      }\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput() {// This is a noop function and is used to let Angular know whenever the value changes.\n      // Angular will run a new change detection each time the `input` event has been dispatched.\n      // It's necessary that Angular recognizes the value change, because when floatingLabel\n      // is set to false and Angular forms aren't used, the placeholder won't recognize the\n      // value changes and will not disappear.\n      // Listening to the input event wouldn't be necessary when the input is using the\n      // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n\n  }, {\n    key: \"_dirtyCheckPlaceholder\",\n    value: function _dirtyCheckPlaceholder() {\n      var _a, _b; // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n      // screen readers will read it out twice: once from the label and once from the attribute.\n      // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n      // the only one that supports promoting the placeholder to a label.\n\n\n      var placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n\n      if (placeholder !== this._previousPlaceholder) {\n        var element = this._elementRef.nativeElement;\n        this._previousPlaceholder = placeholder;\n        placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n      }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n\n  }, {\n    key: \"_dirtyCheckNativeValue\",\n    value: function _dirtyCheckNativeValue() {\n      var newValue = this._elementRef.nativeElement.value;\n\n      if (this._previousNativeValue !== newValue) {\n        this._previousNativeValue = newValue;\n        this.stateChanges.next();\n      }\n    }\n    /** Make sure the input is a supported type. */\n\n  }, {\n    key: \"_validateType\",\n    value: function _validateType() {\n      if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatInputUnsupportedTypeError(this._type);\n      }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n\n  }, {\n    key: \"_isNeverEmpty\",\n    value: function _isNeverEmpty() {\n      return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n\n  }, {\n    key: \"_isBadInput\",\n    value: function _isBadInput() {\n      // The `validity` property won't be present on platform-server.\n      var validity = this._elementRef.nativeElement.validity;\n      return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    value: function setDescribedByIds(ids) {\n      if (ids.length) {\n        this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n      } else {\n        this._elementRef.nativeElement.removeAttribute('aria-describedby');\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n      // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n      // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n      if (!this.focused) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      if (this.ngControl && this.ngControl.disabled !== null) {\n        return this.ngControl.disabled;\n      }\n\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n      // Reset from here to ensure that the element doesn't become stuck.\n\n      if (this.focused) {\n        this.focused = false;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    },\n    set: function set(value) {\n      this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(value) {\n      this._type = value || 'text';\n\n      this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n      // input element. To ensure that bindings for `type` work, we need to sync the setter\n      // with the native property. Textarea elements don't support the type property or attribute.\n\n\n      if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n        this._elementRef.nativeElement.type = this._type;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._inputValueAccessor.value;\n    },\n    set: function set(value) {\n      if (value !== this.value) {\n        this._inputValueAccessor.value = value;\n        this.stateChanges.next();\n      }\n    }\n    /** Whether the element is readonly. */\n\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this._readonly;\n    },\n    set: function set(value) {\n      this._readonly = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      if (this._isNativeSelect) {\n        // For a single-selection `<select>`, the label should float when the selected option has\n        // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n        // overlapping the label with the options.\n        var selectElement = this._elementRef.nativeElement;\n        var firstOption = selectElement.options[0]; // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n        // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n\n        return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n      } else {\n        return this.focused || !this.empty;\n      }\n    }\n  }]);\n\n  return MatInput;\n}(_MatInputMixinBase);\n\nMatInput.ɵfac = function MatInput_Factory(t) {\n  return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8));\n};\n\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatInput,\n  selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n  hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n  hostVars: 9,\n  hostBindings: function MatInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n        return ctx._focusChanged(true);\n      })(\"blur\", function MatInput_blur_HostBindingHandler() {\n        return ctx._focusChanged(false);\n      })(\"input\", function MatInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n      ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    disabled: \"disabled\",\n    required: \"required\",\n    type: \"type\",\n    value: \"value\",\n    readonly: \"readonly\",\n    placeholder: \"placeholder\",\n    errorStateMatcher: \"errorStateMatcher\",\n    userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"]\n  },\n  exportAs: [\"matInput\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatInput\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }, {\n      type: Inject,\n      args: [MAT_INPUT_VALUE_ACCESSOR]\n    }]\n  }, {\n    type: AutofillMonitor\n  }, {\n    type: NgZone\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD]\n    }]\n  }];\n};\n\nMatInput.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  userAriaDescribedBy: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  value: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  _focusChanged: [{\n    type: HostListener,\n    args: ['focus', ['true']]\n  }, {\n    type: HostListener,\n    args: ['blur', ['false']]\n  }],\n  _onInput: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatInput, [{\n    type: Directive,\n    args: [{\n      selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\",\n      exportAs: 'matInput',\n      host: {\n        /**\n         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n         */\n        'class': 'mat-input-element mat-form-field-autofill-control',\n        '[class.mat-input-server]': '_isServer',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        // At the time of writing, we have a lot of customer tests that look up the input based on its\n        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n        '[attr.data-placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-required]': 'required.toString()'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: ɵngcc2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.ErrorStateMatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [MAT_INPUT_VALUE_ACCESSOR]\n      }]\n    }, {\n      type: ɵngcc4.AutofillMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc5.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n      type: HostListener,\n      args: ['focus', ['true']]\n    }, {\n      type: HostListener,\n      args: ['blur', ['false']]\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n      type: HostListener,\n      args: ['input']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatInputModule = function MatInputModule() {\n  _classCallCheck(this, MatInputModule);\n};\n\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatInputModule\n});\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatInputModule_Factory(t) {\n    return new (t || MatInputModule)();\n  },\n  providers: [ErrorStateMatcher],\n  imports: [[TextFieldModule, MatFormFieldModule], TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n  // be used together with `MatFormField`.\n  MatFormFieldModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, {\n    declarations: function declarations() {\n      return [MatInput, MatTextareaAutosize];\n    },\n    imports: function imports() {\n      return [TextFieldModule, MatFormFieldModule];\n    },\n    exports: function exports() {\n      return [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatInput, MatTextareaAutosize],\n      imports: [TextFieldModule, MatFormFieldModule],\n      exports: [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize],\n      providers: [ErrorStateMatcher]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };","map":{"version":3,"sources":["../../../../../../src/material/input/autosize.ts","../../../../../../src/material/input/input-errors.ts","../../../../../../src/material/input/input-value-accessor.ts","../../../../../../src/material/input/input.ts","../../../../../../src/material/input/input-module.ts","../../../../../../src/material/input/public-api.ts","../../../../../../src/material/input/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  AfterViewInit,\n  Directive,\n  DoCheck,\n  ElementRef,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl, MatFormField, MAT_FORM_FIELD} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    // At the time of writing, we have a lot of customer tests that look up the input based on its\n    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n    '[attr.data-placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, AfterViewInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  private _previousPlaceholder: string | null;\n\n  /** Whether the component is being rendered on the server. */\n  readonly _isServer: boolean;\n\n  /** Whether the component is a native html select. */\n  readonly _isNativeSelect: boolean;\n\n  /** Whether the component is a textarea. */\n  readonly _isTextarea: boolean;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input('aria-describedby') userAriaDescribedBy: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n      protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n      protected _platform: Platform,\n      /** @docs-private */\n      @Optional() @Self() public ngControl: NgControl,\n      @Optional() _parentForm: NgForm,\n      @Optional() _parentFormGroup: FormGroupDirective,\n      _defaultErrorStateMatcher: ErrorStateMatcher,\n      @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n      private _autofillMonitor: AutofillMonitor,\n      ngZone: NgZone,\n      // TODO: Remove this once the legacy appearance has been removed. We only need\n      // to inject the form-field for determining whether the placeholder has been promoted.\n      @Optional() @Inject(MAT_FORM_FIELD) private _formField?: MatFormField) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n    const nodeName = element.nodeName.toLowerCase();\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n\n    // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n    // present or not depends on a query which is prone to \"changed after checked\" errors.\n    this._dirtyCheckPlaceholder();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  /** Callback for the cases where the focused state of the input changes. */\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('focus', ['true'])\n  @HostListener('blur', ['false'])\n  // tslint:enable:no-host-decorator-in-concrete\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('input')\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `placeholder` attribute. */\n  private _dirtyCheckPlaceholder() {\n    // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n    // screen readers will read it out twice: once from the label and once from the attribute.\n    // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n    // the only one that supports promoting the placeholder to a label.\n    const placeholder = this._formField?._hideControlPlaceholder?.() ? null : this.placeholder;\n    if (placeholder !== this._previousPlaceholder) {\n      const element = this._elementRef.nativeElement;\n      this._previousPlaceholder = placeholder;\n      placeholder ?\n          element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n    }\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_readonly: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n\n  // Accept `any` to avoid conflicts with other directives on `<input>` that may\n  // accept different types.\n  static ngAcceptInputType_value: any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autosize';\nexport * from './input';\nexport * from './input-errors';\nexport * from './input-module';\nexport * from './input-value-accessor';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}