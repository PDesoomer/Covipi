{"ast":null,"code":"import _inherits from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/regenerator\";\nimport _createClass from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/dougair/Documents/WebDev/Angular/material-dashboard-angular2-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __decorate, __metadata, __param, __awaiter } from 'tslib';\nimport { Injectable, NgZone, Input, Directive, EventEmitter, Output, Self, ElementRef, Component, Inject, PLATFORM_ID, QueryList, ContentChildren, forwardRef, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, LOCALE_ID, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject, from, timer, Subject, fromEventPattern, merge, ReplaySubject, bindCallback, of, throwError } from 'rxjs';\nimport { flatMap, sample, switchMap, map, shareReplay, distinctUntilChanged, takeUntil, startWith, skip, multicast } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"*\"];\n\nvar MapsAPILoader = function MapsAPILoader() {\n  _classCallCheck(this, MapsAPILoader);\n};\n\nMapsAPILoader.ɵfac = function MapsAPILoader_Factory(t) {\n  return new (t || MapsAPILoader)();\n};\n\nMapsAPILoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MapsAPILoader,\n  factory: function factory(t) {\n    return MapsAPILoader.ɵfac(t);\n  }\n});\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n\nvar GoogleMapsAPIWrapper = /*#__PURE__*/function () {\n  function GoogleMapsAPIWrapper(_loader, _zone) {\n    var _this = this;\n\n    _classCallCheck(this, GoogleMapsAPIWrapper);\n\n    this._loader = _loader;\n    this._zone = _zone;\n    this._map = new Promise(function (resolve) {\n      _this._mapResolver = resolve;\n    });\n  }\n\n  _createClass(GoogleMapsAPIWrapper, [{\n    key: \"createMap\",\n    value: function createMap(el, mapOptions) {\n      var _this2 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this2._loader.load().then(function () {\n          var map = new google.maps.Map(el, mapOptions);\n\n          _this2._mapResolver(map);\n\n          return;\n        });\n      });\n    }\n  }, {\n    key: \"setMapOptions\",\n    value: function setMapOptions(options) {\n      var _this3 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        _this3._map.then(function (m) {\n          m.setOptions(options);\n        });\n      });\n    }\n    /**\n     * Creates a google map marker with the map context\n     */\n\n  }, {\n    key: \"createMarker\",\n    value: function createMarker() {\n      var _this4 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var addToMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this._zone.runOutsideAngular(function () {\n        return _this4._map.then(function (map) {\n          if (addToMap) {\n            options.map = map;\n          }\n\n          return new google.maps.Marker(options);\n        });\n      });\n    }\n  }, {\n    key: \"createInfoWindow\",\n    value: function createInfoWindow(options) {\n      var _this5 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this5._map.then(function () {\n          return new google.maps.InfoWindow(options);\n        });\n      });\n    }\n    /**\n     * Creates a google.map.Circle for the current map.\n     */\n\n  }, {\n    key: \"createCircle\",\n    value: function createCircle(options) {\n      var _this6 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this6._map.then(function (map) {\n          if (typeof options.strokePosition === 'string') {\n            options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n          }\n\n          options.map = map;\n          return new google.maps.Circle(options);\n        });\n      });\n    }\n    /**\n     * Creates a google.map.Rectangle for the current map.\n     */\n\n  }, {\n    key: \"createRectangle\",\n    value: function createRectangle(options) {\n      var _this7 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this7._map.then(function (map) {\n          options.map = map;\n          return new google.maps.Rectangle(options);\n        });\n      });\n    }\n  }, {\n    key: \"createPolyline\",\n    value: function createPolyline(options) {\n      var _this8 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this8.getNativeMap().then(function (map) {\n          var line = new google.maps.Polyline(options);\n          line.setMap(map);\n          return line;\n        });\n      });\n    }\n  }, {\n    key: \"createPolygon\",\n    value: function createPolygon(options) {\n      var _this9 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this9.getNativeMap().then(function (map) {\n          var polygon = new google.maps.Polygon(options);\n          polygon.setMap(map);\n          return polygon;\n        });\n      });\n    }\n    /**\n     * Creates a new google.map.Data layer for the current map\n     */\n\n  }, {\n    key: \"createDataLayer\",\n    value: function createDataLayer(options) {\n      var _this10 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this10._map.then(function (m) {\n          var data = new google.maps.Data(options);\n          data.setMap(m);\n          return data;\n        });\n      });\n    }\n    /**\n     * Creates a TransitLayer instance for a map\n     * @param {TransitLayerOptions} options - used for setting layer options\n     * @returns {Promise<TransitLayer>} a new transit layer object\n     */\n\n  }, {\n    key: \"createTransitLayer\",\n    value: function createTransitLayer(options) {\n      var _this11 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this11._map.then(function (map) {\n          var newLayer = new google.maps.TransitLayer();\n          newLayer.setMap(options.visible ? map : null);\n          return newLayer;\n        });\n      });\n    }\n    /**\n     * Creates a BicyclingLayer instance for a map\n     * @param {BicyclingLayerOptions} options - used for setting layer options\n     * @returns {Promise<BicyclingLayer>} a new bicycling layer object\n     */\n\n  }, {\n    key: \"createBicyclingLayer\",\n    value: function createBicyclingLayer(options) {\n      var _this12 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this12._map.then(function (map) {\n          var newLayer = new google.maps.BicyclingLayer();\n          newLayer.setMap(options.visible ? map : null);\n          return newLayer;\n        });\n      });\n    }\n    /**\n     * Determines if given coordinates are insite a Polygon path.\n     */\n\n  }, {\n    key: \"containsLocation\",\n    value: function containsLocation(latLng, polygon) {\n      return google.maps.geometry.poly.containsLocation(latLng, polygon);\n    }\n  }, {\n    key: \"subscribeToMapEvent\",\n    value: function subscribeToMapEvent(eventName) {\n      var _this13 = this;\n\n      return new Observable(function (observer) {\n        _this13._map.then(function (m) {\n          m.addListener(eventName, function (arg) {\n            _this13._zone.run(function () {\n              return observer.next(arg);\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"clearInstanceListeners\",\n    value: function clearInstanceListeners() {\n      var _this14 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        _this14._map.then(function (map) {\n          google.maps.event.clearInstanceListeners(map);\n        });\n      });\n    }\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(latLng) {\n      var _this15 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this15._map.then(function (map) {\n          return map.setCenter(latLng);\n        });\n      });\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      var _this16 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this16._map.then(function (map) {\n          return map.getZoom();\n        });\n      });\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      var _this17 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this17._map.then(function (map) {\n          return map.getBounds();\n        });\n      });\n    }\n  }, {\n    key: \"getMapTypeId\",\n    value: function getMapTypeId() {\n      var _this18 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this18._map.then(function (map) {\n          return map.getMapTypeId();\n        });\n      });\n    }\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom) {\n      var _this19 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this19._map.then(function (map) {\n          return map.setZoom(zoom);\n        });\n      });\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var _this20 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this20._map.then(function (map) {\n          return map.getCenter();\n        });\n      });\n    }\n  }, {\n    key: \"panTo\",\n    value: function panTo(latLng) {\n      var _this21 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this21._map.then(function (map) {\n          return map.panTo(latLng);\n        });\n      });\n    }\n  }, {\n    key: \"panBy\",\n    value: function panBy(x, y) {\n      var _this22 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this22._map.then(function (map) {\n          return map.panBy(x, y);\n        });\n      });\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(latLng, padding) {\n      var _this23 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this23._map.then(function (map) {\n          return map.fitBounds(latLng, padding);\n        });\n      });\n    }\n  }, {\n    key: \"panToBounds\",\n    value: function panToBounds(latLng, padding) {\n      var _this24 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this24._map.then(function (map) {\n          return map.panToBounds(latLng, padding);\n        });\n      });\n    }\n    /**\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n     */\n\n  }, {\n    key: \"getNativeMap\",\n    value: function getNativeMap() {\n      return this._map;\n    }\n    /**\n     * Triggers the given event name on the map instance.\n     */\n\n  }, {\n    key: \"triggerMapEvent\",\n    value: function triggerMapEvent(eventName) {\n      return this._map.then(function (m) {\n        return google.maps.event.trigger(m, eventName);\n      });\n    }\n  }]);\n\n  return GoogleMapsAPIWrapper;\n}();\n\nGoogleMapsAPIWrapper.ɵfac = function GoogleMapsAPIWrapper_Factory(t) {\n  return new (t || GoogleMapsAPIWrapper)(ɵngcc0.ɵɵinject(MapsAPILoader), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nGoogleMapsAPIWrapper.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GoogleMapsAPIWrapper,\n  factory: function factory(t) {\n    return GoogleMapsAPIWrapper.ɵfac(t);\n  }\n});\n\nGoogleMapsAPIWrapper.ctorParameters = function () {\n  return [{\n    type: MapsAPILoader\n  }, {\n    type: NgZone\n  }];\n};\n\nGoogleMapsAPIWrapper = __decorate([__metadata(\"design:paramtypes\", [MapsAPILoader, NgZone])], GoogleMapsAPIWrapper);\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\n\nvar LayerManager = /*#__PURE__*/function () {\n  function LayerManager(_wrapper) {\n    _classCallCheck(this, LayerManager);\n\n    this._wrapper = _wrapper;\n    this._layers = new Map();\n  }\n  /**\n   * Adds a transit layer to a map instance.\n   * @param {AgmTransitLayer} layer - a TransitLayer object\n   * @param {TransitLayerOptions} options - TransitLayerOptions options\n   * @returns void\n   */\n\n\n  _createClass(LayerManager, [{\n    key: \"addTransitLayer\",\n    value: function addTransitLayer(layer, options) {\n      var newLayer = this._wrapper.createTransitLayer(options);\n\n      this._layers.set(layer, newLayer);\n    }\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param {AgmBicyclingLayer} layer - a bicycling layer object\n     * @param {BicyclingLayerOptions} options - BicyclingLayer options\n     * @returns void\n     */\n\n  }, {\n    key: \"addBicyclingLayer\",\n    value: function addBicyclingLayer(layer, options) {\n      var newLayer = this._wrapper.createBicyclingLayer(options);\n\n      this._layers.set(layer, newLayer);\n    }\n    /**\n     * Deletes a map layer\n     * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete\n     * @returns  Promise<void>\n     */\n\n  }, {\n    key: \"deleteLayer\",\n    value: function deleteLayer(layer) {\n      var _this25 = this;\n\n      return this._layers.get(layer).then(function (currentLayer) {\n        currentLayer.setMap(null);\n\n        _this25._layers.delete(layer);\n      });\n    }\n    /**\n     * Hide/Show a google map layer\n     * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show\n     * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer\n     * @returns Promise<void>\n     */\n\n  }, {\n    key: \"toggleLayerVisibility\",\n    value: function toggleLayerVisibility(layer, options) {\n      var _this26 = this;\n\n      return this._layers.get(layer).then(function (currentLayer) {\n        if (!options.visible) {\n          currentLayer.setMap(null);\n          return;\n        } else {\n          return _this26._wrapper.getNativeMap().then(function (map) {\n            currentLayer.setMap(map);\n          });\n        }\n      });\n    }\n  }]);\n\n  return LayerManager;\n}();\n\nLayerManager.ɵfac = function LayerManager_Factory(t) {\n  return new (t || LayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper));\n};\n\nLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: LayerManager,\n  factory: function factory(t) {\n    return LayerManager.ɵfac(t);\n  }\n});\n\nLayerManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }];\n};\n\nLayerManager = __decorate([__metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper])], LayerManager);\nvar layerId = 0;\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\n\nvar AgmBicyclingLayer = /*#__PURE__*/function () {\n  function AgmBicyclingLayer(_manager) {\n    _classCallCheck(this, AgmBicyclingLayer);\n\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId++).toString();\n    /**\n     * Hide/show bicycling layer\n     */\n\n    this.visible = true;\n  }\n\n  _createClass(AgmBicyclingLayer, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._addedToManager) {\n        return;\n      }\n\n      this._manager.addBicyclingLayer(this, {\n        visible: this.visible\n      });\n\n      this._addedToManager = true;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._addedToManager) {\n        return;\n      }\n\n      if (changes['visible'] != null) {\n        this._manager.toggleLayerVisibility(this, {\n          visible: changes['visible'].currentValue\n        });\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AgmBicyclingLayer-\".concat(this._id.toString());\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._manager.deleteLayer(this);\n    }\n  }]);\n\n  return AgmBicyclingLayer;\n}();\n\nAgmBicyclingLayer.ɵfac = function AgmBicyclingLayer_Factory(t) {\n  return new (t || AgmBicyclingLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager));\n};\n\nAgmBicyclingLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmBicyclingLayer,\n  selectors: [[\"agm-bicycling-layer\"]],\n  inputs: {\n    visible: \"visible\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nAgmBicyclingLayer.ctorParameters = function () {\n  return [{\n    type: LayerManager\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmBicyclingLayer.prototype, \"visible\", void 0);\n\nAgmBicyclingLayer = __decorate([__metadata(\"design:paramtypes\", [LayerManager])], AgmBicyclingLayer);\n\nvar CircleManager = /*#__PURE__*/function () {\n  function CircleManager(_apiWrapper, _zone) {\n    _classCallCheck(this, CircleManager);\n\n    this._apiWrapper = _apiWrapper;\n    this._zone = _zone;\n    this._circles = new Map();\n  }\n\n  _createClass(CircleManager, [{\n    key: \"addCircle\",\n    value: function addCircle(circle) {\n      this._circles.set(circle, this._apiWrapper.createCircle({\n        center: {\n          lat: circle.latitude,\n          lng: circle.longitude\n        },\n        clickable: circle.clickable,\n        draggable: circle.draggable,\n        editable: circle.editable,\n        fillColor: circle.fillColor,\n        fillOpacity: circle.fillOpacity,\n        radius: circle.radius,\n        strokeColor: circle.strokeColor,\n        strokeOpacity: circle.strokeOpacity,\n        strokePosition: circle.strokePosition,\n        strokeWeight: circle.strokeWeight,\n        visible: circle.visible,\n        zIndex: circle.zIndex\n      }));\n    }\n    /**\n     * Removes the given circle from the map.\n     */\n\n  }, {\n    key: \"removeCircle\",\n    value: function removeCircle(circle) {\n      var _this27 = this;\n\n      return this._circles.get(circle).then(function (c) {\n        c.setMap(null);\n\n        _this27._circles.delete(circle);\n      });\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(circle, options) {\n      return this._circles.get(circle).then(function (c) {\n        if (typeof options.strokePosition === 'string') {\n          options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n        }\n\n        c.setOptions(options);\n      });\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.getBounds();\n      });\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.getCenter();\n      });\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.getRadius();\n      });\n    }\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setCenter({\n          lat: circle.latitude,\n          lng: circle.longitude\n        });\n      });\n    }\n  }, {\n    key: \"setEditable\",\n    value: function setEditable(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setEditable(circle.editable);\n      });\n    }\n  }, {\n    key: \"setDraggable\",\n    value: function setDraggable(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setDraggable(circle.draggable);\n      });\n    }\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setVisible(circle.visible);\n      });\n    }\n  }, {\n    key: \"setRadius\",\n    value: function setRadius(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setRadius(circle.radius);\n      });\n    }\n  }, {\n    key: \"getNativeCircle\",\n    value: function getNativeCircle(circle) {\n      return this._circles.get(circle);\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, circle) {\n      var _this28 = this;\n\n      return new Observable(function (observer) {\n        var listener = null;\n\n        _this28._circles.get(circle).then(function (c) {\n          listener = c.addListener(eventName, function (e) {\n            return _this28._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n\n        return function () {\n          if (listener !== null) {\n            listener.remove();\n          }\n        };\n      });\n    }\n  }]);\n\n  return CircleManager;\n}();\n\nCircleManager.ɵfac = function CircleManager_Factory(t) {\n  return new (t || CircleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nCircleManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CircleManager,\n  factory: function factory(t) {\n    return CircleManager.ɵfac(t);\n  }\n});\n\nCircleManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n\nCircleManager = __decorate([__metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])], CircleManager);\nvar AgmCircle_1;\n\nvar AgmCircle = AgmCircle_1 = /*#__PURE__*/function () {\n  function AgmCircle(_manager) {\n    _classCallCheck(this, AgmCircle);\n\n    this._manager = _manager;\n    /**\n     * Indicates whether this Circle handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this circle over the map. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this circle by dragging the control points shown at\n     * the center and around the circumference of the circle. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * The radius in meters on the Earth's surface.\n     */\n\n    this.radius = 0;\n    /**\n     * The stroke position. Defaults to CENTER.\n     * This property is not supported on Internet Explorer 8 and earlier.\n     */\n\n    this.strokePosition = 'CENTER';\n    /**\n     * The stroke width in pixels.\n     */\n\n    this.strokeWeight = 0;\n    /**\n     * Whether this circle is visible on the map. Defaults to true.\n     */\n\n    this.visible = true;\n    /**\n     * This event is fired when the circle's center is changed.\n     */\n\n    this.centerChange = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the circle.\n     */\n\n    this.circleClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the circle.\n     */\n\n    this.circleDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the circle.\n     */\n\n    this.drag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the circle.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the circle.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the circle.\n     */\n\n    this.mouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the circle.\n     */\n\n    this.mouseMove = new EventEmitter();\n    /**\n     * This event is fired on circle mouseout.\n     */\n\n    this.mouseOut = new EventEmitter();\n    /**\n     * This event is fired on circle mouseover.\n     */\n\n    this.mouseOver = new EventEmitter();\n    /**\n     * This event is fired when the DOM mouseup event is fired on the circle.\n     */\n\n    this.mouseUp = new EventEmitter();\n    /**\n     * This event is fired when the circle's radius is changed.\n     */\n\n    this.radiusChange = new EventEmitter();\n    /**\n     * This event is fired when the circle is right-clicked on.\n     */\n\n    this.rightClick = new EventEmitter();\n    this._circleAddedToManager = false;\n    this._eventSubscriptions = [];\n  }\n  /** @internal */\n\n\n  _createClass(AgmCircle, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._manager.addCircle(this);\n\n      this._circleAddedToManager = true;\n\n      this._registerEventListeners();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._circleAddedToManager) {\n        return;\n      }\n\n      if (changes['latitude'] || changes['longitude']) {\n        this._manager.setCenter(this);\n      }\n\n      if (changes['editable']) {\n        this._manager.setEditable(this);\n      }\n\n      if (changes['draggable']) {\n        this._manager.setDraggable(this);\n      }\n\n      if (changes['visible']) {\n        this._manager.setVisible(this);\n      }\n\n      if (changes['radius']) {\n        this._manager.setRadius(this);\n      }\n\n      this._updateCircleOptionsChanges(changes);\n    }\n  }, {\n    key: \"_updateCircleOptionsChanges\",\n    value: function _updateCircleOptionsChanges(changes) {\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmCircle_1._mapOptions.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        options[k] = changes[k].currentValue;\n      });\n\n      if (optionKeys.length > 0) {\n        this._manager.setOptions(this, options);\n      }\n    }\n  }, {\n    key: \"_registerEventListeners\",\n    value: function _registerEventListeners() {\n      var _this29 = this;\n\n      var events = new Map();\n      events.set('center_changed', this.centerChange);\n      events.set('click', this.circleClick);\n      events.set('dblclick', this.circleDblClick);\n      events.set('drag', this.drag);\n      events.set('dragend', this.dragEnd);\n      events.set('dragstart', this.dragStart);\n      events.set('mousedown', this.mouseDown);\n      events.set('mousemove', this.mouseMove);\n      events.set('mouseout', this.mouseOut);\n      events.set('mouseover', this.mouseOver);\n      events.set('mouseup', this.mouseUp);\n      events.set('radius_changed', this.radiusChange);\n      events.set('rightclick', this.rightClick);\n      events.forEach(function (eventEmitter, eventName) {\n        _this29._eventSubscriptions.push(_this29._manager.createEventObservable(eventName, _this29).subscribe(function (value) {\n          switch (eventName) {\n            case 'radius_changed':\n              _this29._manager.getRadius(_this29).then(function (radius) {\n                return eventEmitter.emit(radius);\n              });\n\n              break;\n\n            case 'center_changed':\n              _this29._manager.getCenter(_this29).then(function (center) {\n                return eventEmitter.emit({\n                  lat: center.lat(),\n                  lng: center.lng()\n                });\n              });\n\n              break;\n\n            default:\n              eventEmitter.emit({\n                coords: {\n                  lat: value.latLng.lat(),\n                  lng: value.latLng.lng()\n                }\n              });\n          }\n        }));\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventSubscriptions.forEach(function (s) {\n        s.unsubscribe();\n      });\n\n      this._eventSubscriptions = null;\n\n      this._manager.removeCircle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Circle.\n     */\n\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return this._manager.getBounds(this);\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return this._manager.getCenter(this);\n    }\n  }]);\n\n  return AgmCircle;\n}();\n\nAgmCircle.ɵfac = function AgmCircle_Factory(t) {\n  return new (t || AgmCircle)(ɵngcc0.ɵɵdirectiveInject(CircleManager));\n};\n\nAgmCircle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmCircle,\n  selectors: [[\"agm-circle\"]],\n  inputs: {\n    clickable: \"clickable\",\n    draggable: [\"circleDraggable\", \"draggable\"],\n    editable: \"editable\",\n    radius: \"radius\",\n    strokePosition: \"strokePosition\",\n    strokeWeight: \"strokeWeight\",\n    visible: \"visible\",\n    latitude: \"latitude\",\n    longitude: \"longitude\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    centerChange: \"centerChange\",\n    circleClick: \"circleClick\",\n    circleDblClick: \"circleDblClick\",\n    drag: \"drag\",\n    dragEnd: \"dragEnd\",\n    dragStart: \"dragStart\",\n    mouseDown: \"mouseDown\",\n    mouseMove: \"mouseMove\",\n    mouseOut: \"mouseOut\",\n    mouseOver: \"mouseOver\",\n    mouseUp: \"mouseUp\",\n    radiusChange: \"radiusChange\",\n    rightClick: \"rightClick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmCircle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\n\nAgmCircle.ctorParameters = function () {\n  return [{\n    type: CircleManager\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmCircle.prototype, \"latitude\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmCircle.prototype, \"longitude\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmCircle.prototype, \"clickable\", void 0);\n\n__decorate([Input('circleDraggable'), __metadata(\"design:type\", Object)], AgmCircle.prototype, \"draggable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmCircle.prototype, \"editable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmCircle.prototype, \"fillColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmCircle.prototype, \"fillOpacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmCircle.prototype, \"radius\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmCircle.prototype, \"strokeColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmCircle.prototype, \"strokeOpacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmCircle.prototype, \"strokePosition\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmCircle.prototype, \"strokeWeight\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmCircle.prototype, \"visible\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmCircle.prototype, \"zIndex\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"centerChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"circleClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"circleDblClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"drag\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"dragEnd\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"dragStart\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"mouseDown\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"mouseMove\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"mouseOut\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"mouseOver\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"mouseUp\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"radiusChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmCircle.prototype, \"rightClick\", void 0);\n\nAgmCircle = AgmCircle_1 = __decorate([__metadata(\"design:paramtypes\", [CircleManager])], AgmCircle);\n/**\n * Manages all Data Layers for a Google Map instance.\n */\n\nvar DataLayerManager = /*#__PURE__*/function () {\n  function DataLayerManager(_wrapper, _zone) {\n    _classCallCheck(this, DataLayerManager);\n\n    this._wrapper = _wrapper;\n    this._zone = _zone;\n    this._layers = new Map();\n  }\n  /**\n   * Adds a new Data Layer to the map.\n   */\n\n\n  _createClass(DataLayerManager, [{\n    key: \"addDataLayer\",\n    value: function addDataLayer(layer) {\n      var _this30 = this;\n\n      var newLayer = this._wrapper.createDataLayer({\n        style: layer.style\n      }).then(function (d) {\n        if (layer.geoJson) {\n          _this30.getDataFeatures(d, layer.geoJson).then(function (features) {\n            return d.features = features;\n          });\n        }\n\n        return d;\n      });\n\n      this._layers.set(layer, newLayer);\n    }\n  }, {\n    key: \"deleteDataLayer\",\n    value: function deleteDataLayer(layer) {\n      var _this31 = this;\n\n      this._layers.get(layer).then(function (l) {\n        l.setMap(null);\n\n        _this31._layers.delete(layer);\n      });\n    }\n  }, {\n    key: \"updateGeoJson\",\n    value: function updateGeoJson(layer, geoJson) {\n      var _this32 = this;\n\n      this._layers.get(layer).then(function (l) {\n        l.forEach(function (feature) {\n          l.remove(feature);\n          var index = l.features.indexOf(feature, 0);\n\n          if (index > -1) {\n            l.features.splice(index, 1);\n          }\n        });\n\n        _this32.getDataFeatures(l, geoJson).then(function (features) {\n          return l.features = features;\n        });\n      });\n    }\n  }, {\n    key: \"setDataOptions\",\n    value: function setDataOptions(layer, options) {\n      this._layers.get(layer).then(function (l) {\n        l.setControlPosition(options.controlPosition);\n        l.setControls(options.controls);\n        l.setDrawingMode(options.drawingMode);\n        l.setStyle(options.style);\n      });\n    }\n    /**\n     * Creates a Google Maps event listener for the given DataLayer as an Observable\n     */\n\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, layer) {\n      var _this33 = this;\n\n      return new Observable(function (observer) {\n        _this33._layers.get(layer).then(function (d) {\n          d.addListener(eventName, function (e) {\n            return _this33._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n    /**\n     * Extract features from a geoJson using google.maps Data Class\n     * @param d : google.maps.Data class instance\n     * @param geoJson : url or geojson object\n     */\n\n  }, {\n    key: \"getDataFeatures\",\n    value: function getDataFeatures(d, geoJson) {\n      return new Promise(function (resolve, reject) {\n        if (typeof geoJson === 'object') {\n          try {\n            var features = d.addGeoJson(geoJson);\n            resolve(features);\n          } catch (e) {\n            reject(e);\n          }\n        } else if (typeof geoJson === 'string') {\n          d.loadGeoJson(geoJson, null, resolve);\n        } else {\n          reject(\"Impossible to extract features from geoJson: wrong argument type\");\n        }\n      });\n    }\n  }]);\n\n  return DataLayerManager;\n}();\n\nDataLayerManager.ɵfac = function DataLayerManager_Factory(t) {\n  return new (t || DataLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nDataLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DataLayerManager,\n  factory: function factory(t) {\n    return DataLayerManager.ɵfac(t);\n  }\n});\n\nDataLayerManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n\nDataLayerManager = __decorate([__metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])], DataLayerManager);\nvar AgmDataLayer_1;\nvar layerId$1 = 0;\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\n\nvar AgmDataLayer = AgmDataLayer_1 = /*#__PURE__*/function () {\n  function AgmDataLayer(_manager) {\n    _classCallCheck(this, AgmDataLayer);\n\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId$1++).toString();\n    this._subscriptions = [];\n    /**\n     * This event is fired when a feature in the layer is clicked.\n     */\n\n    this.layerClick = new EventEmitter();\n    /**\n     * The geoJson to be displayed\n     */\n\n    this.geoJson = null;\n  }\n\n  _createClass(AgmDataLayer, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._addedToManager) {\n        return;\n      }\n\n      this._manager.addDataLayer(this);\n\n      this._addedToManager = true;\n\n      this._addEventListeners();\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this34 = this;\n\n      var listeners = [{\n        name: 'click',\n        handler: function handler(ev) {\n          return _this34.layerClick.emit(ev);\n        }\n      }];\n      listeners.forEach(function (obj) {\n        var os = _this34._manager.createEventObservable(obj.name, _this34).subscribe(obj.handler);\n\n        _this34._subscriptions.push(os);\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AgmDataLayer-\".concat(this._id.toString());\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._manager.deleteDataLayer(this); // unsubscribe all registered observable subscriptions\n\n\n      this._subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this35 = this;\n\n      if (!this._addedToManager) {\n        return;\n      }\n\n      var geoJsonChange = changes['geoJson'];\n\n      if (geoJsonChange) {\n        this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n      }\n\n      var dataOptions = {};\n\n      AgmDataLayer_1._dataOptionsAttributes.forEach(function (k) {\n        return dataOptions[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : _this35[k];\n      });\n\n      this._manager.setDataOptions(this, dataOptions);\n    }\n  }]);\n\n  return AgmDataLayer;\n}();\n\nAgmDataLayer.ɵfac = function AgmDataLayer_Factory(t) {\n  return new (t || AgmDataLayer)(ɵngcc0.ɵɵdirectiveInject(DataLayerManager));\n};\n\nAgmDataLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmDataLayer,\n  selectors: [[\"agm-data-layer\"]],\n  inputs: {\n    geoJson: \"geoJson\",\n    style: \"style\"\n  },\n  outputs: {\n    layerClick: \"layerClick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmDataLayer._dataOptionsAttributes = ['style'];\n\nAgmDataLayer.ctorParameters = function () {\n  return [{\n    type: DataLayerManager\n  }];\n};\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmDataLayer.prototype, \"layerClick\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmDataLayer.prototype, \"geoJson\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Function)], AgmDataLayer.prototype, \"style\", void 0);\n\nAgmDataLayer = AgmDataLayer_1 = __decorate([__metadata(\"design:paramtypes\", [DataLayerManager])], AgmDataLayer);\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\n\nvar FitBoundsAccessor = function FitBoundsAccessor() {\n  _classCallCheck(this, FitBoundsAccessor);\n};\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\n\n\nvar FitBoundsService = /*#__PURE__*/function () {\n  function FitBoundsService(loader) {\n    var _this36 = this;\n\n    _classCallCheck(this, FitBoundsService);\n\n    this._boundsChangeSampleTime$ = new BehaviorSubject(200);\n    this._includeInBounds$ = new BehaviorSubject(new Map());\n    this.bounds$ = from(loader.load()).pipe(flatMap(function () {\n      return _this36._includeInBounds$;\n    }), sample(this._boundsChangeSampleTime$.pipe(switchMap(function (time) {\n      return timer(0, time);\n    }))), map(function (includeInBounds) {\n      return _this36._generateBounds(includeInBounds);\n    }), shareReplay(1));\n  }\n\n  _createClass(FitBoundsService, [{\n    key: \"_generateBounds\",\n    value: function _generateBounds(includeInBounds) {\n      var bounds = new google.maps.LatLngBounds();\n      includeInBounds.forEach(function (b) {\n        return bounds.extend(b);\n      });\n      return bounds;\n    }\n  }, {\n    key: \"addToBounds\",\n    value: function addToBounds(latLng) {\n      var id = this._createIdentifier(latLng);\n\n      if (this._includeInBounds$.value.has(id)) {\n        return;\n      }\n\n      var map = this._includeInBounds$.value;\n      map.set(id, latLng);\n\n      this._includeInBounds$.next(map);\n    }\n  }, {\n    key: \"removeFromBounds\",\n    value: function removeFromBounds(latLng) {\n      var map = this._includeInBounds$.value;\n      map.delete(this._createIdentifier(latLng));\n\n      this._includeInBounds$.next(map);\n    }\n  }, {\n    key: \"changeFitBoundsChangeSampleTime\",\n    value: function changeFitBoundsChangeSampleTime(timeMs) {\n      this._boundsChangeSampleTime$.next(timeMs);\n    }\n  }, {\n    key: \"getBounds$\",\n    value: function getBounds$() {\n      return this.bounds$;\n    }\n  }, {\n    key: \"_createIdentifier\",\n    value: function _createIdentifier(latLng) {\n      return \"\".concat(latLng.lat, \"+\").concat(latLng.lng);\n    }\n  }]);\n\n  return FitBoundsService;\n}();\n\nFitBoundsService.ɵfac = function FitBoundsService_Factory(t) {\n  return new (t || FitBoundsService)(ɵngcc0.ɵɵinject(MapsAPILoader));\n};\n\nFitBoundsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FitBoundsService,\n  factory: function factory(t) {\n    return FitBoundsService.ɵfac(t);\n  }\n});\n\nFitBoundsService.ctorParameters = function () {\n  return [{\n    type: MapsAPILoader\n  }];\n};\n\nFitBoundsService = __decorate([__metadata(\"design:paramtypes\", [MapsAPILoader])], FitBoundsService);\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\n\nvar AgmFitBounds = /*#__PURE__*/function () {\n  function AgmFitBounds(_fitBoundsAccessor, _fitBoundsService) {\n    _classCallCheck(this, AgmFitBounds);\n\n    this._fitBoundsAccessor = _fitBoundsAccessor;\n    this._fitBoundsService = _fitBoundsService;\n    /**\n     * If the value is true, the element gets added to the bounds of the map.\n     * Default: true.\n     */\n\n    this.agmFitBounds = true;\n    this._destroyed$ = new Subject();\n    this._latestFitBoundsDetails = null;\n  }\n  /**\n   * @internal\n   */\n\n\n  _createClass(AgmFitBounds, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._updateBounds();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this37 = this;\n\n      this._fitBoundsAccessor.getFitBoundsDetails$().pipe(distinctUntilChanged(function (x, y) {\n        return x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng;\n      }), takeUntil(this._destroyed$)).subscribe(function (details) {\n        return _this37._updateBounds(details);\n      });\n    }\n    /*\n     Either the location changed, or visible status changed.\n     Possible state changes are\n     invisible -> visible\n     visible -> invisible\n     visible -> visible (new location)\n    */\n\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds(newFitBoundsDetails) {\n      // either visibility will change, or location, so remove the old one anyway\n      if (this._latestFitBoundsDetails) {\n        this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng); // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n        // true -> false -> true, in which case we still need old value cached here\n\n      }\n\n      if (newFitBoundsDetails) {\n        this._latestFitBoundsDetails = newFitBoundsDetails;\n      }\n\n      if (!this._latestFitBoundsDetails) {\n        return;\n      }\n\n      if (this.agmFitBounds === true) {\n        this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed$.next();\n\n      this._destroyed$.complete();\n\n      if (this._latestFitBoundsDetails !== null) {\n        this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n      }\n    }\n  }]);\n\n  return AgmFitBounds;\n}();\n\nAgmFitBounds.ɵfac = function AgmFitBounds_Factory(t) {\n  return new (t || AgmFitBounds)(ɵngcc0.ɵɵdirectiveInject(FitBoundsAccessor, 2), ɵngcc0.ɵɵdirectiveInject(FitBoundsService));\n};\n\nAgmFitBounds.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmFitBounds,\n  selectors: [[\"\", \"agmFitBounds\", \"\"]],\n  inputs: {\n    agmFitBounds: \"agmFitBounds\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nAgmFitBounds.ctorParameters = function () {\n  return [{\n    type: FitBoundsAccessor,\n    decorators: [{\n      type: Self\n    }]\n  }, {\n    type: FitBoundsService\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmFitBounds.prototype, \"agmFitBounds\", void 0);\n\nAgmFitBounds = __decorate([__param(0, Self()), __metadata(\"design:paramtypes\", [FitBoundsAccessor, FitBoundsService])], AgmFitBounds);\n\nvar MarkerManager = /*#__PURE__*/function () {\n  function MarkerManager(_mapsWrapper, _zone) {\n    _classCallCheck(this, MarkerManager);\n\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._markers = new Map();\n  }\n\n  _createClass(MarkerManager, [{\n    key: \"convertAnimation\",\n    value: function convertAnimation(uiAnim) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(uiAnim === null)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 4:\n                return _context.abrupt(\"return\", this._mapsWrapper.getNativeMap().then(function () {\n                  return google.maps.Animation[uiAnim];\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"deleteMarker\",\n    value: function deleteMarker(marker) {\n      var _this38 = this;\n\n      var m = this._markers.get(marker);\n\n      if (m == null) {\n        // marker already deleted\n        return Promise.resolve();\n      }\n\n      return m.then(function (m) {\n        return _this38._zone.run(function () {\n          m.setMap(null);\n\n          _this38._markers.delete(marker);\n        });\n      });\n    }\n  }, {\n    key: \"updateMarkerPosition\",\n    value: function updateMarkerPosition(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setPosition({\n          lat: marker.latitude,\n          lng: marker.longitude\n        });\n      });\n    }\n  }, {\n    key: \"updateTitle\",\n    value: function updateTitle(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setTitle(marker.title);\n      });\n    }\n  }, {\n    key: \"updateLabel\",\n    value: function updateLabel(marker) {\n      return this._markers.get(marker).then(function (m) {\n        m.setLabel(marker.label);\n      });\n    }\n  }, {\n    key: \"updateDraggable\",\n    value: function updateDraggable(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setDraggable(marker.draggable);\n      });\n    }\n  }, {\n    key: \"updateIcon\",\n    value: function updateIcon(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setIcon(marker.iconUrl);\n      });\n    }\n  }, {\n    key: \"updateOpacity\",\n    value: function updateOpacity(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setOpacity(marker.opacity);\n      });\n    }\n  }, {\n    key: \"updateVisible\",\n    value: function updateVisible(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setVisible(marker.visible);\n      });\n    }\n  }, {\n    key: \"updateZIndex\",\n    value: function updateZIndex(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setZIndex(marker.zIndex);\n      });\n    }\n  }, {\n    key: \"updateClickable\",\n    value: function updateClickable(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setClickable(marker.clickable);\n      });\n    }\n  }, {\n    key: \"updateAnimation\",\n    value: function updateAnimation(marker) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var m;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._markers.get(marker);\n\n              case 2:\n                m = _context2.sent;\n                _context2.t0 = m;\n                _context2.next = 6;\n                return this.convertAnimation(marker.animation);\n\n              case 6:\n                _context2.t1 = _context2.sent;\n\n                _context2.t0.setAnimation.call(_context2.t0, _context2.t1);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker) {\n      var _this39 = this;\n\n      var markerPromise = new Promise(function (resolve) {\n        return __awaiter(_this39, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.t0 = this._mapsWrapper;\n                  _context3.t1 = {\n                    lat: marker.latitude,\n                    lng: marker.longitude\n                  };\n                  _context3.t2 = marker.label;\n                  _context3.t3 = marker.draggable;\n                  _context3.t4 = marker.iconUrl;\n                  _context3.t5 = marker.opacity;\n                  _context3.t6 = marker.visible;\n                  _context3.t7 = marker.zIndex;\n                  _context3.t8 = marker.title;\n                  _context3.t9 = marker.clickable;\n                  _context3.next = 12;\n                  return this.convertAnimation(marker.animation);\n\n                case 12:\n                  _context3.t10 = _context3.sent;\n                  _context3.t11 = {\n                    position: _context3.t1,\n                    label: _context3.t2,\n                    draggable: _context3.t3,\n                    icon: _context3.t4,\n                    opacity: _context3.t5,\n                    visible: _context3.t6,\n                    zIndex: _context3.t7,\n                    title: _context3.t8,\n                    clickable: _context3.t9,\n                    animation: _context3.t10\n                  };\n                  return _context3.abrupt(\"return\", _context3.t0.createMarker.call(_context3.t0, _context3.t11).then(resolve));\n\n                case 15:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n      });\n\n      this._markers.set(marker, markerPromise);\n    }\n  }, {\n    key: \"getNativeMarker\",\n    value: function getNativeMarker(marker) {\n      return this._markers.get(marker);\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, marker) {\n      var _this40 = this;\n\n      return new Observable(function (observer) {\n        _this40._markers.get(marker).then(function (m) {\n          m.addListener(eventName, function (e) {\n            return _this40._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return MarkerManager;\n}();\n\nMarkerManager.ɵfac = function MarkerManager_Factory(t) {\n  return new (t || MarkerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nMarkerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MarkerManager,\n  factory: function factory(t) {\n    return MarkerManager.ɵfac(t);\n  }\n});\n\nMarkerManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n\nMarkerManager = __decorate([__metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])], MarkerManager);\n\nvar InfoWindowManager = /*#__PURE__*/function () {\n  function InfoWindowManager(_mapsWrapper, _zone, _markerManager) {\n    _classCallCheck(this, InfoWindowManager);\n\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._markerManager = _markerManager;\n    this._infoWindows = new Map();\n  }\n\n  _createClass(InfoWindowManager, [{\n    key: \"deleteInfoWindow\",\n    value: function deleteInfoWindow(infoWindow) {\n      var _this41 = this;\n\n      var iWindow = this._infoWindows.get(infoWindow);\n\n      if (iWindow == null) {\n        // info window already deleted\n        return Promise.resolve();\n      }\n\n      return iWindow.then(function (i) {\n        return _this41._zone.run(function () {\n          i.close();\n\n          _this41._infoWindows.delete(infoWindow);\n        });\n      });\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(infoWindow) {\n      return this._infoWindows.get(infoWindow).then(function (i) {\n        return i.setPosition({\n          lat: infoWindow.latitude,\n          lng: infoWindow.longitude\n        });\n      });\n    }\n  }, {\n    key: \"setZIndex\",\n    value: function setZIndex(infoWindow) {\n      return this._infoWindows.get(infoWindow).then(function (i) {\n        return i.setZIndex(infoWindow.zIndex);\n      });\n    }\n  }, {\n    key: \"open\",\n    value: function open(infoWindow) {\n      var _this42 = this;\n\n      return this._infoWindows.get(infoWindow).then(function (w) {\n        if (infoWindow.hostMarker != null) {\n          return _this42._markerManager.getNativeMarker(infoWindow.hostMarker).then(function (marker) {\n            return _this42._mapsWrapper.getNativeMap().then(function (map) {\n              return w.open(map, marker);\n            });\n          });\n        }\n\n        return _this42._mapsWrapper.getNativeMap().then(function (map) {\n          return w.open(map);\n        });\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close(infoWindow) {\n      return this._infoWindows.get(infoWindow).then(function (w) {\n        return w.close();\n      });\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(infoWindow, options) {\n      return this._infoWindows.get(infoWindow).then(function (i) {\n        return i.setOptions(options);\n      });\n    }\n  }, {\n    key: \"addInfoWindow\",\n    value: function addInfoWindow(infoWindow) {\n      var options = {\n        content: infoWindow.content,\n        maxWidth: infoWindow.maxWidth,\n        zIndex: infoWindow.zIndex,\n        disableAutoPan: infoWindow.disableAutoPan\n      };\n\n      if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n        options.position = {\n          lat: infoWindow.latitude,\n          lng: infoWindow.longitude\n        };\n      }\n\n      var infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n\n      this._infoWindows.set(infoWindow, infoWindowPromise);\n    }\n    /**\n     * Creates a Google Maps event listener for the given InfoWindow as an Observable\n     */\n\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, infoWindow) {\n      var _this43 = this;\n\n      return new Observable(function (observer) {\n        _this43._infoWindows.get(infoWindow).then(function (i) {\n          i.addListener(eventName, function (e) {\n            return _this43._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return InfoWindowManager;\n}();\n\nInfoWindowManager.ɵfac = function InfoWindowManager_Factory(t) {\n  return new (t || InfoWindowManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(MarkerManager));\n};\n\nInfoWindowManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: InfoWindowManager,\n  factory: function factory(t) {\n    return InfoWindowManager.ɵfac(t);\n  }\n});\n\nInfoWindowManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }, {\n    type: MarkerManager\n  }];\n};\n\nInfoWindowManager = __decorate([__metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone, MarkerManager])], InfoWindowManager);\nvar AgmInfoWindow_1;\nvar infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmInfoWindow = AgmInfoWindow_1 = /*#__PURE__*/function () {\n  function AgmInfoWindow(_infoWindowManager, _el) {\n    _classCallCheck(this, AgmInfoWindow);\n\n    this._infoWindowManager = _infoWindowManager;\n    this._el = _el;\n    /**\n     * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n     */\n\n    this.isOpen = false;\n    /**\n     * Emits an event when the info window is closed.\n     */\n\n    this.infoWindowClose = new EventEmitter();\n    this._infoWindowAddedToManager = false;\n    this._id = (infoWindowId++).toString();\n  }\n\n  _createClass(AgmInfoWindow, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n\n      this._infoWindowManager.addInfoWindow(this);\n\n      this._infoWindowAddedToManager = true;\n\n      this._updateOpenState();\n\n      this._registerEventListeners();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._infoWindowAddedToManager) {\n        return;\n      }\n\n      if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' && typeof this.longitude === 'number') {\n        this._infoWindowManager.setPosition(this);\n      }\n\n      if (changes['zIndex']) {\n        this._infoWindowManager.setZIndex(this);\n      }\n\n      if (changes['isOpen']) {\n        this._updateOpenState();\n      }\n\n      this._setInfoWindowOptions(changes);\n    }\n  }, {\n    key: \"_registerEventListeners\",\n    value: function _registerEventListeners() {\n      var _this44 = this;\n\n      this._infoWindowManager.createEventObservable('closeclick', this).subscribe(function () {\n        _this44.isOpen = false;\n\n        _this44.infoWindowClose.emit();\n      });\n    }\n  }, {\n    key: \"_updateOpenState\",\n    value: function _updateOpenState() {\n      this.isOpen ? this.open() : this.close();\n    }\n  }, {\n    key: \"_setInfoWindowOptions\",\n    value: function _setInfoWindowOptions(changes) {\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmInfoWindow_1._infoWindowOptionsInputs.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        options[k] = changes[k].currentValue;\n      });\n\n      this._infoWindowManager.setOptions(this, options);\n    }\n    /**\n     * Opens the info window.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this._infoWindowManager.open(this);\n    }\n    /**\n     * Closes the info window.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this45 = this;\n\n      return this._infoWindowManager.close(this).then(function () {\n        _this45.infoWindowClose.emit();\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'AgmInfoWindow-' + this._id.toString();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._infoWindowManager.deleteInfoWindow(this);\n    }\n  }]);\n\n  return AgmInfoWindow;\n}();\n\nAgmInfoWindow.ɵfac = function AgmInfoWindow_Factory(t) {\n  return new (t || AgmInfoWindow)(ɵngcc0.ɵɵdirectiveInject(InfoWindowManager), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nAgmInfoWindow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AgmInfoWindow,\n  selectors: [[\"agm-info-window\"]],\n  inputs: {\n    isOpen: \"isOpen\",\n    latitude: \"latitude\",\n    longitude: \"longitude\",\n    disableAutoPan: \"disableAutoPan\",\n    zIndex: \"zIndex\",\n    maxWidth: \"maxWidth\"\n  },\n  outputs: {\n    infoWindowClose: \"infoWindowClose\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"agm-info-window-content\"]],\n  template: function AgmInfoWindow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\nAgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\n\nAgmInfoWindow.ctorParameters = function () {\n  return [{\n    type: InfoWindowManager\n  }, {\n    type: ElementRef\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmInfoWindow.prototype, \"latitude\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmInfoWindow.prototype, \"longitude\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], AgmInfoWindow.prototype, \"disableAutoPan\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmInfoWindow.prototype, \"zIndex\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmInfoWindow.prototype, \"maxWidth\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmInfoWindow.prototype, \"isOpen\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmInfoWindow.prototype, \"infoWindowClose\", void 0);\n\nAgmInfoWindow = AgmInfoWindow_1 = __decorate([__metadata(\"design:paramtypes\", [InfoWindowManager, ElementRef])], AgmInfoWindow);\n/**\n * Manages all KML Layers for a Google Map instance.\n */\n\nvar KmlLayerManager = /*#__PURE__*/function () {\n  function KmlLayerManager(_wrapper, _zone) {\n    _classCallCheck(this, KmlLayerManager);\n\n    this._wrapper = _wrapper;\n    this._zone = _zone;\n    this._layers = new Map();\n  }\n  /**\n   * Adds a new KML Layer to the map.\n   */\n\n\n  _createClass(KmlLayerManager, [{\n    key: \"addKmlLayer\",\n    value: function addKmlLayer(layer) {\n      var newLayer = this._wrapper.getNativeMap().then(function (m) {\n        return new google.maps.KmlLayer({\n          clickable: layer.clickable,\n          map: m,\n          preserveViewport: layer.preserveViewport,\n          screenOverlays: layer.screenOverlays,\n          suppressInfoWindows: layer.suppressInfoWindows,\n          url: layer.url,\n          zIndex: layer.zIndex\n        });\n      });\n\n      this._layers.set(layer, newLayer);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(layer, options) {\n      this._layers.get(layer).then(function (l) {\n        return l.setOptions(options);\n      });\n    }\n  }, {\n    key: \"deleteKmlLayer\",\n    value: function deleteKmlLayer(layer) {\n      var _this46 = this;\n\n      this._layers.get(layer).then(function (l) {\n        l.setMap(null);\n\n        _this46._layers.delete(layer);\n      });\n    }\n    /**\n     * Creates a Google Maps event listener for the given KmlLayer as an Observable\n     */\n\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, layer) {\n      var _this47 = this;\n\n      return new Observable(function (observer) {\n        _this47._layers.get(layer).then(function (m) {\n          m.addListener(eventName, function (e) {\n            return _this47._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return KmlLayerManager;\n}();\n\nKmlLayerManager.ɵfac = function KmlLayerManager_Factory(t) {\n  return new (t || KmlLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nKmlLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: KmlLayerManager,\n  factory: function factory(t) {\n    return KmlLayerManager.ɵfac(t);\n  }\n});\n\nKmlLayerManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n\nKmlLayerManager = __decorate([__metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])], KmlLayerManager);\nvar AgmKmlLayer_1;\nvar layerId$2 = 0;\n\nvar AgmKmlLayer = AgmKmlLayer_1 = /*#__PURE__*/function () {\n  function AgmKmlLayer(_manager) {\n    _classCallCheck(this, AgmKmlLayer);\n\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId$2++).toString();\n    this._subscriptions = [];\n    /**\n     * If true, the layer receives mouse events. Default value is true.\n     */\n\n    this.clickable = true;\n    /**\n     * By default, the input map is centered and zoomed to the bounding box of the contents of the\n     * layer.\n     * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n     * were never set.\n     */\n\n    this.preserveViewport = false;\n    /**\n     * Whether to render the screen overlays. Default true.\n     */\n\n    this.screenOverlays = true;\n    /**\n     * Suppress the rendering of info windows when layer features are clicked.\n     */\n\n    this.suppressInfoWindows = false;\n    /**\n     * The URL of the KML document to display.\n     */\n\n    this.url = null;\n    /**\n     * The z-index of the layer.\n     */\n\n    this.zIndex = null;\n    /**\n     * This event is fired when a feature in the layer is clicked.\n     */\n\n    this.layerClick = new EventEmitter();\n    /**\n     * This event is fired when the KML layers default viewport has changed.\n     */\n\n    this.defaultViewportChange = new EventEmitter();\n    /**\n     * This event is fired when the KML layer has finished loading.\n     * At this point it is safe to read the status property to determine if the layer loaded\n     * successfully.\n     */\n\n    this.statusChange = new EventEmitter();\n  }\n\n  _createClass(AgmKmlLayer, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._addedToManager) {\n        return;\n      }\n\n      this._manager.addKmlLayer(this);\n\n      this._addedToManager = true;\n\n      this._addEventListeners();\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._addedToManager) {\n        return;\n      }\n\n      this._updatePolygonOptions(changes);\n    }\n  }, {\n    key: \"_updatePolygonOptions\",\n    value: function _updatePolygonOptions(changes) {\n      var options = Object.keys(changes).filter(function (k) {\n        return AgmKmlLayer_1._kmlLayerOptions.indexOf(k) !== -1;\n      }).reduce(function (obj, k) {\n        obj[k] = changes[k].currentValue;\n        return obj;\n      }, {});\n\n      if (Object.keys(options).length > 0) {\n        this._manager.setOptions(this, options);\n      }\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this48 = this;\n\n      var listeners = [{\n        name: 'click',\n        handler: function handler(ev) {\n          return _this48.layerClick.emit(ev);\n        }\n      }, {\n        name: 'defaultviewport_changed',\n        handler: function handler() {\n          return _this48.defaultViewportChange.emit();\n        }\n      }, {\n        name: 'status_changed',\n        handler: function handler() {\n          return _this48.statusChange.emit();\n        }\n      }];\n      listeners.forEach(function (obj) {\n        var os = _this48._manager.createEventObservable(obj.name, _this48).subscribe(obj.handler);\n\n        _this48._subscriptions.push(os);\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AgmKmlLayer-\".concat(this._id.toString());\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._manager.deleteKmlLayer(this); // unsubscribe all registered observable subscriptions\n\n\n      this._subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  }]);\n\n  return AgmKmlLayer;\n}();\n\nAgmKmlLayer.ɵfac = function AgmKmlLayer_Factory(t) {\n  return new (t || AgmKmlLayer)(ɵngcc0.ɵɵdirectiveInject(KmlLayerManager));\n};\n\nAgmKmlLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmKmlLayer,\n  selectors: [[\"agm-kml-layer\"]],\n  inputs: {\n    clickable: \"clickable\",\n    preserveViewport: \"preserveViewport\",\n    screenOverlays: \"screenOverlays\",\n    suppressInfoWindows: \"suppressInfoWindows\",\n    url: \"url\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    layerClick: \"layerClick\",\n    defaultViewportChange: \"defaultViewportChange\",\n    statusChange: \"statusChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\n\nAgmKmlLayer.ctorParameters = function () {\n  return [{\n    type: KmlLayerManager\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmKmlLayer.prototype, \"clickable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmKmlLayer.prototype, \"preserveViewport\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmKmlLayer.prototype, \"screenOverlays\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmKmlLayer.prototype, \"suppressInfoWindows\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmKmlLayer.prototype, \"url\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmKmlLayer.prototype, \"zIndex\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmKmlLayer.prototype, \"layerClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmKmlLayer.prototype, \"defaultViewportChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmKmlLayer.prototype, \"statusChange\", void 0);\n\nAgmKmlLayer = AgmKmlLayer_1 = __decorate([__metadata(\"design:paramtypes\", [KmlLayerManager])], AgmKmlLayer);\n\nfunction createMVCEventObservable(array) {\n  var eventNames = ['insert_at', 'remove_at', 'set_at'];\n  return fromEventPattern(function (handler) {\n    return eventNames.map(function (evName) {\n      return array.addListener(evName, function (index, previous) {\n        return handler.apply(array, [{\n          'newArr': array.getArray(),\n          evName: evName,\n          index: index,\n          previous: previous\n        }]);\n      });\n    });\n  }, function (_handler, evListeners) {\n    return evListeners.forEach(function (evListener) {\n      return evListener.remove();\n    });\n  });\n}\n\nvar MvcArrayMock = /*#__PURE__*/function () {\n  function MvcArrayMock() {\n    _classCallCheck(this, MvcArrayMock);\n\n    this.vals = [];\n    this.listeners = {\n      'remove_at': [],\n      'insert_at': [],\n      'set_at': []\n    };\n  }\n\n  _createClass(MvcArrayMock, [{\n    key: \"clear\",\n    value: function clear() {\n      for (var i = this.vals.length - 1; i >= 0; i--) {\n        this.removeAt(i);\n      }\n    }\n  }, {\n    key: \"getArray\",\n    value: function getArray() {\n      return _toConsumableArray(this.vals);\n    }\n  }, {\n    key: \"getAt\",\n    value: function getAt(i) {\n      return this.vals[i];\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.vals.length;\n    }\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(i, elem) {\n      this.vals.splice(i, 0, elem);\n      this.listeners.insert_at.map(function (listener) {\n        return listener(i);\n      });\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var _this49 = this;\n\n      var deleted = this.vals.pop();\n      this.listeners.remove_at.map(function (listener) {\n        return listener(_this49.vals.length, deleted);\n      });\n      return deleted;\n    }\n  }, {\n    key: \"push\",\n    value: function push(elem) {\n      var _this50 = this;\n\n      this.vals.push(elem);\n      this.listeners.insert_at.map(function (listener) {\n        return listener(_this50.vals.length - 1);\n      });\n      return this.vals.length;\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(i) {\n      var deleted = this.vals.splice(i, 1)[0];\n      this.listeners.remove_at.map(function (listener) {\n        return listener(i, deleted);\n      });\n      return deleted;\n    }\n  }, {\n    key: \"setAt\",\n    value: function setAt(i, elem) {\n      var deleted = this.vals[i];\n      this.vals[i] = elem;\n      this.listeners.set_at.map(function (listener) {\n        return listener(i, deleted);\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      this.vals.forEach(callback);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(eventName, handler) {\n      var listenerArr = this.listeners[eventName];\n      listenerArr.push(handler);\n      return {\n        remove: function remove() {\n          listenerArr.splice(listenerArr.indexOf(handler), 1);\n        }\n      };\n    }\n  }]);\n\n  return MvcArrayMock;\n}();\n\nvar PolygonManager = /*#__PURE__*/function () {\n  function PolygonManager(_mapsWrapper, _zone) {\n    _classCallCheck(this, PolygonManager);\n\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._polygons = new Map();\n  }\n\n  _createClass(PolygonManager, [{\n    key: \"addPolygon\",\n    value: function addPolygon(path) {\n      var polygonPromise = this._mapsWrapper.createPolygon({\n        clickable: path.clickable,\n        draggable: path.draggable,\n        editable: path.editable,\n        fillColor: path.fillColor,\n        fillOpacity: path.fillOpacity,\n        geodesic: path.geodesic,\n        paths: path.paths,\n        strokeColor: path.strokeColor,\n        strokeOpacity: path.strokeOpacity,\n        strokeWeight: path.strokeWeight,\n        visible: path.visible,\n        zIndex: path.zIndex\n      });\n\n      this._polygons.set(path, polygonPromise);\n    }\n  }, {\n    key: \"updatePolygon\",\n    value: function updatePolygon(polygon) {\n      var _this51 = this;\n\n      var m = this._polygons.get(polygon);\n\n      if (m == null) {\n        return Promise.resolve();\n      }\n\n      return m.then(function (l) {\n        return _this51._zone.run(function () {\n          l.setPaths(polygon.paths);\n        });\n      });\n    }\n  }, {\n    key: \"setPolygonOptions\",\n    value: function setPolygonOptions(path, options) {\n      return this._polygons.get(path).then(function (l) {\n        l.setOptions(options);\n      });\n    }\n  }, {\n    key: \"deletePolygon\",\n    value: function deletePolygon(paths) {\n      var _this52 = this;\n\n      var m = this._polygons.get(paths);\n\n      if (m == null) {\n        return Promise.resolve();\n      }\n\n      return m.then(function (l) {\n        return _this52._zone.run(function () {\n          l.setMap(null);\n\n          _this52._polygons.delete(paths);\n        });\n      });\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath(polygon) {\n      return this._polygons.get(polygon).then(function (polygon) {\n        return polygon.getPath().getArray();\n      });\n    }\n  }, {\n    key: \"getPaths\",\n    value: function getPaths(polygon) {\n      return this._polygons.get(polygon).then(function (polygon) {\n        return polygon.getPaths().getArray().map(function (p) {\n          return p.getArray();\n        });\n      });\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, path) {\n      var _this53 = this;\n\n      return new Observable(function (observer) {\n        _this53._polygons.get(path).then(function (l) {\n          l.addListener(eventName, function (e) {\n            return _this53._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"createPathEventObservable\",\n    value: function createPathEventObservable(agmPolygon) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var polygon, paths, pathsChanges$;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._polygons.get(agmPolygon);\n\n              case 2:\n                polygon = _context4.sent;\n                paths = polygon.getPaths();\n                pathsChanges$ = createMVCEventObservable(paths);\n                return _context4.abrupt(\"return\", pathsChanges$.pipe(startWith({\n                  newArr: paths.getArray()\n                }), // in order to subscribe to them all\n                switchMap(function (parentMVEvent) {\n                  return merge.apply(void 0, _toConsumableArray( // rest parameter\n                  parentMVEvent.newArr.map(function (chMVC, index) {\n                    return createMVCEventObservable(chMVC).pipe(map(function (chMVCEvent) {\n                      return {\n                        parentMVEvent: parentMVEvent,\n                        chMVCEvent: chMVCEvent,\n                        pathIndex: index\n                      };\n                    }));\n                  }))).pipe(startWith({\n                    parentMVEvent: parentMVEvent,\n                    chMVCEvent: null,\n                    pathIndex: null\n                  }));\n                }), // start the merged ob with an event signinifing change to parent\n                skip(1), // skip the manually added event\n                map(function (_ref) {\n                  var parentMVEvent = _ref.parentMVEvent,\n                      chMVCEvent = _ref.chMVCEvent,\n                      pathIndex = _ref.pathIndex;\n                  var retVal;\n\n                  if (!chMVCEvent) {\n                    retVal = {\n                      newArr: parentMVEvent.newArr.map(function (subArr) {\n                        return subArr.getArray().map(function (latLng) {\n                          return latLng.toJSON();\n                        });\n                      }),\n                      eventName: parentMVEvent.evName,\n                      index: parentMVEvent.index\n                    };\n\n                    if (parentMVEvent.previous) {\n                      retVal.previous = parentMVEvent.previous.getArray();\n                    }\n                  } else {\n                    retVal = {\n                      newArr: parentMVEvent.newArr.map(function (subArr) {\n                        return subArr.getArray().map(function (latLng) {\n                          return latLng.toJSON();\n                        });\n                      }),\n                      pathIndex: pathIndex,\n                      eventName: chMVCEvent.evName,\n                      index: chMVCEvent.index\n                    };\n\n                    if (chMVCEvent.previous) {\n                      retVal.previous = chMVCEvent.previous;\n                    }\n                  }\n\n                  return retVal;\n                })));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return PolygonManager;\n}();\n\nPolygonManager.ɵfac = function PolygonManager_Factory(t) {\n  return new (t || PolygonManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nPolygonManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: PolygonManager,\n  factory: function factory(t) {\n    return PolygonManager.ɵfac(t);\n  }\n});\n\nPolygonManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n\nPolygonManager = __decorate([__metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])], PolygonManager);\nvar PolylineManager_1;\n\nvar PolylineManager = PolylineManager_1 = /*#__PURE__*/function () {\n  function PolylineManager(_mapsWrapper, _zone) {\n    _classCallCheck(this, PolylineManager);\n\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._polylines = new Map();\n  }\n\n  _createClass(PolylineManager, [{\n    key: \"addPolyline\",\n    value: function addPolyline(line) {\n      var _this54 = this;\n\n      var polylinePromise = this._mapsWrapper.getNativeMap().then(function () {\n        return [PolylineManager_1._convertPoints(line), PolylineManager_1._convertIcons(line)];\n      }).then(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            path = _ref3[0],\n            icons = _ref3[1];\n\n        return _this54._mapsWrapper.createPolyline({\n          clickable: line.clickable,\n          draggable: line.draggable,\n          editable: line.editable,\n          geodesic: line.geodesic,\n          strokeColor: line.strokeColor,\n          strokeOpacity: line.strokeOpacity,\n          strokeWeight: line.strokeWeight,\n          visible: line.visible,\n          zIndex: line.zIndex,\n          path: path,\n          icons: icons\n        });\n      });\n\n      this._polylines.set(line, polylinePromise);\n    }\n  }, {\n    key: \"updatePolylinePoints\",\n    value: function updatePolylinePoints(line) {\n      var _this55 = this;\n\n      var path = PolylineManager_1._convertPoints(line);\n\n      var m = this._polylines.get(line);\n\n      if (m == null) {\n        return Promise.resolve();\n      }\n\n      return m.then(function (l) {\n        return _this55._zone.run(function () {\n          l.setPath(path);\n        });\n      });\n    }\n  }, {\n    key: \"updateIconSequences\",\n    value: function updateIconSequences(line) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this56 = this;\n\n        var icons, m;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._mapsWrapper.getNativeMap();\n\n              case 2:\n                icons = PolylineManager_1._convertIcons(line);\n                m = this._polylines.get(line);\n\n                if (!(m == null)) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 6:\n                return _context5.abrupt(\"return\", m.then(function (l) {\n                  return _this56._zone.run(function () {\n                    return l.setOptions({\n                      icons: icons\n                    });\n                  });\n                }));\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"setPolylineOptions\",\n    value: function setPolylineOptions(line, options) {\n      return this._polylines.get(line).then(function (l) {\n        l.setOptions(options);\n      });\n    }\n  }, {\n    key: \"deletePolyline\",\n    value: function deletePolyline(line) {\n      var _this57 = this;\n\n      var m = this._polylines.get(line);\n\n      if (m == null) {\n        return Promise.resolve();\n      }\n\n      return m.then(function (l) {\n        return _this57._zone.run(function () {\n          l.setMap(null);\n\n          _this57._polylines.delete(line);\n        });\n      });\n    }\n  }, {\n    key: \"getMVCPath\",\n    value: function getMVCPath(agmPolyline) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var polyline;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._polylines.get(agmPolyline);\n\n              case 2:\n                polyline = _context6.sent;\n                return _context6.abrupt(\"return\", polyline.getPath());\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath(agmPolyline) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.getMVCPath(agmPolyline);\n\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent.getArray());\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, line) {\n      var _this58 = this;\n\n      return new Observable(function (observer) {\n        _this58._polylines.get(line).then(function (l) {\n          l.addListener(eventName, function (e) {\n            return _this58._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"createPathEventObservable\",\n    value: function createPathEventObservable(line) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var mvcPath;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getMVCPath(line);\n\n              case 2:\n                mvcPath = _context8.sent;\n                return _context8.abrupt(\"return\", createMVCEventObservable(mvcPath));\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }], [{\n    key: \"_convertPoints\",\n    value: function _convertPoints(line) {\n      var path = line._getPoints().map(function (point) {\n        return {\n          lat: point.latitude,\n          lng: point.longitude\n        };\n      });\n\n      return path;\n    }\n  }, {\n    key: \"_convertPath\",\n    value: function _convertPath(path) {\n      var symbolPath = google.maps.SymbolPath[path];\n\n      if (typeof symbolPath === 'number') {\n        return symbolPath;\n      } else {\n        return path;\n      }\n    }\n  }, {\n    key: \"_convertIcons\",\n    value: function _convertIcons(line) {\n      var icons = line._getIcons().map(function (agmIcon) {\n        return {\n          fixedRotation: agmIcon.fixedRotation,\n          offset: agmIcon.offset,\n          repeat: agmIcon.repeat,\n          icon: {\n            anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n            fillColor: agmIcon.fillColor,\n            fillOpacity: agmIcon.fillOpacity,\n            path: PolylineManager_1._convertPath(agmIcon.path),\n            rotation: agmIcon.rotation,\n            scale: agmIcon.scale,\n            strokeColor: agmIcon.strokeColor,\n            strokeOpacity: agmIcon.strokeOpacity,\n            strokeWeight: agmIcon.strokeWeight\n          }\n        };\n      }); // prune undefineds;\n\n\n      icons.forEach(function (icon) {\n        Object.entries(icon).forEach(function (_ref4) {\n          var _ref5 = _slicedToArray(_ref4, 2),\n              key = _ref5[0],\n              val = _ref5[1];\n\n          if (typeof val === 'undefined') {\n            delete icon[key];\n          }\n        });\n\n        if (typeof icon.icon.anchor.x === 'undefined' || typeof icon.icon.anchor.y === 'undefined') {\n          delete icon.icon.anchor;\n        }\n      });\n      return icons;\n    }\n  }]);\n\n  return PolylineManager;\n}();\n\nPolylineManager.ɵfac = function PolylineManager_Factory(t) {\n  return new (t || PolylineManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nPolylineManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: PolylineManager,\n  factory: function factory(t) {\n    return PolylineManager.ɵfac(t);\n  }\n});\n\nPolylineManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n\nPolylineManager = PolylineManager_1 = __decorate([__metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])], PolylineManager);\n\nvar RectangleManager = /*#__PURE__*/function () {\n  function RectangleManager(_apiWrapper, _zone) {\n    _classCallCheck(this, RectangleManager);\n\n    this._apiWrapper = _apiWrapper;\n    this._zone = _zone;\n    this._rectangles = new Map();\n  }\n\n  _createClass(RectangleManager, [{\n    key: \"addRectangle\",\n    value: function addRectangle(rectangle) {\n      this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n        bounds: {\n          north: rectangle.north,\n          east: rectangle.east,\n          south: rectangle.south,\n          west: rectangle.west\n        },\n        clickable: rectangle.clickable,\n        draggable: rectangle.draggable,\n        editable: rectangle.editable,\n        fillColor: rectangle.fillColor,\n        fillOpacity: rectangle.fillOpacity,\n        strokeColor: rectangle.strokeColor,\n        strokeOpacity: rectangle.strokeOpacity,\n        strokePosition: rectangle.strokePosition,\n        strokeWeight: rectangle.strokeWeight,\n        visible: rectangle.visible,\n        zIndex: rectangle.zIndex\n      }));\n    }\n    /**\n     * Removes the given rectangle from the map.\n     */\n\n  }, {\n    key: \"removeRectangle\",\n    value: function removeRectangle(rectangle) {\n      var _this59 = this;\n\n      return this._rectangles.get(rectangle).then(function (r) {\n        r.setMap(null);\n\n        _this59._rectangles.delete(rectangle);\n      });\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(rectangle, options) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.setOptions(options);\n      });\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.getBounds();\n      });\n    }\n  }, {\n    key: \"setBounds\",\n    value: function setBounds(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.setBounds({\n          north: rectangle.north,\n          east: rectangle.east,\n          south: rectangle.south,\n          west: rectangle.west\n        });\n      });\n    }\n  }, {\n    key: \"setEditable\",\n    value: function setEditable(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.setEditable(rectangle.editable);\n      });\n    }\n  }, {\n    key: \"setDraggable\",\n    value: function setDraggable(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.setDraggable(rectangle.draggable);\n      });\n    }\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.setVisible(rectangle.visible);\n      });\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, rectangle) {\n      var _this60 = this;\n\n      return Observable.create(function (observer) {\n        var listener = null;\n\n        _this60._rectangles.get(rectangle).then(function (r) {\n          listener = r.addListener(eventName, function (e) {\n            return _this60._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n\n        return function () {\n          if (listener !== null) {\n            listener.remove();\n          }\n        };\n      });\n    }\n  }]);\n\n  return RectangleManager;\n}();\n\nRectangleManager.ɵfac = function RectangleManager_Factory(t) {\n  return new (t || RectangleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nRectangleManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: RectangleManager,\n  factory: function factory(t) {\n    return RectangleManager.ɵfac(t);\n  }\n});\n\nRectangleManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n\nRectangleManager = __decorate([__metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])], RectangleManager);\nvar AgmMap_1;\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmMap = AgmMap_1 = /*#__PURE__*/function () {\n  function AgmMap(_elem, _mapsWrapper, _platformId, _fitBoundsService, _zone) {\n    _classCallCheck(this, AgmMap);\n\n    this._elem = _elem;\n    this._mapsWrapper = _mapsWrapper;\n    this._platformId = _platformId;\n    this._fitBoundsService = _fitBoundsService;\n    this._zone = _zone;\n    /**\n     * The longitude that defines the center of the map.\n     */\n\n    this.longitude = 0;\n    /**\n     * The latitude that defines the center of the map.\n     */\n\n    this.latitude = 0;\n    /**\n     * The zoom level of the map. The default zoom level is 8.\n     */\n\n    this.zoom = 8;\n    /**\n     * Enables/disables if map is draggable.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = true;\n    /**\n     * Enables/disables zoom and center on double click. Enabled by default.\n     */\n\n    this.disableDoubleClickZoom = false;\n    /**\n     * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n     * value cannot get updated.\n     */\n\n    this.disableDefaultUI = false;\n    /**\n     * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n     */\n\n    this.scrollwheel = true;\n    /**\n     * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n     * enabled by default.\n     */\n\n    this.keyboardShortcuts = true;\n    /**\n     * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n     * modes, these styles will only apply to labels and geometry.\n     */\n\n    this.styles = [];\n    /**\n     * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n     * used to\n     * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n     */\n\n    this.usePanning = false;\n    /**\n     * Sets the viewport to contain the given bounds.\n     * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n     */\n\n    this.fitBounds = false;\n    /**\n     * The initial enabled/disabled state of the Scale control. This is disabled by default.\n     */\n\n    this.scaleControl = false;\n    /**\n     * The initial enabled/disabled state of the Map type control.\n     */\n\n    this.mapTypeControl = false;\n    /**\n     * The initial enabled/disabled state of the Pan control.\n     */\n\n    this.panControl = false;\n    /**\n     * The initial enabled/disabled state of the Rotate control.\n     */\n\n    this.rotateControl = false;\n    /**\n     * The initial enabled/disabled state of the Fullscreen control.\n     */\n\n    this.fullscreenControl = false;\n    /**\n     * The map mapTypeId. Defaults to 'roadmap'.\n     */\n\n    this.mapTypeId = 'roadmap';\n    /**\n     * When false, map icons are not clickable. A map icon represents a point of interest,\n     * also known as a POI. By default map icons are clickable.\n     */\n\n    this.clickableIcons = true;\n    /**\n     * A map icon represents a point of interest, also known as a POI.\n     * When map icons are clickable by default, an info window is displayed.\n     * When this property is set to false, the info window will not be shown but the click event\n     * will still fire\n     */\n\n    this.showDefaultInfoWindow = true;\n    /**\n     * This setting controls how gestures on the map are handled.\n     * Allowed values:\n     * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n     * - 'greedy'      (All touch gestures pan or zoom the map.)\n     * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n     * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n     */\n\n    this.gestureHandling = 'auto';\n    /**\n     * Controls the automatic switching behavior for the angle of incidence of\n     * the map. The only allowed values are 0 and 45. The value 0 causes the map\n     * to always use a 0° overhead view regardless of the zoom level and\n     * viewport. The value 45 causes the tilt angle to automatically switch to\n     * 45 whenever 45° imagery is available for the current zoom level and\n     * viewport, and switch back to 0 whenever 45° imagery is not available\n     * (this is the default behavior). 45° imagery is only available for\n     * satellite and hybrid map types, within some locations, and at some zoom\n     * levels. Note: getTilt returns the current tilt angle, not the value\n     * specified by this option. Because getTilt and this option refer to\n     * different things, do not bind() the tilt property; doing so may yield\n     * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n     */\n\n    this.tilt = 0;\n    this._observableSubscriptions = [];\n    /**\n     * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n     * marker or infoWindow).\n     */\n\n    this.mapClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     */\n\n    this.mapRightClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     */\n\n    this.mapDblClick = new EventEmitter();\n    /**\n     * This event emitter is fired when the map center changes.\n     */\n\n    this.centerChange = new EventEmitter();\n    /**\n     * This event is fired when the viewport bounds have changed.\n     */\n\n    this.boundsChange = new EventEmitter();\n    /**\n     * This event is fired when the mapTypeId property changes.\n     */\n\n    this.mapTypeIdChange = new EventEmitter();\n    /**\n     * This event is fired when the map becomes idle after panning or zooming.\n     */\n\n    this.idle = new EventEmitter();\n    /**\n     * This event is fired when the zoom level has changed.\n     */\n\n    this.zoomChange = new EventEmitter();\n    /**\n     * This event is fired when the google map is fully initialized.\n     * You get the google.maps.Map instance as a result of this EventEmitter.\n     */\n\n    this.mapReady = new EventEmitter();\n    /**\n     * This event is fired when the visible tiles have finished loading.\n     */\n\n    this.tilesLoaded = new EventEmitter();\n  }\n  /** @internal */\n\n\n  _createClass(AgmMap, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (isPlatformServer(this._platformId)) {\n        // The code is running on the server, do nothing\n        return;\n      } // todo: this should be solved with a new component and a viewChild decorator\n\n\n      var container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n\n      this._initMapInstance(container);\n    }\n  }, {\n    key: \"_initMapInstance\",\n    value: function _initMapInstance(el) {\n      var _this61 = this;\n\n      this._mapsWrapper.createMap(el, {\n        center: {\n          lat: this.latitude || 0,\n          lng: this.longitude || 0\n        },\n        zoom: this.zoom,\n        minZoom: this.minZoom,\n        maxZoom: this.maxZoom,\n        controlSize: this.controlSize,\n        disableDefaultUI: this.disableDefaultUI,\n        disableDoubleClickZoom: this.disableDoubleClickZoom,\n        scrollwheel: this.scrollwheel,\n        backgroundColor: this.backgroundColor,\n        draggable: this.draggable,\n        draggableCursor: this.draggableCursor,\n        draggingCursor: this.draggingCursor,\n        keyboardShortcuts: this.keyboardShortcuts,\n        styles: this.styles,\n        zoomControl: this.zoomControl,\n        zoomControlOptions: this.zoomControlOptions,\n        streetViewControl: this.streetViewControl,\n        streetViewControlOptions: this.streetViewControlOptions,\n        scaleControl: this.scaleControl,\n        scaleControlOptions: this.scaleControlOptions,\n        mapTypeControl: this.mapTypeControl,\n        mapTypeControlOptions: this.mapTypeControlOptions,\n        panControl: this.panControl,\n        panControlOptions: this.panControlOptions,\n        rotateControl: this.rotateControl,\n        rotateControlOptions: this.rotateControlOptions,\n        fullscreenControl: this.fullscreenControl,\n        fullscreenControlOptions: this.fullscreenControlOptions,\n        mapTypeId: this.mapTypeId,\n        clickableIcons: this.clickableIcons,\n        gestureHandling: this.gestureHandling,\n        tilt: this.tilt,\n        restriction: this.restriction\n      }).then(function () {\n        return _this61._mapsWrapper.getNativeMap();\n      }).then(function (map) {\n        return _this61.mapReady.emit(map);\n      }); // register event listeners\n\n\n      this._handleMapCenterChange();\n\n      this._handleMapZoomChange();\n\n      this._handleMapMouseEvents();\n\n      this._handleBoundsChange();\n\n      this._handleMapTypeIdChange();\n\n      this._handleTilesLoadedEvent();\n\n      this._handleIdleEvent();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // unsubscribe all registered observable subscriptions\n      this._observableSubscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      }); // remove all listeners from the map instance\n\n\n      this._mapsWrapper.clearInstanceListeners();\n\n      if (this._fitBoundsSubscription) {\n        this._fitBoundsSubscription.unsubscribe();\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._updateMapOptionsChanges(changes);\n\n      this._updatePosition(changes);\n    }\n  }, {\n    key: \"_updateMapOptionsChanges\",\n    value: function _updateMapOptionsChanges(changes) {\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmMap_1._mapOptionsAttributes.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        options[k] = changes[k].currentValue;\n      });\n\n      this._mapsWrapper.setMapOptions(options);\n    }\n    /**\n     * Triggers a resize event on the google map instance.\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n     * Returns a promise that gets resolved after the event was triggered.\n     */\n\n  }, {\n    key: \"triggerResize\",\n    value: function triggerResize() {\n      var _this62 = this;\n\n      var recenter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      // Note: When we would trigger the resize event and show the map in the same turn (which is a\n      // common case for triggering a resize event), then the resize event would not\n      // work (to show the map), so we trigger the event in a timeout.\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          return _this62._mapsWrapper.triggerMapEvent('resize').then(function () {\n            if (recenter) {\n              _this62.fitBounds != null ? _this62._fitBounds() : _this62._setCenter();\n            }\n\n            resolve();\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_updatePosition\",\n    value: function _updatePosition(changes) {\n      if (changes['latitude'] == null && changes['longitude'] == null && !changes['fitBounds']) {\n        // no position update needed\n        return;\n      } // we prefer fitBounds in changes\n\n\n      if ('fitBounds' in changes) {\n        this._fitBounds();\n\n        return;\n      }\n\n      if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n        return;\n      }\n\n      this._setCenter();\n    }\n  }, {\n    key: \"_setCenter\",\n    value: function _setCenter() {\n      var newCenter = {\n        lat: this.latitude,\n        lng: this.longitude\n      };\n\n      if (this.usePanning) {\n        this._mapsWrapper.panTo(newCenter);\n      } else {\n        this._mapsWrapper.setCenter(newCenter);\n      }\n    }\n  }, {\n    key: \"_fitBounds\",\n    value: function _fitBounds() {\n      switch (this.fitBounds) {\n        case true:\n          this._subscribeToFitBoundsUpdates();\n\n          break;\n\n        case false:\n          if (this._fitBoundsSubscription) {\n            this._fitBoundsSubscription.unsubscribe();\n          }\n\n          break;\n\n        default:\n          this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n\n      }\n    }\n  }, {\n    key: \"_subscribeToFitBoundsUpdates\",\n    value: function _subscribeToFitBoundsUpdates() {\n      var _this63 = this;\n\n      this._zone.runOutsideAngular(function () {\n        _this63._fitBoundsSubscription = _this63._fitBoundsService.getBounds$().subscribe(function (b) {\n          _this63._zone.run(function () {\n            return _this63._updateBounds(b, _this63.fitBoundsPadding);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds(bounds, padding) {\n      if (!bounds) {\n        return;\n      }\n\n      if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n        var newBounds = new google.maps.LatLngBounds();\n        newBounds.union(bounds);\n        bounds = newBounds;\n      }\n\n      if (this.usePanning) {\n        this._mapsWrapper.panToBounds(bounds, padding);\n\n        return;\n      }\n\n      this._mapsWrapper.fitBounds(bounds, padding);\n    }\n  }, {\n    key: \"_isLatLngBoundsLiteral\",\n    value: function _isLatLngBoundsLiteral(bounds) {\n      return bounds != null && bounds.extend === undefined;\n    }\n  }, {\n    key: \"_handleMapCenterChange\",\n    value: function _handleMapCenterChange() {\n      var _this64 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(function () {\n        _this64._mapsWrapper.getCenter().then(function (center) {\n          _this64.latitude = center.lat();\n          _this64.longitude = center.lng();\n\n          _this64.centerChange.emit({\n            lat: _this64.latitude,\n            lng: _this64.longitude\n          });\n        });\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleBoundsChange\",\n    value: function _handleBoundsChange() {\n      var _this65 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(function () {\n        _this65._mapsWrapper.getBounds().then(function (bounds) {\n          _this65.boundsChange.emit(bounds);\n        });\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleMapTypeIdChange\",\n    value: function _handleMapTypeIdChange() {\n      var _this66 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(function () {\n        _this66._mapsWrapper.getMapTypeId().then(function (mapTypeId) {\n          _this66.mapTypeIdChange.emit(mapTypeId);\n        });\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleMapZoomChange\",\n    value: function _handleMapZoomChange() {\n      var _this67 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(function () {\n        _this67._mapsWrapper.getZoom().then(function (z) {\n          _this67.zoom = z;\n\n          _this67.zoomChange.emit(z);\n        });\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleIdleEvent\",\n    value: function _handleIdleEvent() {\n      var _this68 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(function () {\n        _this68.idle.emit(void 0);\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleTilesLoadedEvent\",\n    value: function _handleTilesLoadedEvent() {\n      var _this69 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(function () {\n        return _this69.tilesLoaded.emit(void 0);\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleMapMouseEvents\",\n    value: function _handleMapMouseEvents() {\n      var _this70 = this;\n\n      var events = [{\n        name: 'click',\n        emitter: this.mapClick\n      }, {\n        name: 'rightclick',\n        emitter: this.mapRightClick\n      }, {\n        name: 'dblclick',\n        emitter: this.mapDblClick\n      }];\n      events.forEach(function (e) {\n        var s = _this70._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (event) {\n          var value = {\n            coords: {\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng()\n            },\n            placeId: event.placeId\n          }; // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n\n          if (value.placeId && !_this70.showDefaultInfoWindow) {\n            event.stop();\n          }\n\n          e.emitter.emit(value);\n        });\n\n        _this70._observableSubscriptions.push(s);\n      });\n    }\n  }]);\n\n  return AgmMap;\n}();\n\nAgmMap.ɵfac = function AgmMap_Factory(t) {\n  return new (t || AgmMap)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(FitBoundsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nAgmMap.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AgmMap,\n  selectors: [[\"agm-map\"]],\n  hostVars: 2,\n  hostBindings: function AgmMap_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"sebm-google-map-container\", true);\n    }\n  },\n  inputs: {\n    longitude: \"longitude\",\n    latitude: \"latitude\",\n    zoom: \"zoom\",\n    draggable: [\"mapDraggable\", \"draggable\"],\n    disableDoubleClickZoom: \"disableDoubleClickZoom\",\n    disableDefaultUI: \"disableDefaultUI\",\n    scrollwheel: \"scrollwheel\",\n    keyboardShortcuts: \"keyboardShortcuts\",\n    styles: \"styles\",\n    usePanning: \"usePanning\",\n    fitBounds: \"fitBounds\",\n    scaleControl: \"scaleControl\",\n    mapTypeControl: \"mapTypeControl\",\n    panControl: \"panControl\",\n    rotateControl: \"rotateControl\",\n    fullscreenControl: \"fullscreenControl\",\n    mapTypeId: \"mapTypeId\",\n    clickableIcons: \"clickableIcons\",\n    showDefaultInfoWindow: \"showDefaultInfoWindow\",\n    gestureHandling: \"gestureHandling\",\n    tilt: \"tilt\",\n    minZoom: \"minZoom\",\n    maxZoom: \"maxZoom\",\n    controlSize: \"controlSize\",\n    backgroundColor: \"backgroundColor\",\n    draggableCursor: \"draggableCursor\",\n    draggingCursor: \"draggingCursor\",\n    zoomControl: \"zoomControl\",\n    zoomControlOptions: \"zoomControlOptions\",\n    streetViewControl: \"streetViewControl\",\n    streetViewControlOptions: \"streetViewControlOptions\",\n    fitBoundsPadding: \"fitBoundsPadding\",\n    scaleControlOptions: \"scaleControlOptions\",\n    mapTypeControlOptions: \"mapTypeControlOptions\",\n    panControlOptions: \"panControlOptions\",\n    rotateControlOptions: \"rotateControlOptions\",\n    fullscreenControlOptions: \"fullscreenControlOptions\",\n    restriction: \"restriction\"\n  },\n  outputs: {\n    mapClick: \"mapClick\",\n    mapRightClick: \"mapRightClick\",\n    mapDblClick: \"mapDblClick\",\n    centerChange: \"centerChange\",\n    boundsChange: \"boundsChange\",\n    mapTypeIdChange: \"mapTypeIdChange\",\n    idle: \"idle\",\n    zoomChange: \"zoomChange\",\n    mapReady: \"mapReady\",\n    tilesLoaded: \"tilesLoaded\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([CircleManager, DataLayerManager, DataLayerManager, FitBoundsService, GoogleMapsAPIWrapper, InfoWindowManager, KmlLayerManager, LayerManager, MarkerManager, PolygonManager, PolylineManager, RectangleManager]), ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"agm-map-container-inner\", \"sebm-google-map-container-inner\"], [1, \"agm-map-content\"]],\n  template: function AgmMap_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelement(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".agm-map-container-inner[_ngcontent-%COMP%] {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content[_ngcontent-%COMP%] {\\n      display:none;\\n    }\"]\n});\n/**\n * Map option attributes that can change over time\n */\n\nAgmMap._mapOptionsAttributes = ['disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor', 'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl', 'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom', 'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions', 'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions', 'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction'];\n\nAgmMap.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: FitBoundsService\n  }, {\n    type: NgZone\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"longitude\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"latitude\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"zoom\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmMap.prototype, \"minZoom\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmMap.prototype, \"maxZoom\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmMap.prototype, \"controlSize\", void 0);\n\n__decorate([Input('mapDraggable'), __metadata(\"design:type\", Object)], AgmMap.prototype, \"draggable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"disableDoubleClickZoom\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"disableDefaultUI\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"scrollwheel\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmMap.prototype, \"backgroundColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmMap.prototype, \"draggableCursor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmMap.prototype, \"draggingCursor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"keyboardShortcuts\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], AgmMap.prototype, \"zoomControl\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"zoomControlOptions\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Array)], AgmMap.prototype, \"styles\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"usePanning\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], AgmMap.prototype, \"streetViewControl\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"streetViewControlOptions\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"fitBounds\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"fitBoundsPadding\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"scaleControl\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"scaleControlOptions\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"mapTypeControl\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"mapTypeControlOptions\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"panControl\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"panControlOptions\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"rotateControl\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"rotateControlOptions\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"fullscreenControl\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"fullscreenControlOptions\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmMap.prototype, \"mapTypeId\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"clickableIcons\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"showDefaultInfoWindow\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmMap.prototype, \"gestureHandling\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"tilt\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMap.prototype, \"restriction\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"mapClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"mapRightClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"mapDblClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"centerChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"boundsChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"mapTypeIdChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"idle\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"zoomChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"mapReady\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMap.prototype, \"tilesLoaded\", void 0);\n\nAgmMap = AgmMap_1 = __decorate([__param(2, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, GoogleMapsAPIWrapper, Object, FitBoundsService, NgZone])], AgmMap);\nvar AgmMarker_1;\nvar markerId = 0;\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmMarker = AgmMarker_1 = /*#__PURE__*/function () {\n  function AgmMarker(_markerManager) {\n    _classCallCheck(this, AgmMarker);\n\n    this._markerManager = _markerManager;\n    /**\n     * If true, the marker can be dragged. Default value is false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If true, the marker is visible\n     */\n\n    this.visible = true;\n    /**\n     * Whether to automatically open the child info window when the marker is clicked.\n     */\n\n    this.openInfoWindow = true;\n    /**\n     * The marker's opacity between 0.0 and 1.0.\n     */\n\n    this.opacity = 1;\n    /**\n     * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n     * front of markers with lower values. By default, markers are displayed according to their\n     * vertical position on screen, with lower markers appearing in front of markers further up the\n     * screen.\n     */\n\n    this.zIndex = 1;\n    /**\n     * If true, the marker can be clicked. Default value is true.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.clickable = true;\n    /**\n     * This event is fired when the marker's animation property changes.\n     *\n     * @memberof AgmMarker\n     */\n\n    this.animationChange = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the marker.\n     */\n\n    this.markerClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks twice on the marker.\n     */\n\n    this.markerDblClick = new EventEmitter();\n    /**\n     * This event is fired when the user rightclicks on the marker.\n     */\n\n    this.markerRightClick = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the marker.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the marker.\n     */\n\n    this.drag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the marker.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user mouses over the marker.\n     */\n\n    this.mouseOver = new EventEmitter();\n    /**\n     * This event is fired when the user mouses outside the marker.\n     */\n\n    this.mouseOut = new EventEmitter();\n    /** @internal */\n\n    this.infoWindow = new QueryList();\n    this._markerAddedToManger = false;\n    this._observableSubscriptions = [];\n    this._fitBoundsDetails$ = new ReplaySubject(1);\n    this._id = (markerId++).toString();\n  }\n  /* @internal */\n\n\n  _createClass(AgmMarker, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this71 = this;\n\n      this.handleInfoWindowUpdate();\n      this.infoWindow.changes.subscribe(function () {\n        return _this71.handleInfoWindowUpdate();\n      });\n    }\n  }, {\n    key: \"handleInfoWindowUpdate\",\n    value: function handleInfoWindowUpdate() {\n      var _this72 = this;\n\n      if (this.infoWindow.length > 1) {\n        throw new Error('Expected no more than one info window.');\n      }\n\n      this.infoWindow.forEach(function (marker) {\n        marker.hostMarker = _this72;\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (typeof this.latitude === 'string') {\n        this.latitude = Number(this.latitude);\n      }\n\n      if (typeof this.longitude === 'string') {\n        this.longitude = Number(this.longitude);\n      }\n\n      if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n        return;\n      }\n\n      if (!this._markerAddedToManger) {\n        this._markerManager.addMarker(this);\n\n        this._updateFitBoundsDetails();\n\n        this._markerAddedToManger = true;\n\n        this._addEventListeners();\n\n        return;\n      }\n\n      if (changes['latitude'] || changes['longitude']) {\n        this._markerManager.updateMarkerPosition(this);\n\n        this._updateFitBoundsDetails();\n      }\n\n      if (changes['title']) {\n        this._markerManager.updateTitle(this);\n      }\n\n      if (changes['label']) {\n        this._markerManager.updateLabel(this);\n      }\n\n      if (changes['draggable']) {\n        this._markerManager.updateDraggable(this);\n      }\n\n      if (changes['iconUrl']) {\n        this._markerManager.updateIcon(this);\n      }\n\n      if (changes['opacity']) {\n        this._markerManager.updateOpacity(this);\n      }\n\n      if (changes['visible']) {\n        this._markerManager.updateVisible(this);\n      }\n\n      if (changes['zIndex']) {\n        this._markerManager.updateZIndex(this);\n      }\n\n      if (changes['clickable']) {\n        this._markerManager.updateClickable(this);\n      }\n\n      if (changes['animation']) {\n        this._markerManager.updateAnimation(this);\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"getFitBoundsDetails$\",\n    value: function getFitBoundsDetails$() {\n      return this._fitBoundsDetails$.asObservable();\n    }\n  }, {\n    key: \"_updateFitBoundsDetails\",\n    value: function _updateFitBoundsDetails() {\n      this._fitBoundsDetails$.next({\n        latLng: {\n          lat: this.latitude,\n          lng: this.longitude\n        }\n      });\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this73 = this;\n\n      var cs = this._markerManager.createEventObservable('click', this).subscribe(function () {\n        if (_this73.openInfoWindow) {\n          _this73.infoWindow.forEach(function (infoWindow) {\n            return infoWindow.open();\n          });\n        }\n\n        _this73.markerClick.emit(_this73);\n      });\n\n      this._observableSubscriptions.push(cs);\n\n      var dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(function () {\n        _this73.markerDblClick.emit(null);\n      });\n\n      this._observableSubscriptions.push(dcs);\n\n      var rc = this._markerManager.createEventObservable('rightclick', this).subscribe(function () {\n        _this73.markerRightClick.emit(null);\n      });\n\n      this._observableSubscriptions.push(rc);\n\n      var ds = this._markerManager.createEventObservable('dragstart', this).subscribe(function (e) {\n        _this73.dragStart.emit({\n          coords: {\n            lat: e.latLng.lat(),\n            lng: e.latLng.lng()\n          }\n        });\n      });\n\n      this._observableSubscriptions.push(ds);\n\n      var d = this._markerManager.createEventObservable('drag', this).subscribe(function (e) {\n        _this73.drag.emit({\n          coords: {\n            lat: e.latLng.lat(),\n            lng: e.latLng.lng()\n          }\n        });\n      });\n\n      this._observableSubscriptions.push(d);\n\n      var de = this._markerManager.createEventObservable('dragend', this).subscribe(function (e) {\n        _this73.dragEnd.emit({\n          coords: {\n            lat: e.latLng.lat(),\n            lng: e.latLng.lng()\n          }\n        });\n      });\n\n      this._observableSubscriptions.push(de);\n\n      var mover = this._markerManager.createEventObservable('mouseover', this).subscribe(function (e) {\n        _this73.mouseOver.emit({\n          coords: {\n            lat: e.latLng.lat(),\n            lng: e.latLng.lng()\n          }\n        });\n      });\n\n      this._observableSubscriptions.push(mover);\n\n      var mout = this._markerManager.createEventObservable('mouseout', this).subscribe(function (e) {\n        _this73.mouseOut.emit({\n          coords: {\n            lat: e.latLng.lat(),\n            lng: e.latLng.lng()\n          }\n        });\n      });\n\n      this._observableSubscriptions.push(mout);\n\n      var anChng = this._markerManager.createEventObservable('animation_changed', this).subscribe(function () {\n        _this73.animationChange.emit(_this73.animation);\n      });\n\n      this._observableSubscriptions.push(anChng);\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'AgmMarker-' + this._id.toString();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._markerManager.deleteMarker(this); // unsubscribe all registered observable subscriptions\n\n\n      this._observableSubscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  }]);\n\n  return AgmMarker;\n}();\n\nAgmMarker.ɵfac = function AgmMarker_Factory(t) {\n  return new (t || AgmMarker)(ɵngcc0.ɵɵdirectiveInject(MarkerManager));\n};\n\nAgmMarker.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmMarker,\n  selectors: [[\"agm-marker\"]],\n  contentQueries: function AgmMarker_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, AgmInfoWindow, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infoWindow = _t);\n    }\n  },\n  inputs: {\n    latitude: \"latitude\",\n    longitude: \"longitude\",\n    title: \"title\",\n    label: \"label\",\n    draggable: [\"markerDraggable\", \"draggable\"],\n    iconUrl: \"iconUrl\",\n    openInfoWindow: \"openInfoWindow\",\n    opacity: \"opacity\",\n    visible: \"visible\",\n    zIndex: \"zIndex\",\n    animation: \"animation\",\n    clickable: [\"markerClickable\", \"clickable\"]\n  },\n  outputs: {\n    markerClick: \"markerClick\",\n    dragStart: \"dragStart\",\n    drag: \"drag\",\n    dragEnd: \"dragEnd\",\n    mouseOver: \"mouseOver\",\n    mouseOut: \"mouseOut\",\n    animationChange: \"animationChange\",\n    markerDblClick: \"markerDblClick\",\n    markerRightClick: \"markerRightClick\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: FitBoundsAccessor,\n    useExisting: forwardRef(function () {\n      return AgmMarker_1;\n    })\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nAgmMarker.ctorParameters = function () {\n  return [{\n    type: MarkerManager\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmMarker.prototype, \"latitude\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmMarker.prototype, \"longitude\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmMarker.prototype, \"title\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMarker.prototype, \"label\", void 0);\n\n__decorate([Input('markerDraggable'), __metadata(\"design:type\", Object)], AgmMarker.prototype, \"draggable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmMarker.prototype, \"iconUrl\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMarker.prototype, \"visible\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMarker.prototype, \"openInfoWindow\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMarker.prototype, \"opacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmMarker.prototype, \"zIndex\", void 0);\n\n__decorate([Input('markerClickable'), __metadata(\"design:type\", Object)], AgmMarker.prototype, \"clickable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmMarker.prototype, \"animation\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], AgmMarker.prototype, \"animationChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMarker.prototype, \"markerClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMarker.prototype, \"markerDblClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMarker.prototype, \"markerRightClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMarker.prototype, \"dragStart\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMarker.prototype, \"drag\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMarker.prototype, \"dragEnd\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMarker.prototype, \"mouseOver\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmMarker.prototype, \"mouseOut\", void 0);\n\n__decorate([ContentChildren(AgmInfoWindow), __metadata(\"design:type\", QueryList)], AgmMarker.prototype, \"infoWindow\", void 0);\n\nAgmMarker = AgmMarker_1 = __decorate([__metadata(\"design:paramtypes\", [MarkerManager])], AgmMarker);\nvar AgmPolygon_1;\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: Array<LatLngLiteral> = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\n\nvar AgmPolygon = AgmPolygon_1 = /*#__PURE__*/function () {\n  function AgmPolygon(_polygonManager) {\n    _classCallCheck(this, AgmPolygon);\n\n    this._polygonManager = _polygonManager;\n    /**\n     * Indicates whether this Polygon handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this shape over the map. The geodesic\n     * property defines the mode of dragging. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this shape by dragging the control\n     * points shown at the vertices and on each segment. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will\n     * follow the curvature of the Earth. When false, edges of the polygon are\n     * rendered as straight lines in screen space. Note that the shape of a\n     * geodesic polygon may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     */\n\n    this.geodesic = false;\n    /**\n     * The ordered sequence of coordinates that designates a closed loop.\n     * Unlike polylines, a polygon may consist of one or more paths.\n     *  As a result, the paths property may specify one or more arrays of\n     * LatLng coordinates. Paths are closed automatically; do not repeat the\n     * first vertex of the path as the last vertex. Simple polygons may be\n     * defined using a single array of LatLngs. More complex polygons may\n     * specify an array of arrays. Any simple arrays are converted into Arrays.\n     * Inserting or removing LatLngs from the Array will automatically update\n     * the polygon on the map.\n     */\n\n    this.paths = [];\n    /**\n     * This event is fired when the DOM click event is fired on the Polygon.\n     */\n\n    this.polyClick = new EventEmitter();\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polygon.\n     */\n\n    this.polyDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the polygon.\n     */\n\n    this.polyDrag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the polygon.\n     */\n\n    this.polyDragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the polygon.\n     */\n\n    this.polyDragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polygon.\n     */\n\n    this.polyMouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polygon.\n     */\n\n    this.polyMouseMove = new EventEmitter();\n    /**\n     * This event is fired on Polygon mouseout.\n     */\n\n    this.polyMouseOut = new EventEmitter();\n    /**\n     * This event is fired on Polygon mouseover.\n     */\n\n    this.polyMouseOver = new EventEmitter();\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polygon\n     */\n\n    this.polyMouseUp = new EventEmitter();\n    /**\n     * This event is fired when the Polygon is right-clicked on.\n     */\n\n    this.polyRightClick = new EventEmitter();\n    /**\n     * This event is fired after Polygon first path changes.\n     */\n\n    this.polyPathsChange = new EventEmitter();\n    this._polygonAddedToManager = false;\n    this._subscriptions = [];\n  }\n  /** @internal */\n\n\n  _createClass(AgmPolygon, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      if (!this._polygonAddedToManager) {\n        this._init();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._polygonAddedToManager) {\n        this._init();\n\n        return;\n      }\n\n      this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      this._polygonManager.addPolygon(this);\n\n      this._polygonAddedToManager = true;\n\n      this._addEventListeners();\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this74 = this;\n\n      var handlers = [{\n        name: 'click',\n        handler: function handler(ev) {\n          return _this74.polyClick.emit(ev);\n        }\n      }, {\n        name: 'dblclick',\n        handler: function handler(ev) {\n          return _this74.polyDblClick.emit(ev);\n        }\n      }, {\n        name: 'drag',\n        handler: function handler(ev) {\n          return _this74.polyDrag.emit(ev);\n        }\n      }, {\n        name: 'dragend',\n        handler: function handler(ev) {\n          return _this74.polyDragEnd.emit(ev);\n        }\n      }, {\n        name: 'dragstart',\n        handler: function handler(ev) {\n          return _this74.polyDragStart.emit(ev);\n        }\n      }, {\n        name: 'mousedown',\n        handler: function handler(ev) {\n          return _this74.polyMouseDown.emit(ev);\n        }\n      }, {\n        name: 'mousemove',\n        handler: function handler(ev) {\n          return _this74.polyMouseMove.emit(ev);\n        }\n      }, {\n        name: 'mouseout',\n        handler: function handler(ev) {\n          return _this74.polyMouseOut.emit(ev);\n        }\n      }, {\n        name: 'mouseover',\n        handler: function handler(ev) {\n          return _this74.polyMouseOver.emit(ev);\n        }\n      }, {\n        name: 'mouseup',\n        handler: function handler(ev) {\n          return _this74.polyMouseUp.emit(ev);\n        }\n      }, {\n        name: 'rightclick',\n        handler: function handler(ev) {\n          return _this74.polyRightClick.emit(ev);\n        }\n      }];\n      handlers.forEach(function (obj) {\n        var os = _this74._polygonManager.createEventObservable(obj.name, _this74).subscribe(obj.handler);\n\n        _this74._subscriptions.push(os);\n      });\n\n      this._polygonManager.createPathEventObservable(this).then(function (paths$) {\n        var os = paths$.subscribe(function (pathEvent) {\n          return _this74.polyPathsChange.emit(pathEvent);\n        });\n\n        _this74._subscriptions.push(os);\n      });\n    }\n  }, {\n    key: \"_updatePolygonOptions\",\n    value: function _updatePolygonOptions(changes) {\n      return Object.keys(changes).filter(function (k) {\n        return AgmPolygon_1._polygonOptionsAttributes.indexOf(k) !== -1;\n      }).reduce(function (obj, k) {\n        obj[k] = changes[k].currentValue;\n        return obj;\n      }, {});\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._polygonManager.deletePolygon(this); // unsubscribe all registered observable subscriptions\n\n\n      this._subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      return this._polygonManager.getPath(this);\n    }\n  }, {\n    key: \"getPaths\",\n    value: function getPaths() {\n      return this._polygonManager.getPaths(this);\n    }\n  }]);\n\n  return AgmPolygon;\n}();\n\nAgmPolygon.ɵfac = function AgmPolygon_Factory(t) {\n  return new (t || AgmPolygon)(ɵngcc0.ɵɵdirectiveInject(PolygonManager));\n};\n\nAgmPolygon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmPolygon,\n  selectors: [[\"agm-polygon\"]],\n  inputs: {\n    clickable: \"clickable\",\n    draggable: [\"polyDraggable\", \"draggable\"],\n    editable: \"editable\",\n    geodesic: \"geodesic\",\n    paths: \"paths\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    strokeWeight: \"strokeWeight\",\n    visible: \"visible\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    polyClick: \"polyClick\",\n    polyDblClick: \"polyDblClick\",\n    polyDrag: \"polyDrag\",\n    polyDragEnd: \"polyDragEnd\",\n    polyDragStart: \"polyDragStart\",\n    polyMouseDown: \"polyMouseDown\",\n    polyMouseMove: \"polyMouseMove\",\n    polyMouseOut: \"polyMouseOut\",\n    polyMouseOver: \"polyMouseOver\",\n    polyMouseUp: \"polyMouseUp\",\n    polyRightClick: \"polyRightClick\",\n    polyPathsChange: \"polyPathsChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmPolygon._polygonOptionsAttributes = ['clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map', 'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable', 'editable', 'visible'];\n\nAgmPolygon.ctorParameters = function () {\n  return [{\n    type: PolygonManager\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmPolygon.prototype, \"clickable\", void 0);\n\n__decorate([Input('polyDraggable'), __metadata(\"design:type\", Object)], AgmPolygon.prototype, \"draggable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmPolygon.prototype, \"editable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmPolygon.prototype, \"fillColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolygon.prototype, \"fillOpacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmPolygon.prototype, \"geodesic\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Array)], AgmPolygon.prototype, \"paths\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmPolygon.prototype, \"strokeColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolygon.prototype, \"strokeOpacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolygon.prototype, \"strokeWeight\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], AgmPolygon.prototype, \"visible\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolygon.prototype, \"zIndex\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyDblClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyDrag\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyDragEnd\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyDragStart\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyMouseDown\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyMouseMove\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyMouseOut\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyMouseOver\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyMouseUp\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolygon.prototype, \"polyRightClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], AgmPolygon.prototype, \"polyPathsChange\", void 0);\n\nAgmPolygon = AgmPolygon_1 = __decorate([__metadata(\"design:paramtypes\", [PolygonManager])], AgmPolygon);\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n *\n * @export\n * @class AgmPolylineIcon\n */\n\nvar AgmPolylineIcon = /*#__PURE__*/function () {\n  function AgmPolylineIcon() {\n    _classCallCheck(this, AgmPolylineIcon);\n  }\n\n  _createClass(AgmPolylineIcon, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.path == null) {\n        throw new Error('Icon Sequence path is required');\n      }\n    }\n  }]);\n\n  return AgmPolylineIcon;\n}();\n\nAgmPolylineIcon.ɵfac = function AgmPolylineIcon_Factory(t) {\n  return new (t || AgmPolylineIcon)();\n};\n\nAgmPolylineIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmPolylineIcon,\n  selectors: [[\"agm-icon-sequence\"]],\n  inputs: {\n    fixedRotation: \"fixedRotation\",\n    offset: \"offset\",\n    repeat: \"repeat\",\n    anchorX: \"anchorX\",\n    anchorY: \"anchorY\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    path: \"path\",\n    rotation: \"rotation\",\n    scale: \"scale\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    strokeWeight: \"strokeWeight\"\n  }\n});\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], AgmPolylineIcon.prototype, \"fixedRotation\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmPolylineIcon.prototype, \"offset\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmPolylineIcon.prototype, \"repeat\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolylineIcon.prototype, \"anchorX\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolylineIcon.prototype, \"anchorY\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmPolylineIcon.prototype, \"fillColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolylineIcon.prototype, \"fillOpacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmPolylineIcon.prototype, \"path\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolylineIcon.prototype, \"rotation\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolylineIcon.prototype, \"scale\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmPolylineIcon.prototype, \"strokeColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolylineIcon.prototype, \"strokeOpacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolylineIcon.prototype, \"strokeWeight\", void 0);\n\nvar AgmPolylinePoint_1;\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\n\nvar AgmPolylinePoint = AgmPolylinePoint_1 = /*#__PURE__*/function () {\n  function AgmPolylinePoint() {\n    _classCallCheck(this, AgmPolylinePoint);\n\n    /**\n     * This event emitter gets emitted when the position of the point changed.\n     */\n    this.positionChanged = new EventEmitter();\n  }\n\n  _createClass(AgmPolylinePoint, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes['latitude'] || changes['longitude']) {\n        var position = {\n          lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n          lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude\n        };\n        this.positionChanged.emit(position);\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"getFitBoundsDetails$\",\n    value: function getFitBoundsDetails$() {\n      return this.positionChanged.pipe(startWith({\n        lat: this.latitude,\n        lng: this.longitude\n      }), map(function (position) {\n        return {\n          latLng: position\n        };\n      }));\n    }\n  }]);\n\n  return AgmPolylinePoint;\n}();\n\nAgmPolylinePoint.ɵfac = function AgmPolylinePoint_Factory(t) {\n  return new (t || AgmPolylinePoint)();\n};\n\nAgmPolylinePoint.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmPolylinePoint,\n  selectors: [[\"agm-polyline-point\"]],\n  inputs: {\n    latitude: \"latitude\",\n    longitude: \"longitude\"\n  },\n  outputs: {\n    positionChanged: \"positionChanged\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: FitBoundsAccessor,\n    useExisting: forwardRef(function () {\n      return AgmPolylinePoint_1;\n    })\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolylinePoint.prototype, \"latitude\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolylinePoint.prototype, \"longitude\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolylinePoint.prototype, \"positionChanged\", void 0);\n\nAgmPolylinePoint = AgmPolylinePoint_1 = __decorate([__metadata(\"design:paramtypes\", [])], AgmPolylinePoint);\nvar AgmPolyline_1;\nvar polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmPolyline = AgmPolyline_1 = /*#__PURE__*/function () {\n  function AgmPolyline(_polylineManager) {\n    _classCallCheck(this, AgmPolyline);\n\n    this._polylineManager = _polylineManager;\n    /**\n     * Indicates whether this Polyline handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this shape over the map. The geodesic property defines the\n     * mode of dragging. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this shape by dragging the control points shown at the\n     * vertices and on each segment. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n     * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n     * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     */\n\n    this.geodesic = false;\n    /**\n     * Whether this polyline is visible on the map. Defaults to true.\n     */\n\n    this.visible = true;\n    /**\n     * This event is fired when the DOM click event is fired on the Polyline.\n     */\n\n    this.lineClick = new EventEmitter();\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polyline.\n     */\n\n    this.lineDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the polyline.\n     */\n\n    this.lineDrag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the polyline.\n     */\n\n    this.lineDragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the polyline.\n     */\n\n    this.lineDragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polyline.\n     */\n\n    this.lineMouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polyline.\n     */\n\n    this.lineMouseMove = new EventEmitter();\n    /**\n     * This event is fired on Polyline mouseout.\n     */\n\n    this.lineMouseOut = new EventEmitter();\n    /**\n     * This event is fired on Polyline mouseover.\n     */\n\n    this.lineMouseOver = new EventEmitter();\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polyline\n     */\n\n    this.lineMouseUp = new EventEmitter();\n    /**\n     * This event is fired when the Polyline is right-clicked on.\n     */\n\n    this.lineRightClick = new EventEmitter();\n    /**\n     * This event is fired after Polyline's path changes.\n     */\n\n    this.polyPathChange = new EventEmitter();\n    this._polylineAddedToManager = false;\n    this._subscriptions = [];\n    this._id = (polylineId++).toString();\n  }\n  /** @internal */\n\n\n  _createClass(AgmPolyline, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this75 = this;\n\n      if (this.points.length) {\n        this.points.forEach(function (point) {\n          var s = point.positionChanged.subscribe(function () {\n            _this75._polylineManager.updatePolylinePoints(_this75);\n          });\n\n          _this75._subscriptions.push(s);\n        });\n      }\n\n      if (!this._polylineAddedToManager) {\n        this._init();\n      }\n\n      var pointSub = this.points.changes.subscribe(function () {\n        return _this75._polylineManager.updatePolylinePoints(_this75);\n      });\n\n      this._subscriptions.push(pointSub);\n\n      this._polylineManager.updatePolylinePoints(this);\n\n      var iconSub = this.iconSequences.changes.subscribe(function () {\n        return _this75._polylineManager.updateIconSequences(_this75);\n      });\n\n      this._subscriptions.push(iconSub);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._polylineAddedToManager) {\n        this._init();\n\n        return;\n      }\n\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmPolyline_1._polylineOptionsAttributes.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        return options[k] = changes[k].currentValue;\n      });\n\n      this._polylineManager.setPolylineOptions(this, options);\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      return this._polylineManager.getPath(this);\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      this._polylineManager.addPolyline(this);\n\n      this._polylineAddedToManager = true;\n\n      this._addEventListeners();\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this76 = this;\n\n      var handlers = [{\n        name: 'click',\n        handler: function handler(ev) {\n          return _this76.lineClick.emit(ev);\n        }\n      }, {\n        name: 'dblclick',\n        handler: function handler(ev) {\n          return _this76.lineDblClick.emit(ev);\n        }\n      }, {\n        name: 'drag',\n        handler: function handler(ev) {\n          return _this76.lineDrag.emit(ev);\n        }\n      }, {\n        name: 'dragend',\n        handler: function handler(ev) {\n          return _this76.lineDragEnd.emit(ev);\n        }\n      }, {\n        name: 'dragstart',\n        handler: function handler(ev) {\n          return _this76.lineDragStart.emit(ev);\n        }\n      }, {\n        name: 'mousedown',\n        handler: function handler(ev) {\n          return _this76.lineMouseDown.emit(ev);\n        }\n      }, {\n        name: 'mousemove',\n        handler: function handler(ev) {\n          return _this76.lineMouseMove.emit(ev);\n        }\n      }, {\n        name: 'mouseout',\n        handler: function handler(ev) {\n          return _this76.lineMouseOut.emit(ev);\n        }\n      }, {\n        name: 'mouseover',\n        handler: function handler(ev) {\n          return _this76.lineMouseOver.emit(ev);\n        }\n      }, {\n        name: 'mouseup',\n        handler: function handler(ev) {\n          return _this76.lineMouseUp.emit(ev);\n        }\n      }, {\n        name: 'rightclick',\n        handler: function handler(ev) {\n          return _this76.lineRightClick.emit(ev);\n        }\n      }];\n      handlers.forEach(function (obj) {\n        var os = _this76._polylineManager.createEventObservable(obj.name, _this76).subscribe(obj.handler);\n\n        _this76._subscriptions.push(os);\n      });\n\n      this._polylineManager.createPathEventObservable(this).then(function (ob$) {\n        var os = ob$.subscribe(function (pathEvent) {\n          return _this76.polyPathChange.emit(pathEvent);\n        });\n\n        _this76._subscriptions.push(os);\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getPoints\",\n    value: function _getPoints() {\n      if (this.points) {\n        return this.points.toArray();\n      }\n\n      return [];\n    }\n  }, {\n    key: \"_getIcons\",\n    value: function _getIcons() {\n      if (this.iconSequences) {\n        return this.iconSequences.toArray();\n      }\n\n      return [];\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._polylineManager.deletePolyline(this); // unsubscribe all registered observable subscriptions\n\n\n      this._subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  }]);\n\n  return AgmPolyline;\n}();\n\nAgmPolyline.ɵfac = function AgmPolyline_Factory(t) {\n  return new (t || AgmPolyline)(ɵngcc0.ɵɵdirectiveInject(PolylineManager));\n};\n\nAgmPolyline.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmPolyline,\n  selectors: [[\"agm-polyline\"]],\n  contentQueries: function AgmPolyline_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylinePoint, false);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylineIcon, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.points = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconSequences = _t);\n    }\n  },\n  inputs: {\n    clickable: \"clickable\",\n    draggable: [\"polylineDraggable\", \"draggable\"],\n    editable: \"editable\",\n    geodesic: \"geodesic\",\n    visible: \"visible\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    strokeWeight: \"strokeWeight\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    lineClick: \"lineClick\",\n    lineDblClick: \"lineDblClick\",\n    lineDrag: \"lineDrag\",\n    lineDragEnd: \"lineDragEnd\",\n    lineDragStart: \"lineDragStart\",\n    lineMouseDown: \"lineMouseDown\",\n    lineMouseMove: \"lineMouseMove\",\n    lineMouseOut: \"lineMouseOut\",\n    lineMouseOver: \"lineMouseOver\",\n    lineMouseUp: \"lineMouseUp\",\n    lineRightClick: \"lineRightClick\",\n    polyPathChange: \"polyPathChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmPolyline._polylineOptionsAttributes = ['draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'zIndex'];\n\nAgmPolyline.ctorParameters = function () {\n  return [{\n    type: PolylineManager\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmPolyline.prototype, \"clickable\", void 0);\n\n__decorate([Input('polylineDraggable'), __metadata(\"design:type\", Object)], AgmPolyline.prototype, \"draggable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmPolyline.prototype, \"editable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmPolyline.prototype, \"geodesic\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmPolyline.prototype, \"strokeColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolyline.prototype, \"strokeOpacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolyline.prototype, \"strokeWeight\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmPolyline.prototype, \"visible\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmPolyline.prototype, \"zIndex\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineDblClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineDrag\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineDragEnd\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineDragStart\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineMouseDown\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineMouseMove\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineMouseOut\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineMouseOver\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineMouseUp\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmPolyline.prototype, \"lineRightClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], AgmPolyline.prototype, \"polyPathChange\", void 0);\n\n__decorate([ContentChildren(AgmPolylinePoint), __metadata(\"design:type\", QueryList)], AgmPolyline.prototype, \"points\", void 0);\n\n__decorate([ContentChildren(AgmPolylineIcon), __metadata(\"design:type\", QueryList)], AgmPolyline.prototype, \"iconSequences\", void 0);\n\nAgmPolyline = AgmPolyline_1 = __decorate([__metadata(\"design:paramtypes\", [PolylineManager])], AgmPolyline);\nvar AgmRectangle_1;\n\nvar AgmRectangle = AgmRectangle_1 = /*#__PURE__*/function () {\n  function AgmRectangle(_manager) {\n    _classCallCheck(this, AgmRectangle);\n\n    this._manager = _manager;\n    /**\n     * Indicates whether this Rectangle handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this rectangle over the map. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this rectangle by dragging the control points shown at\n     * the center and around the circumference of the rectangle. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * The stroke position. Defaults to CENTER.\n     * This property is not supported on Internet Explorer 8 and earlier.\n     */\n\n    this.strokePosition = 'CENTER';\n    /**\n     * The stroke width in pixels.\n     */\n\n    this.strokeWeight = 0;\n    /**\n     * Whether this rectangle is visible on the map. Defaults to true.\n     */\n\n    this.visible = true;\n    /**\n     * This event is fired when the rectangle's is changed.\n     */\n\n    this.boundsChange = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the rectangle.\n     */\n\n    this.rectangleClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the rectangle.\n     */\n\n    this.rectangleDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the rectangle.\n     */\n\n    this.drag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the rectangle.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the rectangle.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the rectangle.\n     */\n\n    this.mouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the rectangle.\n     */\n\n    this.mouseMove = new EventEmitter();\n    /**\n     * This event is fired on rectangle mouseout.\n     */\n\n    this.mouseOut = new EventEmitter();\n    /**\n     * This event is fired on rectangle mouseover.\n     */\n\n    this.mouseOver = new EventEmitter();\n    /**\n     * This event is fired when the DOM mouseup event is fired on the rectangle.\n     */\n\n    this.mouseUp = new EventEmitter();\n    /**\n     * This event is fired when the rectangle is right-clicked on.\n     */\n\n    this.rightClick = new EventEmitter();\n    this._rectangleAddedToManager = false;\n    this._eventSubscriptions = [];\n  }\n  /** @internal */\n\n\n  _createClass(AgmRectangle, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._manager.addRectangle(this);\n\n      this._rectangleAddedToManager = true;\n\n      this._registerEventListeners();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._rectangleAddedToManager) {\n        return;\n      }\n\n      if (changes['north'] || changes['east'] || changes['south'] || changes['west']) {\n        this._manager.setBounds(this);\n      }\n\n      if (changes['editable']) {\n        this._manager.setEditable(this);\n      }\n\n      if (changes['draggable']) {\n        this._manager.setDraggable(this);\n      }\n\n      if (changes['visible']) {\n        this._manager.setVisible(this);\n      }\n\n      this._updateRectangleOptionsChanges(changes);\n    }\n  }, {\n    key: \"_updateRectangleOptionsChanges\",\n    value: function _updateRectangleOptionsChanges(changes) {\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmRectangle_1._mapOptions.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        options[k] = changes[k].currentValue;\n      });\n\n      if (optionKeys.length > 0) {\n        this._manager.setOptions(this, options);\n      }\n    }\n  }, {\n    key: \"_registerEventListeners\",\n    value: function _registerEventListeners() {\n      var _this77 = this;\n\n      var events = new Map();\n      events.set('bounds_changed', this.boundsChange);\n      events.set('click', this.rectangleClick);\n      events.set('dblclick', this.rectangleDblClick);\n      events.set('drag', this.drag);\n      events.set('dragend', this.dragEnd);\n      events.set('dragStart', this.dragStart);\n      events.set('mousedown', this.mouseDown);\n      events.set('mousemove', this.mouseMove);\n      events.set('mouseout', this.mouseOut);\n      events.set('mouseover', this.mouseOver);\n      events.set('mouseup', this.mouseUp);\n      events.set('rightclick', this.rightClick);\n      events.forEach(function (eventEmitter, eventName) {\n        _this77._eventSubscriptions.push(_this77._manager.createEventObservable(eventName, _this77).subscribe(function (value) {\n          switch (eventName) {\n            case 'bounds_changed':\n              _this77._manager.getBounds(_this77).then(function (bounds) {\n                return eventEmitter.emit({\n                  north: bounds.getNorthEast().lat(),\n                  east: bounds.getNorthEast().lng(),\n                  south: bounds.getSouthWest().lat(),\n                  west: bounds.getSouthWest().lng()\n                });\n              });\n\n              break;\n\n            default:\n              eventEmitter.emit({\n                coords: {\n                  lat: value.latLng.lat(),\n                  lng: value.latLng.lng()\n                }\n              });\n          }\n        }));\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventSubscriptions.forEach(function (s) {\n        s.unsubscribe();\n      });\n\n      this._eventSubscriptions = null;\n\n      this._manager.removeRectangle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Rectangle.\n     */\n\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return this._manager.getBounds(this);\n    }\n  }]);\n\n  return AgmRectangle;\n}();\n\nAgmRectangle.ɵfac = function AgmRectangle_Factory(t) {\n  return new (t || AgmRectangle)(ɵngcc0.ɵɵdirectiveInject(RectangleManager));\n};\n\nAgmRectangle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmRectangle,\n  selectors: [[\"agm-rectangle\"]],\n  inputs: {\n    clickable: \"clickable\",\n    draggable: [\"rectangleDraggable\", \"draggable\"],\n    editable: \"editable\",\n    strokePosition: \"strokePosition\",\n    strokeWeight: \"strokeWeight\",\n    visible: \"visible\",\n    north: \"north\",\n    east: \"east\",\n    south: \"south\",\n    west: \"west\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    boundsChange: \"boundsChange\",\n    rectangleClick: \"rectangleClick\",\n    rectangleDblClick: \"rectangleDblClick\",\n    drag: \"drag\",\n    dragEnd: \"dragEnd\",\n    dragStart: \"dragStart\",\n    mouseDown: \"mouseDown\",\n    mouseMove: \"mouseMove\",\n    mouseOut: \"mouseOut\",\n    mouseOver: \"mouseOver\",\n    mouseUp: \"mouseUp\",\n    rightClick: \"rightClick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmRectangle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\n\nAgmRectangle.ctorParameters = function () {\n  return [{\n    type: RectangleManager\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmRectangle.prototype, \"north\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmRectangle.prototype, \"east\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmRectangle.prototype, \"south\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmRectangle.prototype, \"west\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmRectangle.prototype, \"clickable\", void 0);\n\n__decorate([Input('rectangleDraggable'), __metadata(\"design:type\", Object)], AgmRectangle.prototype, \"draggable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmRectangle.prototype, \"editable\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmRectangle.prototype, \"fillColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmRectangle.prototype, \"fillOpacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmRectangle.prototype, \"strokeColor\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmRectangle.prototype, \"strokeOpacity\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], AgmRectangle.prototype, \"strokePosition\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmRectangle.prototype, \"strokeWeight\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmRectangle.prototype, \"visible\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], AgmRectangle.prototype, \"zIndex\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"boundsChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"rectangleClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"rectangleDblClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"drag\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"dragEnd\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"dragStart\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"mouseDown\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"mouseMove\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"mouseOut\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"mouseOver\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"mouseUp\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], AgmRectangle.prototype, \"rightClick\", void 0);\n\nAgmRectangle = AgmRectangle_1 = __decorate([__metadata(\"design:paramtypes\", [RectangleManager])], AgmRectangle);\nvar layerId$3 = 0;\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\n\nvar AgmTransitLayer = /*#__PURE__*/function () {\n  function AgmTransitLayer(_manager) {\n    _classCallCheck(this, AgmTransitLayer);\n\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId$3++).toString();\n    /**\n     * Hide/show transit layer\n     */\n\n    this.visible = true;\n  }\n\n  _createClass(AgmTransitLayer, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._addedToManager) {\n        return;\n      }\n\n      this._manager.addTransitLayer(this, {\n        visible: this.visible\n      });\n\n      this._addedToManager = true;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._addedToManager) {\n        return;\n      }\n\n      if (changes['visible'] != null) {\n        this._manager.toggleLayerVisibility(this, {\n          visible: changes['visible'].currentValue\n        });\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AgmTransitLayer-\".concat(this._id.toString());\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._manager.deleteLayer(this);\n    }\n  }]);\n\n  return AgmTransitLayer;\n}();\n\nAgmTransitLayer.ɵfac = function AgmTransitLayer_Factory(t) {\n  return new (t || AgmTransitLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager));\n};\n\nAgmTransitLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmTransitLayer,\n  selectors: [[\"agm-transit-layer\"]],\n  inputs: {\n    visible: \"visible\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nAgmTransitLayer.ctorParameters = function () {\n  return [{\n    type: LayerManager\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], AgmTransitLayer.prototype, \"visible\", void 0);\n\nAgmTransitLayer = __decorate([__metadata(\"design:paramtypes\", [LayerManager])], AgmTransitLayer);\nvar google$1;\nvar SymbolPath;\n\n(function (SymbolPath) {\n  SymbolPath[SymbolPath[\"BACKWARD_CLOSED_ARROW\"] = 3] = \"BACKWARD_CLOSED_ARROW\";\n  SymbolPath[SymbolPath[\"BACKWARD_OPEN_ARROW\"] = 4] = \"BACKWARD_OPEN_ARROW\";\n  SymbolPath[SymbolPath[\"CIRCLE\"] = 0] = \"CIRCLE\";\n  SymbolPath[SymbolPath[\"FORWARD_CLOSED_ARROW\"] = 1] = \"FORWARD_CLOSED_ARROW\";\n  SymbolPath[SymbolPath[\"FORWARD_OPEN_ARROW\"] = 2] = \"FORWARD_OPEN_ARROW\";\n})(SymbolPath || (SymbolPath = {}));\n/**\n * Identifiers used to specify the placement of controls on the map. Controls are\n * positioned relative to other controls in the same layout position. Controls that\n * are added first are positioned closer to the edge of the map.\n */\n\n\nvar ControlPosition;\n\n(function (ControlPosition) {\n  ControlPosition[ControlPosition[\"RIGHT_BOTTOM\"] = 0] = \"RIGHT_BOTTOM\";\n  ControlPosition[ControlPosition[\"TOP_LEFT\"] = 1] = \"TOP_LEFT\";\n  ControlPosition[ControlPosition[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\n  ControlPosition[ControlPosition[\"TOP_RIGHT\"] = 3] = \"TOP_RIGHT\";\n  ControlPosition[ControlPosition[\"LEFT_CENTER\"] = 4] = \"LEFT_CENTER\";\n  ControlPosition[ControlPosition[\"LEFT_TOP\"] = 5] = \"LEFT_TOP\";\n  ControlPosition[ControlPosition[\"LEFT_BOTTOM\"] = 6] = \"LEFT_BOTTOM\";\n  ControlPosition[ControlPosition[\"RIGHT_TOP\"] = 7] = \"RIGHT_TOP\";\n  ControlPosition[ControlPosition[\"RIGHT_CENTER\"] = 8] = \"RIGHT_CENTER\";\n  ControlPosition[ControlPosition[\"BOTTOM_RIGHT\"] = 9] = \"BOTTOM_RIGHT\";\n  ControlPosition[ControlPosition[\"BOTTOM_LEFT\"] = 10] = \"BOTTOM_LEFT\";\n  ControlPosition[ControlPosition[\"BOTTOM_CENTER\"] = 11] = \"BOTTOM_CENTER\";\n})(ControlPosition || (ControlPosition = {}));\n\nvar MapTypeId;\n\n(function (MapTypeId) {\n  /** This map type displays a transparent layer of major streets on satellite images. */\n  MapTypeId[MapTypeId[\"HYBRID\"] = 0] = \"HYBRID\";\n  /** This map type displays a normal street map. */\n\n  MapTypeId[MapTypeId[\"ROADMAP\"] = 1] = \"ROADMAP\";\n  /** This map type displays satellite images. */\n\n  MapTypeId[MapTypeId[\"SATELLITE\"] = 2] = \"SATELLITE\";\n  /** This map type displays maps with physical features such as terrain and vegetation. */\n\n  MapTypeId[MapTypeId[\"TERRAIN\"] = 3] = \"TERRAIN\";\n})(MapTypeId || (MapTypeId = {}));\n\nvar MapTypeControlStyle;\n\n(function (MapTypeControlStyle) {\n  MapTypeControlStyle[MapTypeControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  MapTypeControlStyle[MapTypeControlStyle[\"DROPDOWN_MENU\"] = 2] = \"DROPDOWN_MENU\";\n  MapTypeControlStyle[MapTypeControlStyle[\"HORIZONTAL_BAR\"] = 1] = \"HORIZONTAL_BAR\";\n})(MapTypeControlStyle || (MapTypeControlStyle = {}));\n\nvar ScaleControlStyle;\n\n(function (ScaleControlStyle) {\n  ScaleControlStyle[ScaleControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(ScaleControlStyle || (ScaleControlStyle = {}));\n\nvar ZoomControlStyle;\n\n(function (ZoomControlStyle) {\n  ZoomControlStyle[ZoomControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  ZoomControlStyle[ZoomControlStyle[\"LARGE\"] = 1] = \"LARGE\";\n  ZoomControlStyle[ZoomControlStyle[\"SMALL\"] = 2] = \"SMALL\";\n})(ZoomControlStyle || (ZoomControlStyle = {}));\n\nvar GeocoderLocationType;\n\n(function (GeocoderLocationType) {\n  GeocoderLocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\n  GeocoderLocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\n  GeocoderLocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\n  GeocoderLocationType[\"ROOFTOP\"] = \"ROOFTOP\";\n})(GeocoderLocationType || (GeocoderLocationType = {}));\n\nvar GeocoderStatus;\n\n(function (GeocoderStatus) {\n  GeocoderStatus[\"ERROR\"] = \"ERROR\";\n  GeocoderStatus[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\n  GeocoderStatus[\"OK\"] = \"OK\";\n  GeocoderStatus[\"OVER_QUERY_LIMIT\"] = \"OVER_QUERY_LIMIT\";\n  GeocoderStatus[\"REQUEST_DENIED\"] = \"REQUEST_DENIED\";\n  GeocoderStatus[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  GeocoderStatus[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\n})(GeocoderStatus || (GeocoderStatus = {}));\n\nvar AgmGeocoder = /*#__PURE__*/function () {\n  function AgmGeocoder(loader) {\n    var _this78 = this;\n\n    _classCallCheck(this, AgmGeocoder);\n\n    var connectableGeocoder$ = new Observable(function (subscriber) {\n      loader.load().then(function () {\n        return subscriber.next();\n      });\n    }).pipe(map(function () {\n      return _this78._createGeocoder();\n    }), multicast(new ReplaySubject(1)));\n    connectableGeocoder$.connect(); // ignore the subscription\n    // since we will remain subscribed till application exits\n\n    this.geocoder$ = connectableGeocoder$;\n  }\n\n  _createClass(AgmGeocoder, [{\n    key: \"geocode\",\n    value: function geocode(request) {\n      var _this79 = this;\n\n      return this.geocoder$.pipe(switchMap(function (geocoder) {\n        return _this79._getGoogleResults(geocoder, request);\n      }));\n    }\n  }, {\n    key: \"_getGoogleResults\",\n    value: function _getGoogleResults(geocoder, request) {\n      var geocodeObservable = bindCallback(geocoder.geocode);\n      return geocodeObservable(request).pipe(switchMap(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n            results = _ref7[0],\n            status = _ref7[1];\n\n        if (status === GeocoderStatus.OK) {\n          return of(results);\n        }\n\n        return throwError(status);\n      }));\n    }\n  }, {\n    key: \"_createGeocoder\",\n    value: function _createGeocoder() {\n      return new google.maps.Geocoder();\n    }\n  }]);\n\n  return AgmGeocoder;\n}();\n\nAgmGeocoder.ɵfac = function AgmGeocoder_Factory(t) {\n  return new (t || AgmGeocoder)(ɵngcc0.ɵɵinject(MapsAPILoader));\n};\n\nAgmGeocoder.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: AgmGeocoder,\n  factory: function factory(t) {\n    return AgmGeocoder.ɵfac(t);\n  },\n  providedIn: 'root'\n});\n\nAgmGeocoder.ctorParameters = function () {\n  return [{\n    type: MapsAPILoader\n  }];\n};\n\nAgmGeocoder.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function AgmGeocoder_Factory() {\n    return new AgmGeocoder(ɵɵinject(MapsAPILoader));\n  },\n  token: AgmGeocoder,\n  providedIn: \"root\"\n});\nAgmGeocoder = __decorate([__metadata(\"design:paramtypes\", [MapsAPILoader])], AgmGeocoder);\n\nvar WindowRef = /*#__PURE__*/function () {\n  function WindowRef() {\n    _classCallCheck(this, WindowRef);\n  }\n\n  _createClass(WindowRef, [{\n    key: \"getNativeWindow\",\n    value: function getNativeWindow() {\n      return window;\n    }\n  }]);\n\n  return WindowRef;\n}();\n\nvar DocumentRef = /*#__PURE__*/function () {\n  function DocumentRef() {\n    _classCallCheck(this, DocumentRef);\n  }\n\n  _createClass(DocumentRef, [{\n    key: \"getNativeDocument\",\n    value: function getNativeDocument() {\n      return document;\n    }\n  }]);\n\n  return DocumentRef;\n}();\n\nvar BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\nvar GoogleMapsScriptProtocol;\n\n(function (GoogleMapsScriptProtocol) {\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n})(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\n\n\nvar LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\n\nvar LazyMapsAPILoader = /*#__PURE__*/function (_MapsAPILoader) {\n  _inherits(LazyMapsAPILoader, _MapsAPILoader);\n\n  var _super = _createSuper(LazyMapsAPILoader);\n\n  function LazyMapsAPILoader() {\n    var _this80;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var w = arguments.length > 1 ? arguments[1] : undefined;\n    var d = arguments.length > 2 ? arguments[2] : undefined;\n    var localeId = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, LazyMapsAPILoader);\n\n    _this80 = _super.call(this);\n    _this80.localeId = localeId;\n    _this80._SCRIPT_ID = 'agmGoogleMapsApiScript';\n    _this80.callbackName = \"agmLazyMapsAPILoader\";\n    _this80._config = config || {};\n    _this80._windowRef = w;\n    _this80._documentRef = d;\n    return _this80;\n  }\n\n  _createClass(LazyMapsAPILoader, [{\n    key: \"load\",\n    value: function load() {\n      var window = this._windowRef.getNativeWindow();\n\n      if (window.google && window.google.maps) {\n        // Google maps already loaded on the page.\n        return Promise.resolve();\n      }\n\n      if (this._scriptLoadingPromise) {\n        return this._scriptLoadingPromise;\n      } // this can happen in HMR situations or Stackblitz.io editors.\n\n\n      var scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n\n      if (scriptOnPage) {\n        this._assignScriptLoadingPromise(scriptOnPage);\n\n        return this._scriptLoadingPromise;\n      }\n\n      var script = this._documentRef.getNativeDocument().createElement('script');\n\n      script.type = 'text/javascript';\n      script.async = true;\n      script.defer = true;\n      script.id = this._SCRIPT_ID;\n      script.src = this._getScriptSrc(this.callbackName);\n\n      this._assignScriptLoadingPromise(script);\n\n      this._documentRef.getNativeDocument().body.appendChild(script);\n\n      return this._scriptLoadingPromise;\n    }\n  }, {\n    key: \"_assignScriptLoadingPromise\",\n    value: function _assignScriptLoadingPromise(scriptElem) {\n      var _this81 = this;\n\n      this._scriptLoadingPromise = new Promise(function (resolve, reject) {\n        _this81._windowRef.getNativeWindow()[_this81.callbackName] = function () {\n          resolve();\n        };\n\n        scriptElem.onerror = function (error) {\n          reject(error);\n        };\n      });\n    }\n  }, {\n    key: \"_getScriptSrc\",\n    value: function _getScriptSrc(callbackName) {\n      var protocolType = this._config && this._config.protocol || GoogleMapsScriptProtocol.HTTPS;\n      var protocol;\n\n      switch (protocolType) {\n        case GoogleMapsScriptProtocol.AUTO:\n          protocol = '';\n          break;\n\n        case GoogleMapsScriptProtocol.HTTP:\n          protocol = 'http:';\n          break;\n\n        case GoogleMapsScriptProtocol.HTTPS:\n          protocol = 'https:';\n          break;\n      }\n\n      var hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n      var queryParams = {\n        v: this._config.apiVersion || 'quarterly',\n        callback: callbackName,\n        key: this._config.apiKey,\n        client: this._config.clientId,\n        channel: this._config.channel,\n        libraries: this._config.libraries,\n        region: this._config.region,\n        language: this._config.language || this.localeId !== 'en-US' ? this.localeId : null\n      };\n      var params = Object.keys(queryParams).filter(function (k) {\n        return queryParams[k] != null;\n      }).filter(function (k) {\n        // remove empty arrays\n        return !Array.isArray(queryParams[k]) || Array.isArray(queryParams[k]) && queryParams[k].length > 0;\n      }).map(function (k) {\n        // join arrays as comma seperated strings\n        var i = queryParams[k];\n\n        if (Array.isArray(i)) {\n          return {\n            key: k,\n            value: i.join(',')\n          };\n        }\n\n        return {\n          key: k,\n          value: queryParams[k]\n        };\n      }).map(function (entry) {\n        return \"\".concat(entry.key, \"=\").concat(entry.value);\n      }).join('&');\n      return \"\".concat(protocol, \"//\").concat(hostAndPath, \"?\").concat(params);\n    }\n  }]);\n\n  return LazyMapsAPILoader;\n}(MapsAPILoader);\n\nLazyMapsAPILoader.ɵfac = function LazyMapsAPILoader_Factory(t) {\n  return new (t || LazyMapsAPILoader)(ɵngcc0.ɵɵinject(LAZY_MAPS_API_CONFIG, 8), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject(DocumentRef), ɵngcc0.ɵɵinject(LOCALE_ID));\n};\n\nLazyMapsAPILoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: LazyMapsAPILoader,\n  factory: function factory(t) {\n    return LazyMapsAPILoader.ɵfac(t);\n  }\n});\n\nLazyMapsAPILoader.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LAZY_MAPS_API_CONFIG]\n    }]\n  }, {\n    type: WindowRef\n  }, {\n    type: DocumentRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [LOCALE_ID]\n    }]\n  }];\n};\n\nLazyMapsAPILoader = __decorate([__param(0, Optional()), __param(0, Inject(LAZY_MAPS_API_CONFIG)), __param(3, Inject(LOCALE_ID)), __metadata(\"design:paramtypes\", [Object, WindowRef, DocumentRef, String])], LazyMapsAPILoader);\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\n\nvar NoOpMapsAPILoader = /*#__PURE__*/function () {\n  function NoOpMapsAPILoader() {\n    _classCallCheck(this, NoOpMapsAPILoader);\n  }\n\n  _createClass(NoOpMapsAPILoader, [{\n    key: \"load\",\n    value: function load() {\n      if (!window.google || !window.google.maps) {\n        throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n      }\n\n      return Promise.resolve();\n    }\n  }]);\n\n  return NoOpMapsAPILoader;\n}(); // exported map types\n\n\nvar AgmCoreModule_1;\n/**\n * @internal\n */\n\nfunction coreDirectives() {\n  return [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer];\n}\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\n\n\nvar AgmCoreModule = AgmCoreModule_1 = /*#__PURE__*/function () {\n  function AgmCoreModule() {\n    _classCallCheck(this, AgmCoreModule);\n  }\n\n  _createClass(AgmCoreModule, null, [{\n    key: \"forRoot\",\n\n    /**\n     * Please use this method when you register the module at the root level.\n     */\n    value: function forRoot(lazyMapsAPILoaderConfig) {\n      return {\n        ngModule: AgmCoreModule_1,\n        providers: [].concat(BROWSER_GLOBALS_PROVIDERS, [{\n          provide: MapsAPILoader,\n          useClass: LazyMapsAPILoader\n        }, {\n          provide: LAZY_MAPS_API_CONFIG,\n          useValue: lazyMapsAPILoaderConfig\n        }])\n      };\n    }\n  }]);\n\n  return AgmCoreModule;\n}();\n\nAgmCoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AgmCoreModule\n});\nAgmCoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AgmCoreModule_Factory(t) {\n    return new (t || AgmCoreModule)();\n  }\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MapsAPILoader, [{\n    type: Injectable\n  }], null, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GoogleMapsAPIWrapper, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MapsAPILoader\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LayerManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmBicyclingLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-bicycling-layer'\n    }]\n  }], function () {\n    return [{\n      type: LayerManager\n    }];\n  }, {\n    visible: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CircleManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmCircle, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-circle'\n    }]\n  }], function () {\n    return [{\n      type: CircleManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['circleDraggable']\n    }],\n    editable: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    strokePosition: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    centerChange: [{\n      type: Output\n    }],\n    circleClick: [{\n      type: Output\n    }],\n    circleDblClick: [{\n      type: Output\n    }],\n    drag: [{\n      type: Output\n    }],\n    dragEnd: [{\n      type: Output\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    mouseDown: [{\n      type: Output\n    }],\n    mouseMove: [{\n      type: Output\n    }],\n    mouseOut: [{\n      type: Output\n    }],\n    mouseOver: [{\n      type: Output\n    }],\n    mouseUp: [{\n      type: Output\n    }],\n    radiusChange: [{\n      type: Output\n    }],\n    rightClick: [{\n      type: Output\n    }],\n    latitude: [{\n      type: Input\n    }],\n    longitude: [{\n      type: Input\n    }],\n    fillColor: [{\n      type: Input\n    }],\n    fillOpacity: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DataLayerManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmDataLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-data-layer'\n    }]\n  }], function () {\n    return [{\n      type: DataLayerManager\n    }];\n  }, {\n    layerClick: [{\n      type: Output\n    }],\n    geoJson: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FitBoundsService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MapsAPILoader\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmFitBounds, [{\n    type: Directive,\n    args: [{\n      selector: '[agmFitBounds]'\n    }]\n  }], function () {\n    return [{\n      type: FitBoundsAccessor,\n      decorators: [{\n        type: Self\n      }]\n    }, {\n      type: FitBoundsService\n    }];\n  }, {\n    agmFitBounds: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MarkerManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(InfoWindowManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: MarkerManager\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmInfoWindow, [{\n    type: Component,\n    args: [{\n      selector: 'agm-info-window',\n      template: \"<div class='agm-info-window-content'>\\n      <ng-content></ng-content>\\n    </div>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: InfoWindowManager\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    isOpen: [{\n      type: Input\n    }],\n    infoWindowClose: [{\n      type: Output\n    }],\n    latitude: [{\n      type: Input\n    }],\n    longitude: [{\n      type: Input\n    }],\n    disableAutoPan: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    maxWidth: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(KmlLayerManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmKmlLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-kml-layer'\n    }]\n  }], function () {\n    return [{\n      type: KmlLayerManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    preserveViewport: [{\n      type: Input\n    }],\n    screenOverlays: [{\n      type: Input\n    }],\n    suppressInfoWindows: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    layerClick: [{\n      type: Output\n    }],\n    defaultViewportChange: [{\n      type: Output\n    }],\n    statusChange: [{\n      type: Output\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PolygonManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PolylineManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RectangleManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmMap, [{\n    type: Component,\n    args: [{\n      selector: 'agm-map',\n      providers: [CircleManager, DataLayerManager, DataLayerManager, FitBoundsService, GoogleMapsAPIWrapper, InfoWindowManager, KmlLayerManager, LayerManager, MarkerManager, PolygonManager, PolylineManager, RectangleManager],\n      host: {\n        // todo: deprecated - we will remove it with the next version\n        '[class.sebm-google-map-container]': 'true'\n      },\n      template: \"\\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\\n              <div class='agm-map-content'>\\n                <ng-content></ng-content>\\n              </div>\\n  \",\n      styles: [\"\\n    .agm-map-container-inner {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content {\\n      display:none;\\n    }\\n  \"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: FitBoundsService\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    longitude: [{\n      type: Input\n    }],\n    latitude: [{\n      type: Input\n    }],\n    zoom: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['mapDraggable']\n    }],\n    disableDoubleClickZoom: [{\n      type: Input\n    }],\n    disableDefaultUI: [{\n      type: Input\n    }],\n    scrollwheel: [{\n      type: Input\n    }],\n    keyboardShortcuts: [{\n      type: Input\n    }],\n    styles: [{\n      type: Input\n    }],\n    usePanning: [{\n      type: Input\n    }],\n    fitBounds: [{\n      type: Input\n    }],\n    scaleControl: [{\n      type: Input\n    }],\n    mapTypeControl: [{\n      type: Input\n    }],\n    panControl: [{\n      type: Input\n    }],\n    rotateControl: [{\n      type: Input\n    }],\n    fullscreenControl: [{\n      type: Input\n    }],\n    mapTypeId: [{\n      type: Input\n    }],\n    clickableIcons: [{\n      type: Input\n    }],\n    showDefaultInfoWindow: [{\n      type: Input\n    }],\n    gestureHandling: [{\n      type: Input\n    }],\n    tilt: [{\n      type: Input\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    mapRightClick: [{\n      type: Output\n    }],\n    mapDblClick: [{\n      type: Output\n    }],\n    centerChange: [{\n      type: Output\n    }],\n    boundsChange: [{\n      type: Output\n    }],\n    mapTypeIdChange: [{\n      type: Output\n    }],\n    idle: [{\n      type: Output\n    }],\n    zoomChange: [{\n      type: Output\n    }],\n    mapReady: [{\n      type: Output\n    }],\n    tilesLoaded: [{\n      type: Output\n    }],\n    minZoom: [{\n      type: Input\n    }],\n    maxZoom: [{\n      type: Input\n    }],\n    controlSize: [{\n      type: Input\n    }],\n    backgroundColor: [{\n      type: Input\n    }],\n    draggableCursor: [{\n      type: Input\n    }],\n    draggingCursor: [{\n      type: Input\n    }],\n    zoomControl: [{\n      type: Input\n    }],\n    zoomControlOptions: [{\n      type: Input\n    }],\n    streetViewControl: [{\n      type: Input\n    }],\n    streetViewControlOptions: [{\n      type: Input\n    }],\n    fitBoundsPadding: [{\n      type: Input\n    }],\n    scaleControlOptions: [{\n      type: Input\n    }],\n    mapTypeControlOptions: [{\n      type: Input\n    }],\n    panControlOptions: [{\n      type: Input\n    }],\n    rotateControlOptions: [{\n      type: Input\n    }],\n    fullscreenControlOptions: [{\n      type: Input\n    }],\n    restriction: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmMarker, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-marker',\n      providers: [{\n        provide: FitBoundsAccessor,\n        useExisting: forwardRef(function () {\n          return AgmMarker_1;\n        })\n      }],\n      inputs: ['latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl', 'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation'],\n      outputs: ['markerClick', 'dragStart', 'drag', 'dragEnd', 'mouseOver', 'mouseOut']\n    }]\n  }], function () {\n    return [{\n      type: MarkerManager\n    }];\n  }, {\n    draggable: [{\n      type: Input,\n      args: ['markerDraggable']\n    }],\n    visible: [{\n      type: Input\n    }],\n    openInfoWindow: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    clickable: [{\n      type: Input,\n      args: ['markerClickable']\n    }],\n    animationChange: [{\n      type: Output\n    }],\n    markerClick: [{\n      type: Output\n    }],\n    markerDblClick: [{\n      type: Output\n    }],\n    markerRightClick: [{\n      type: Output\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    drag: [{\n      type: Output\n    }],\n    dragEnd: [{\n      type: Output\n    }],\n    mouseOver: [{\n      type: Output\n    }],\n    mouseOut: [{\n      type: Output\n    }],\n    infoWindow: [{\n      type: ContentChildren,\n      args: [AgmInfoWindow]\n    }],\n    latitude: [{\n      type: Input\n    }],\n    longitude: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    iconUrl: [{\n      type: Input\n    }],\n    animation: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmPolygon, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-polygon'\n    }]\n  }], function () {\n    return [{\n      type: PolygonManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['polyDraggable']\n    }],\n    editable: [{\n      type: Input\n    }],\n    geodesic: [{\n      type: Input\n    }],\n    paths: [{\n      type: Input\n    }],\n    polyClick: [{\n      type: Output\n    }],\n    polyDblClick: [{\n      type: Output\n    }],\n    polyDrag: [{\n      type: Output\n    }],\n    polyDragEnd: [{\n      type: Output\n    }],\n    polyDragStart: [{\n      type: Output\n    }],\n    polyMouseDown: [{\n      type: Output\n    }],\n    polyMouseMove: [{\n      type: Output\n    }],\n    polyMouseOut: [{\n      type: Output\n    }],\n    polyMouseOver: [{\n      type: Output\n    }],\n    polyMouseUp: [{\n      type: Output\n    }],\n    polyRightClick: [{\n      type: Output\n    }],\n    polyPathsChange: [{\n      type: Output\n    }],\n    fillColor: [{\n      type: Input\n    }],\n    fillOpacity: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmPolylineIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-polyline agm-icon-sequence'\n    }]\n  }], null, {\n    fixedRotation: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    repeat: [{\n      type: Input\n    }],\n    anchorX: [{\n      type: Input\n    }],\n    anchorY: [{\n      type: Input\n    }],\n    fillColor: [{\n      type: Input\n    }],\n    fillOpacity: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    rotation: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmPolylinePoint, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-polyline-point',\n      providers: [{\n        provide: FitBoundsAccessor,\n        useExisting: forwardRef(function () {\n          return AgmPolylinePoint_1;\n        })\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    positionChanged: [{\n      type: Output\n    }],\n    latitude: [{\n      type: Input\n    }],\n    longitude: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmPolyline, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-polyline'\n    }]\n  }], function () {\n    return [{\n      type: PolylineManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['polylineDraggable']\n    }],\n    editable: [{\n      type: Input\n    }],\n    geodesic: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    lineClick: [{\n      type: Output\n    }],\n    lineDblClick: [{\n      type: Output\n    }],\n    lineDrag: [{\n      type: Output\n    }],\n    lineDragEnd: [{\n      type: Output\n    }],\n    lineDragStart: [{\n      type: Output\n    }],\n    lineMouseDown: [{\n      type: Output\n    }],\n    lineMouseMove: [{\n      type: Output\n    }],\n    lineMouseOut: [{\n      type: Output\n    }],\n    lineMouseOver: [{\n      type: Output\n    }],\n    lineMouseUp: [{\n      type: Output\n    }],\n    lineRightClick: [{\n      type: Output\n    }],\n    polyPathChange: [{\n      type: Output\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    points: [{\n      type: ContentChildren,\n      args: [AgmPolylinePoint]\n    }],\n    iconSequences: [{\n      type: ContentChildren,\n      args: [AgmPolylineIcon]\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmRectangle, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-rectangle'\n    }]\n  }], function () {\n    return [{\n      type: RectangleManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['rectangleDraggable']\n    }],\n    editable: [{\n      type: Input\n    }],\n    strokePosition: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    boundsChange: [{\n      type: Output\n    }],\n    rectangleClick: [{\n      type: Output\n    }],\n    rectangleDblClick: [{\n      type: Output\n    }],\n    drag: [{\n      type: Output\n    }],\n    dragEnd: [{\n      type: Output\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    mouseDown: [{\n      type: Output\n    }],\n    mouseMove: [{\n      type: Output\n    }],\n    mouseOut: [{\n      type: Output\n    }],\n    mouseOver: [{\n      type: Output\n    }],\n    mouseUp: [{\n      type: Output\n    }],\n    rightClick: [{\n      type: Output\n    }],\n    north: [{\n      type: Input\n    }],\n    east: [{\n      type: Input\n    }],\n    south: [{\n      type: Input\n    }],\n    west: [{\n      type: Input\n    }],\n    fillColor: [{\n      type: Input\n    }],\n    fillOpacity: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmTransitLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-transit-layer'\n    }]\n  }], function () {\n    return [{\n      type: LayerManager\n    }];\n  }, {\n    visible: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmGeocoder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MapsAPILoader\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LazyMapsAPILoader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LAZY_MAPS_API_CONFIG]\n      }]\n    }, {\n      type: WindowRef\n    }, {\n      type: DocumentRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgmCoreModule, {\n    declarations: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer],\n    exports: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmCoreModule, [{\n    type: NgModule,\n    args: [{\n      declarations: coreDirectives(),\n      exports: coreDirectives()\n    }]\n  }], null, null);\n})(); // main modules\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer, CircleManager, ControlPosition, DataLayerManager, FitBoundsAccessor, GeocoderLocationType, GeocoderStatus, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapTypeId, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, ScaleControlStyle, ZoomControlStyle, FitBoundsService as ɵa, coreDirectives as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe };","map":{"version":3,"sources":["@agm/core/services/maps-api-loader/maps-api-loader.ts","@agm/core/services/google-maps-api-wrapper.ts","@agm/core/services/managers/layer-manager.ts","@agm/core/directives/bicycling-layer.ts","@agm/core/services/managers/circle-manager.ts","@agm/core/directives/circle.ts","@agm/core/services/managers/data-layer-manager.ts","@agm/core/directives/data-layer.ts","@agm/core/services/fit-bounds.ts","@agm/core/directives/fit-bounds.ts","@agm/core/services/managers/marker-manager.ts","@agm/core/services/managers/info-window-manager.ts","@agm/core/directives/info-window.ts","@agm/core/services/managers/kml-layer-manager.ts","@agm/core/directives/kml-layer.ts","@agm/core/utils/mvcarray-utils.ts","@agm/core/services/managers/polygon-manager.ts","@agm/core/services/managers/polyline-manager.ts","@agm/core/services/managers/rectangle-manager.ts","@agm/core/directives/map.ts","@agm/core/directives/marker.ts","@agm/core/directives/polygon.ts","@agm/core/directives/polyline-icon.ts","@agm/core/directives/polyline-point.ts","@agm/core/directives/polyline.ts","@agm/core/directives/rectangle.ts","@agm/core/directives/transit-layer.ts","@agm/core/services/google-maps-types.ts","@agm/core/services/geocoder-service.ts","@agm/core/utils/browser-globals.ts","@agm/core/services/maps-api-loader/lazy-maps-api-loader.ts","@agm/core/services/maps-api-loader/noop-maps-api-loader.ts","@agm/core/map-types.ts","@agm/core/core.module.ts","@agm/core/index.ts","@agm/core/agm-core.ts"],"names":["tslib_1.__decorate","layerId","tslib_1.__param","google"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport abstract class MapsAPILoader {\n  abstract load(): Promise<void>;\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport * as mapTypes from './google-maps-types';\nimport { Polyline, PolylineOptions } from './google-maps-types';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n\n// todo: add types for this\ndeclare var google: any;\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n@Injectable()\nexport class GoogleMapsAPIWrapper {\n  private _map: Promise<mapTypes.GoogleMap>;\n  private _mapResolver: (value?: mapTypes.GoogleMap) => void;\n\n  constructor(private _loader: MapsAPILoader, private _zone: NgZone) {\n    this._map =\n        new Promise<mapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\n  }\n\n  createMap(el: HTMLElement, mapOptions: mapTypes.MapOptions): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._loader.load().then(() => {\n        const map = new google.maps.Map(el, mapOptions);\n        this._mapResolver(map as mapTypes.GoogleMap);\n        return;\n      });\n    });\n  }\n\n  setMapOptions(options: mapTypes.MapOptions) {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then((m: mapTypes.GoogleMap) => { m.setOptions(options); });\n    });\n  }\n\n  /**\n   * Creates a google map marker with the map context\n   */\n  createMarker(options: mapTypes.MarkerOptions = {} as mapTypes.MarkerOptions, addToMap: boolean = true):\n      Promise<mapTypes.Marker> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        if (addToMap) {\n          options.map = map;\n        }\n        return new google.maps.Marker(options);\n      });\n    });\n  }\n\n  createInfoWindow(options?: mapTypes.InfoWindowOptions): Promise<mapTypes.InfoWindow> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(() => { return new google.maps.InfoWindow(options); });\n    });\n  }\n\n  /**\n   * Creates a google.map.Circle for the current map.\n   */\n  createCircle(options: mapTypes.CircleOptions): Promise<mapTypes.Circle> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        if (typeof options.strokePosition === 'string') {\n          options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n        }\n        options.map = map;\n        return new google.maps.Circle(options);\n      });\n    });\n  }\n\n  /**\n   * Creates a google.map.Rectangle for the current map.\n   */\n  createRectangle(options: mapTypes.RectangleOptions): Promise<mapTypes.Rectangle> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        options.map = map;\n        return new google.maps.Rectangle(options);\n      });\n    });\n  }\n\n  createPolyline(options: PolylineOptions): Promise<Polyline> {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then((map: mapTypes.GoogleMap) => {\n        let line = new google.maps.Polyline(options);\n        line.setMap(map);\n        return line;\n      });\n    });\n  }\n\n  createPolygon(options: mapTypes.PolygonOptions): Promise<mapTypes.Polygon> {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then((map: mapTypes.GoogleMap) => {\n        let polygon = new google.maps.Polygon(options);\n        polygon.setMap(map);\n        return polygon;\n      });\n    });\n  }\n\n  /**\n   * Creates a new google.map.Data layer for the current map\n   */\n  createDataLayer(options?: mapTypes.DataOptions): Promise<mapTypes.Data> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(m => {\n        let data = new google.maps.Data(options);\n        data.setMap(m);\n        return data;\n      });\n    });\n  }\n\n  /**\n   * Creates a TransitLayer instance for a map\n   * @param {TransitLayerOptions} options - used for setting layer options\n   * @returns {Promise<TransitLayer>} a new transit layer object\n   */\n  createTransitLayer(options: mapTypes.TransitLayerOptions): Promise<mapTypes.TransitLayer>{\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        let newLayer: mapTypes.TransitLayer = new google.maps.TransitLayer();\n        newLayer.setMap(options.visible ? map : null);\n        return newLayer;\n      });\n    });\n  }\n\n  /**\n   * Creates a BicyclingLayer instance for a map\n   * @param {BicyclingLayerOptions} options - used for setting layer options\n   * @returns {Promise<BicyclingLayer>} a new bicycling layer object\n   */\n  createBicyclingLayer(options: mapTypes.BicyclingLayerOptions): Promise<mapTypes.BicyclingLayer>{\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        let newLayer: mapTypes.BicyclingLayer = new google.maps.BicyclingLayer();\n        newLayer.setMap(options.visible ? map : null);\n        return newLayer;\n      });\n    });\n  }\n\n  /**\n   * Determines if given coordinates are insite a Polygon path.\n   */\n  containsLocation(latLng: mapTypes.LatLngLiteral, polygon: mapTypes.Polygon): Promise<boolean> {\n    return google.maps.geometry.poly.containsLocation(latLng, polygon);\n  }\n\n  subscribeToMapEvent<E>(eventName: string): Observable<E> {\n    return new Observable((observer: Observer<E>) => {\n      this._map.then((m: mapTypes.GoogleMap) => {\n        m.addListener(eventName, (arg: E) => { this._zone.run(() => observer.next(arg)); });\n      });\n    });\n  }\n\n  clearInstanceListeners() {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then((map: mapTypes.GoogleMap) => {\n        google.maps.event.clearInstanceListeners(map);\n      });\n    });\n  }\n\n  setCenter(latLng: mapTypes.LatLngLiteral): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.setCenter(latLng));\n    });\n  }\n\n  getZoom(): Promise<number> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getZoom());\n    });\n  }\n\n  getBounds(): Promise<mapTypes.LatLngBounds> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getBounds());\n    });\n  }\n\n  getMapTypeId(): Promise<mapTypes.MapTypeId> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getMapTypeId());\n    });\n  }\n\n  setZoom(zoom: number): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.setZoom(zoom));\n    });\n  }\n\n  getCenter(): Promise<mapTypes.LatLng> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getCenter());\n    });\n  }\n\n  panTo(latLng: mapTypes.LatLng | mapTypes.LatLngLiteral): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panTo(latLng));\n    });\n  }\n\n  panBy(x: number, y: number): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panBy(x, y));\n    });\n  }\n\n  fitBounds(latLng: mapTypes.LatLngBounds | mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.fitBounds(latLng, padding));\n    });\n  }\n\n  panToBounds(latLng: mapTypes.LatLngBounds | mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panToBounds(latLng, padding));\n    });\n  }\n\n  /**\n   * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n   */\n  getNativeMap(): Promise<mapTypes.GoogleMap> { return this._map; }\n\n  /**\n   * Triggers the given event name on the map instance.\n   */\n  triggerMapEvent(eventName: string): Promise<void> {\n    return this._map.then((m) => google.maps.event.trigger(m, eventName));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AgmBicyclingLayer } from '../../directives/bicycling-layer';\nimport { AgmTransitLayer } from '../../directives/transit-layer';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport { BicyclingLayer, BicyclingLayerOptions, GoogleMap, TransitLayer, TransitLayerOptions } from '../google-maps-types';\n\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\n\n@Injectable()\nexport class LayerManager {\n    private _layers: Map<AgmTransitLayer | AgmBicyclingLayer, Promise<TransitLayer | BicyclingLayer>> =\n        new Map<AgmTransitLayer | AgmBicyclingLayer, Promise<TransitLayer | BicyclingLayer>>();\n\n    constructor(private _wrapper: GoogleMapsAPIWrapper) {}\n\n    /**\n     * Adds a transit layer to a map instance.\n     * @param {AgmTransitLayer} layer - a TransitLayer object\n     * @param {TransitLayerOptions} options - TransitLayerOptions options\n     * @returns void\n     */\n    addTransitLayer(layer: AgmTransitLayer, options: TransitLayerOptions): void {\n        const newLayer = this._wrapper.createTransitLayer(options);\n        this._layers.set(layer, newLayer);\n    }\n\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param {AgmBicyclingLayer} layer - a bicycling layer object\n     * @param {BicyclingLayerOptions} options - BicyclingLayer options\n     * @returns void\n     */\n    addBicyclingLayer(layer: AgmBicyclingLayer, options: BicyclingLayerOptions): void {\n        const newLayer = this._wrapper.createBicyclingLayer(options);\n        this._layers.set(layer, newLayer);\n    }\n\n    /**\n     * Deletes a map layer\n     * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete\n     * @returns  Promise<void>\n     */\n    deleteLayer(layer: AgmTransitLayer | AgmBicyclingLayer): Promise<void> {\n        return this._layers.get(layer).then(currentLayer => {\n            currentLayer.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n\n    /**\n     * Hide/Show a google map layer\n     * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show\n     * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer\n     * @returns Promise<void>\n     */\n    toggleLayerVisibility(layer: AgmTransitLayer | AgmBicyclingLayer, options: TransitLayerOptions | BicyclingLayerOptions): Promise<void> {\n        return this._layers.get(layer).then(currentLayer => {\n            if (!options.visible) {\n                currentLayer.setMap(null);\n                return;\n            } else {\n               return this._wrapper.getNativeMap().then( (map: GoogleMap) => {\n                   currentLayer.setMap(map);\n                });\n            }\n        });\n    }\n}\n","import { Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { LayerManager } from '../services/managers/layer-manager';\n\nlet layerId = 0;\n\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\n@Directive({\n    selector: 'agm-bicycling-layer',\n})\n\nexport class AgmBicyclingLayer implements OnInit, OnChanges, OnDestroy{\n    private _addedToManager = false;\n    private _id: string = (layerId++).toString();\n\n    /**\n     * Hide/show bicycling layer\n     */\n    @Input() visible = true;\n\n    constructor( private _manager: LayerManager ) {}\n\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addBicyclingLayer(this, {visible: this.visible});\n        this._addedToManager = true;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, {visible: changes['visible'].currentValue});\n        }\n    }\n\n    /** @internal */\n    id(): string { return this._id; }\n\n    /** @internal */\n    toString(): string { return `AgmBicyclingLayer-${this._id.toString()}`; }\n\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmCircle } from '../../directives/circle';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport * as mapTypes from '../google-maps-types';\n\ndeclare var google: any;\n\n@Injectable()\nexport class CircleManager {\n  private _circles: Map<AgmCircle, Promise<mapTypes.Circle>> =\n      new Map<AgmCircle, Promise<mapTypes.Circle>>();\n\n  constructor(private _apiWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  addCircle(circle: AgmCircle) {\n    this._circles.set(circle, this._apiWrapper.createCircle({\n      center: {lat: circle.latitude, lng: circle.longitude},\n      clickable: circle.clickable,\n      draggable: circle.draggable,\n      editable: circle.editable,\n      fillColor: circle.fillColor,\n      fillOpacity: circle.fillOpacity,\n      radius: circle.radius,\n      strokeColor: circle.strokeColor,\n      strokeOpacity: circle.strokeOpacity,\n      strokePosition: circle.strokePosition,\n      strokeWeight: circle.strokeWeight,\n      visible: circle.visible,\n      zIndex: circle.zIndex,\n    }));\n  }\n\n  /**\n   * Removes the given circle from the map.\n   */\n  removeCircle(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => {\n      c.setMap(null);\n      this._circles.delete(circle);\n    });\n  }\n\n  setOptions(circle: AgmCircle, options: mapTypes.CircleOptions): Promise<void> {\n    return this._circles.get(circle).then((c) => {\n      if (typeof options.strokePosition === 'string') {\n        options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n      }\n      c.setOptions(options);\n    });\n  }\n\n  getBounds(circle: AgmCircle): Promise<mapTypes.LatLngBounds> {\n    return this._circles.get(circle).then((c) => c.getBounds());\n  }\n\n  getCenter(circle: AgmCircle): Promise<mapTypes.LatLng> {\n    return this._circles.get(circle).then((c) => c.getCenter());\n  }\n\n  getRadius(circle: AgmCircle): Promise<number> {\n    return this._circles.get(circle).then((c) => c.getRadius());\n  }\n\n  setCenter(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then(\n        (c) => { return c.setCenter({lat: circle.latitude, lng: circle.longitude}); });\n  }\n\n  setEditable(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setEditable(circle.editable); });\n  }\n\n  setDraggable(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setDraggable(circle.draggable); });\n  }\n\n  setVisible(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setVisible(circle.visible); });\n  }\n\n  setRadius(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setRadius(circle.radius); });\n  }\n\n  getNativeCircle(circle: AgmCircle): Promise<mapTypes.Circle> {\n    return this._circles.get(circle);\n  }\n\n  createEventObservable<T>(eventName: string, circle: AgmCircle): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      let listener: mapTypes.MapsEventListener = null;\n      this._circles.get(circle).then((c) => {\n        listener = c.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n\n      return () => {\n        if (listener !== null) {\n          listener.remove();\n        }\n      };\n    });\n  }\n}\n","import { Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { MouseEvent } from '../map-types';\nimport { LatLng, LatLngBounds, LatLngLiteral, MouseEvent as MapMouseEvent } from '../services/google-maps-types';\nimport { CircleManager } from '../services/managers/circle-manager';\n\n@Directive({\n  selector: 'agm-circle',\n})\nexport class AgmCircle implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The latitude position of the circle (required).\n   */\n  @Input() latitude: number;\n\n  /**\n   * The clickable position of the circle (required).\n   */\n  @Input() longitude: number;\n\n  /**\n   * Indicates whether this Circle handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this circle over the map. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('circleDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this circle by dragging the control points shown at\n   * the center and around the circumference of the circle. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0.\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * The radius in meters on the Earth's surface.\n   */\n  @Input() radius = 0;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke position. Defaults to CENTER.\n   * This property is not supported on Internet Explorer 8 and earlier.\n   */\n  @Input() strokePosition: 'CENTER' | 'INSIDE' | 'OUTSIDE' = 'CENTER';\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight = 0;\n\n  /**\n   * Whether this circle is visible on the map. Defaults to true.\n   */\n  @Input() visible = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the circle's center is changed.\n   */\n  @Output() centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  @Output() circleClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  @Output() circleDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the circle.\n   */\n  @Output() drag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the circle.\n   */\n  @Output() dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the circle.\n   */\n  @Output() dragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the circle.\n   */\n  @Output() mouseDown: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the circle.\n   */\n  @Output() mouseMove: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on circle mouseout.\n   */\n  @Output() mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on circle mouseover.\n   */\n  @Output() mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mouseup event is fired on the circle.\n   */\n  @Output() mouseUp: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the circle's radius is changed.\n   */\n  @Output() radiusChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * This event is fired when the circle is right-clicked on.\n   */\n  @Output() rightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  private _circleAddedToManager = false;\n\n  private static _mapOptions: string[] = [\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex', 'clickable',\n  ];\n\n  private _eventSubscriptions: Subscription[] = [];\n\n  constructor(private _manager: CircleManager) {}\n\n  /** @internal */\n  ngOnInit() {\n    this._manager.addCircle(this);\n    this._circleAddedToManager = true;\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._circleAddedToManager) {\n      return;\n    }\n    if (changes['latitude'] || changes['longitude']) {\n      this._manager.setCenter(this);\n    }\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    }\n    if (changes['radius']) {\n      this._manager.setRadius(this);\n    }\n    this._updateCircleOptionsChanges(changes);\n  }\n\n  private _updateCircleOptionsChanges(changes: {[propName: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys =\n        Object.keys(changes).filter(k => AgmCircle._mapOptions.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _registerEventListeners() {\n    let events: Map<string, EventEmitter<any>> = new Map<string, EventEmitter<any>>();\n    events.set('center_changed', this.centerChange);\n    events.set('click', this.circleClick);\n    events.set('dblclick', this.circleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragstart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('radius_changed', this.radiusChange);\n    events.set('rightclick', this.rightClick);\n\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(\n          this._manager.createEventObservable<MapMouseEvent>(eventName, this).subscribe((value) => {\n            switch (eventName) {\n              case 'radius_changed':\n                this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\n                break;\n              case 'center_changed':\n                this._manager.getCenter(this).then(\n                    (center) =>\n                        eventEmitter.emit({lat: center.lat(), lng: center.lng()} as LatLngLiteral));\n                break;\n              default:\n                eventEmitter.emit(\n                    {coords: {lat: value.latLng.lat(), lng: value.latLng.lng()}} as MouseEvent);\n            }\n          }));\n    });\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(function(s: Subscription) { s.unsubscribe(); });\n    this._eventSubscriptions = null;\n    this._manager.removeCircle(this);\n  }\n\n  /**\n   * Gets the LatLngBounds of this Circle.\n   */\n  getBounds(): Promise<LatLngBounds> { return this._manager.getBounds(this); }\n\n  getCenter(): Promise<LatLng> { return this._manager.getCenter(this); }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmDataLayer } from './../../directives/data-layer';\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\nimport { Data, DataOptions, Feature } from './../google-maps-types';\n\n/**\n * Manages all Data Layers for a Google Map instance.\n */\n@Injectable()\nexport class DataLayerManager {\n  private _layers: Map<AgmDataLayer, Promise<Data>> =\n  new Map<AgmDataLayer, Promise<Data>>();\n\n  constructor(private _wrapper: GoogleMapsAPIWrapper, private _zone: NgZone) { }\n\n  /**\n   * Adds a new Data Layer to the map.\n   */\n  addDataLayer(layer: AgmDataLayer) {\n    const newLayer = this._wrapper.createDataLayer({\n      style: layer.style,\n    } as DataOptions)\n    .then(d => {\n      if (layer.geoJson) {\n        this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);\n      }\n      return d;\n    });\n    this._layers.set(layer, newLayer);\n  }\n\n  deleteDataLayer(layer: AgmDataLayer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n      this._layers.delete(layer);\n    });\n  }\n\n  updateGeoJson(layer: AgmDataLayer, geoJson: Object | string) {\n    this._layers.get(layer).then(l => {\n      l.forEach(function (feature: Feature) {\n        l.remove(feature);\n\n        var index = l.features.indexOf(feature, 0);\n        if (index > -1) {\n          l.features.splice(index, 1);\n        }\n      });\n      this.getDataFeatures(l, geoJson).then(features => l.features = features);\n    });\n  }\n\n  setDataOptions(layer: AgmDataLayer, options: DataOptions)\n  {\n    this._layers.get(layer).then(l => {\n      l.setControlPosition(options.controlPosition);\n      l.setControls(options.controls);\n      l.setDrawingMode(options.drawingMode);\n      l.setStyle(options.style);\n    });\n  }\n\n  /**\n   * Creates a Google Maps event listener for the given DataLayer as an Observable\n   */\n  createEventObservable<T>(eventName: string, layer: AgmDataLayer): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._layers.get(layer).then((d: Data) => {\n        d.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  /**\n   * Extract features from a geoJson using google.maps Data Class\n   * @param d : google.maps.Data class instance\n   * @param geoJson : url or geojson object\n   */\n  getDataFeatures(d: Data, geoJson: Object | string): Promise<Feature[]> {\n    return new Promise<Feature[]>((resolve, reject) => {\n        if (typeof geoJson === 'object') {\n          try {\n            const features = d.addGeoJson(geoJson);\n            resolve(features);\n          } catch (e) {\n            reject(e);\n          }\n        } else if (typeof geoJson === 'string') {\n          d.loadGeoJson(geoJson, null, resolve);\n        } else {\n          reject(`Impossible to extract features from geoJson: wrong argument type`);\n        }\n      });\n  }\n}\n","import { Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataMouseEvent, DataOptions } from './../services/google-maps-types';\nimport { DataLayerManager } from './../services/managers/data-layer-manager';\n\nlet layerId = 0;\n\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\n@Directive({\n  selector: 'agm-data-layer',\n})\nexport class AgmDataLayer implements OnInit, OnDestroy, OnChanges {\n  private static _dataOptionsAttributes: Array<string> = ['style'];\n\n  private _addedToManager = false;\n  private _id: string = (layerId++).toString();\n  private _subscriptions: Subscription[] = [];\n\n  /**\n   * This event is fired when a feature in the layer is clicked.\n   */\n  @Output() layerClick: EventEmitter<DataMouseEvent> = new EventEmitter<DataMouseEvent>();\n\n  /**\n   * The geoJson to be displayed\n   */\n  @Input() geoJson: Object | string | null = null;\n\n  /**\n   * The layer's style function.\n   */\n  @Input() style: () => void;\n\n  constructor(private _manager: DataLayerManager) { }\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n    this._manager.addDataLayer(this);\n    this._addedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const listeners = [\n      { name: 'click', handler: (ev: DataMouseEvent) => this.layerClick.emit(ev) },\n    ];\n    listeners.forEach((obj) => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return `AgmDataLayer-${this._id.toString()}`; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._manager.deleteDataLayer(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  /** @internal */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._addedToManager) {\n      return;\n    }\n\n    var geoJsonChange = changes['geoJson'];\n    if (geoJsonChange) {\n      this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n    }\n\n    let dataOptions: DataOptions = {};\n\n    AgmDataLayer._dataOptionsAttributes.forEach(k => (dataOptions as any)[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : (this as any)[k]);\n\n    this._manager.setDataOptions(this, dataOptions);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, from, Observable, timer } from 'rxjs';\nimport {\n  flatMap,\n  map,\n  sample,\n  shareReplay,\n  switchMap,\n} from 'rxjs/operators';\nimport { LatLng, LatLngBounds, LatLngLiteral } from './google-maps-types';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n\ndeclare var google: any;\n\nexport interface FitBoundsDetails {\n  latLng: LatLng | LatLngLiteral;\n}\n\n/**\n * @internal\n */\nexport type BoundsMap = Map<string, LatLng | LatLngLiteral>;\n\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\nexport abstract class FitBoundsAccessor {\n  abstract getFitBoundsDetails$(): Observable<FitBoundsDetails>;\n}\n\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\n@Injectable()\nexport class FitBoundsService {\n  protected readonly bounds$: Observable<LatLngBounds>;\n  protected readonly _boundsChangeSampleTime$ = new BehaviorSubject<number>(200);\n  protected readonly _includeInBounds$ = new BehaviorSubject<BoundsMap>(new Map<string, LatLng | LatLngLiteral>());\n\n  constructor(loader: MapsAPILoader) {\n    this.bounds$ = from(loader.load()).pipe(\n      flatMap(() => this._includeInBounds$),\n      sample(\n        this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time))),\n      ),\n      map(includeInBounds => this._generateBounds(includeInBounds)),\n      shareReplay(1),\n    );\n  }\n\n  private _generateBounds(\n    includeInBounds: Map<string, LatLng | LatLngLiteral>,\n  ) {\n    const bounds = new google.maps.LatLngBounds() as LatLngBounds;\n    includeInBounds.forEach(b => bounds.extend(b));\n    return bounds;\n  }\n\n  addToBounds(latLng: LatLng | LatLngLiteral) {\n    const id = this._createIdentifier(latLng);\n    if (this._includeInBounds$.value.has(id)) {\n      return;\n    }\n    const map = this._includeInBounds$.value;\n    map.set(id, latLng);\n    this._includeInBounds$.next(map);\n  }\n\n  removeFromBounds(latLng: LatLng | LatLngLiteral) {\n    const map = this._includeInBounds$.value;\n    map.delete(this._createIdentifier(latLng));\n    this._includeInBounds$.next(map);\n  }\n\n  changeFitBoundsChangeSampleTime(timeMs: number) {\n    this._boundsChangeSampleTime$.next(timeMs);\n  }\n\n  getBounds$(): Observable<LatLngBounds> {\n    return this.bounds$;\n  }\n\n  protected _createIdentifier(latLng: LatLng | LatLngLiteral): string {\n    return `${latLng.lat}+${latLng.lng}`;\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, OnInit, Self } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { FitBoundsAccessor, FitBoundsDetails, FitBoundsService } from '../services/fit-bounds';\n\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\n@Directive({\n  selector: '[agmFitBounds]',\n})\nexport class AgmFitBounds implements OnInit, OnDestroy, OnChanges {\n  /**\n   * If the value is true, the element gets added to the bounds of the map.\n   * Default: true.\n   */\n  @Input() agmFitBounds = true;\n\n  private _destroyed$: Subject<void> = new Subject<void>();\n  private _latestFitBoundsDetails: FitBoundsDetails | null = null;\n\n  constructor(\n    @Self() private readonly _fitBoundsAccessor: FitBoundsAccessor,\n    private readonly _fitBoundsService: FitBoundsService,\n  ) {}\n\n  /**\n   * @internal\n   */\n  ngOnChanges() {\n    this._updateBounds();\n  }\n\n  /**\n   * @internal\n   */\n  ngOnInit() {\n    this._fitBoundsAccessor\n      .getFitBoundsDetails$()\n      .pipe(\n        distinctUntilChanged(\n          (x: FitBoundsDetails, y: FitBoundsDetails) =>\n            x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng,\n        ),\n        takeUntil(this._destroyed$),\n      )\n      .subscribe(details => this._updateBounds(details));\n  }\n\n  /*\n   Either the location changed, or visible status changed.\n   Possible state changes are\n   invisible -> visible\n   visible -> invisible\n   visible -> visible (new location)\n  */\n  private _updateBounds(newFitBoundsDetails?: FitBoundsDetails) {\n    // either visibility will change, or location, so remove the old one anyway\n    if (this._latestFitBoundsDetails) {\n      this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n      // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n      // true -> false -> true, in which case we still need old value cached here\n    }\n\n    if (newFitBoundsDetails) {\n      this._latestFitBoundsDetails = newFitBoundsDetails;\n    }\n    if (!this._latestFitBoundsDetails) {\n      return;\n    }\n    if (this.agmFitBounds === true) {\n      this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    this._destroyed$.next();\n    this._destroyed$.complete();\n    if (this._latestFitBoundsDetails !== null) {\n      this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n    }\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmMarker } from './../../directives/marker';\n\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\nimport { Marker } from './../google-maps-types';\n\ndeclare var google: any;\n\n@Injectable()\nexport class MarkerManager {\n  protected _markers: Map<AgmMarker, Promise<Marker>> =\n      new Map<AgmMarker, Promise<Marker>>();\n\n  constructor(protected _mapsWrapper: GoogleMapsAPIWrapper, protected _zone: NgZone) {}\n\n  async convertAnimation(uiAnim: 'BOUNCE' | 'DROP' | null): Promise<any>{\n    if (uiAnim === null) {\n      return null;\n    } else {\n      return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);\n    }\n  }\n\n  deleteMarker(marker: AgmMarker): Promise<void> {\n    const m = this._markers.get(marker);\n    if (m == null) {\n      // marker already deleted\n      return Promise.resolve();\n    }\n    return m.then((m: Marker) => {\n      return this._zone.run(() => {\n        m.setMap(null);\n        this._markers.delete(marker);\n      });\n    });\n  }\n\n  updateMarkerPosition(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then(\n        (m: Marker) => m.setPosition({lat: marker.latitude, lng: marker.longitude}));\n  }\n\n  updateTitle(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setTitle(marker.title));\n  }\n\n  updateLabel(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => { m.setLabel(marker.label); });\n  }\n\n  updateDraggable(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setDraggable(marker.draggable));\n  }\n\n  updateIcon(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setIcon(marker.iconUrl));\n  }\n\n  updateOpacity(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setOpacity(marker.opacity));\n  }\n\n  updateVisible(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setVisible(marker.visible));\n  }\n\n  updateZIndex(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setZIndex(marker.zIndex));\n  }\n\n  updateClickable(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setClickable(marker.clickable));\n  }\n\n  async updateAnimation(marker: AgmMarker) {\n    const m = await this._markers.get(marker);\n    m.setAnimation(await this.convertAnimation(marker.animation));\n  }\n\n  addMarker(marker: AgmMarker) {\n    const markerPromise = new Promise<Marker>(async (resolve) =>\n     this._mapsWrapper.createMarker({\n        position: {lat: marker.latitude, lng: marker.longitude},\n        label: marker.label,\n        draggable: marker.draggable,\n        icon: marker.iconUrl,\n        opacity: marker.opacity,\n        visible: marker.visible,\n        zIndex: marker.zIndex,\n        title: marker.title,\n        clickable: marker.clickable,\n        animation: await this.convertAnimation(marker.animation),\n      }).then(resolve));\n    this._markers.set(marker, markerPromise);\n  }\n\n  getNativeMarker(marker: AgmMarker): Promise<Marker> {\n    return this._markers.get(marker);\n  }\n\n  createEventObservable<T>(eventName: string, marker: AgmMarker): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._markers.get(marker).then((m: Marker) => {\n        m.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmInfoWindow } from '../../directives/info-window';\n\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport { InfoWindow, InfoWindowOptions } from '../google-maps-types';\nimport { MarkerManager } from './marker-manager';\n\n@Injectable()\nexport class InfoWindowManager {\n  private _infoWindows: Map<AgmInfoWindow, Promise<InfoWindow>> =\n      new Map<AgmInfoWindow, Promise<InfoWindow>>();\n\n  constructor(\n      private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone,\n      private _markerManager: MarkerManager) {}\n\n  deleteInfoWindow(infoWindow: AgmInfoWindow): Promise<void> {\n    const iWindow = this._infoWindows.get(infoWindow);\n    if (iWindow == null) {\n      // info window already deleted\n      return Promise.resolve();\n    }\n    return iWindow.then((i: InfoWindow) => {\n      return this._zone.run(() => {\n        i.close();\n        this._infoWindows.delete(infoWindow);\n      });\n    });\n  }\n\n  setPosition(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setPosition({\n      lat: infoWindow.latitude,\n      lng: infoWindow.longitude,\n    }));\n  }\n\n  setZIndex(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow)\n        .then((i: InfoWindow) => i.setZIndex(infoWindow.zIndex));\n  }\n\n  open(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((w) => {\n      if (infoWindow.hostMarker != null) {\n        return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\n          return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\n        });\n      }\n      return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\n    });\n  }\n\n  close(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((w) => w.close());\n  }\n\n  setOptions(infoWindow: AgmInfoWindow, options: InfoWindowOptions) {\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setOptions(options));\n  }\n\n  addInfoWindow(infoWindow: AgmInfoWindow) {\n    const options: InfoWindowOptions = {\n      content: infoWindow.content,\n      maxWidth: infoWindow.maxWidth,\n      zIndex: infoWindow.zIndex,\n      disableAutoPan: infoWindow.disableAutoPan,\n    };\n    if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n      options.position = {lat: infoWindow.latitude, lng: infoWindow.longitude};\n    }\n    const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n    this._infoWindows.set(infoWindow, infoWindowPromise);\n  }\n\n   /**\n    * Creates a Google Maps event listener for the given InfoWindow as an Observable\n    */\n  createEventObservable<T>(eventName: string, infoWindow: AgmInfoWindow): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._infoWindows.get(infoWindow).then((i: InfoWindow) => {\n        i.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\n\nimport { InfoWindowManager } from '../services/managers/info-window-manager';\n\nimport { AgmMarker } from './marker';\n\nlet infoWindowId = 0;\n\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'agm-info-window',\n  template: `<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `,\n})\nexport class AgmInfoWindow implements OnDestroy, OnChanges, OnInit {\n  /**\n   * The latitude position of the info window (only usefull if you use it ouside of a {@link\n   * AgmMarker}).\n   */\n  @Input() latitude: number;\n\n  /**\n   * The longitude position of the info window (only usefull if you use it ouside of a {@link\n   * AgmMarker}).\n   */\n  @Input() longitude: number;\n\n  /**\n   * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\n   * visible when it opens.\n   */\n  @Input() disableAutoPan: boolean;\n\n  /**\n   * All InfoWindows are displayed on the map in order of their zIndex, with higher values\n   * displaying in front of InfoWindows with lower values. By default, InfoWindows are displayed\n   * according to their latitude, with InfoWindows of lower latitudes appearing in front of\n   * InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * Maximum width of the infowindow, regardless of content's width. This value is only considered\n   * if it is set before a call to open. To change the maximum width when changing content, call\n   * close, update maxWidth, and then open.\n   */\n  @Input() maxWidth: number;\n\n  /**\n   * Holds the marker that is the host of the info window (if available)\n   */\n  hostMarker: AgmMarker;\n\n  /**\n   * Holds the native element that is used for the info window content.\n   */\n  content: Node;\n\n  /**\n   * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n   */\n  @Input() isOpen = false;\n\n  /**\n   * Emits an event when the info window is closed.\n   */\n  @Output() infoWindowClose: EventEmitter<void> = new EventEmitter<void>();\n\n  private static _infoWindowOptionsInputs: string[] = ['disableAutoPan', 'maxWidth'];\n  private _infoWindowAddedToManager = false;\n  private _id: string = (infoWindowId++).toString();\n\n  constructor(private _infoWindowManager: InfoWindowManager, private _el: ElementRef) {}\n\n  ngOnInit() {\n    this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n    this._infoWindowManager.addInfoWindow(this);\n    this._infoWindowAddedToManager = true;\n    this._updateOpenState();\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._infoWindowAddedToManager) {\n      return;\n    }\n    if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n        typeof this.longitude === 'number') {\n      this._infoWindowManager.setPosition(this);\n    }\n    if (changes['zIndex']) {\n      this._infoWindowManager.setZIndex(this);\n    }\n    if (changes['isOpen']) {\n      this._updateOpenState();\n    }\n    this._setInfoWindowOptions(changes);\n  }\n\n  private _registerEventListeners() {\n    this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\n      this.isOpen = false;\n      this.infoWindowClose.emit();\n    });\n  }\n\n  private _updateOpenState() {\n    this.isOpen ? this.open() : this.close();\n  }\n\n  private _setInfoWindowOptions(changes: {[key: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys = Object.keys(changes).filter(\n        k => AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._infoWindowManager.setOptions(this, options);\n  }\n\n  /**\n   * Opens the info window.\n   */\n  open(): Promise<void> { return this._infoWindowManager.open(this); }\n\n  /**\n   * Closes the info window.\n   */\n  close(): Promise<void> {\n    return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'AgmInfoWindow-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmKmlLayer } from './../../directives/kml-layer';\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\nimport { KmlLayer, KmlLayerOptions } from './../google-maps-types';\n\ndeclare var google: any;\n\n/**\n * Manages all KML Layers for a Google Map instance.\n */\n@Injectable()\nexport class KmlLayerManager {\n  private _layers: Map<AgmKmlLayer, Promise<KmlLayer>> =\n      new Map<AgmKmlLayer, Promise<KmlLayer>>();\n\n  constructor(private _wrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  /**\n   * Adds a new KML Layer to the map.\n   */\n  addKmlLayer(layer: AgmKmlLayer) {\n    const newLayer = this._wrapper.getNativeMap().then(m => {\n      return new google.maps.KmlLayer({\n        clickable: layer.clickable,\n        map: m,\n        preserveViewport: layer.preserveViewport,\n        screenOverlays: layer.screenOverlays,\n        suppressInfoWindows: layer.suppressInfoWindows,\n        url: layer.url,\n        zIndex: layer.zIndex,\n      } as KmlLayerOptions);\n    });\n    this._layers.set(layer, newLayer);\n  }\n\n  setOptions(layer: AgmKmlLayer, options: KmlLayerOptions) {\n    this._layers.get(layer).then(l => l.setOptions(options));\n  }\n\n  deleteKmlLayer(layer: AgmKmlLayer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n      this._layers.delete(layer);\n    });\n  }\n\n  /**\n   * Creates a Google Maps event listener for the given KmlLayer as an Observable\n   */\n  createEventObservable<T>(eventName: string, layer: AgmKmlLayer): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._layers.get(layer).then((m: KmlLayer) => {\n        m.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { KmlMouseEvent } from './../services/google-maps-types';\nimport { KmlLayerManager } from './../services/managers/kml-layer-manager';\n\nlet layerId = 0;\n\n@Directive({\n  selector: 'agm-kml-layer',\n})\nexport class AgmKmlLayer implements OnInit, OnDestroy, OnChanges {\n  private _addedToManager = false;\n  private _id: string = (layerId++).toString();\n  private _subscriptions: Subscription[] = [];\n  private static _kmlLayerOptions: string[] =\n      ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\n\n  /**\n   * If true, the layer receives mouse events. Default value is true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * By default, the input map is centered and zoomed to the bounding box of the contents of the\n   * layer.\n   * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n   * were never set.\n   */\n  @Input() preserveViewport = false;\n\n  /**\n   * Whether to render the screen overlays. Default true.\n   */\n  @Input() screenOverlays = true;\n\n  /**\n   * Suppress the rendering of info windows when layer features are clicked.\n   */\n  @Input() suppressInfoWindows = false;\n\n  /**\n   * The URL of the KML document to display.\n   */\n  @Input() url: string = null;\n\n  /**\n   * The z-index of the layer.\n   */\n  @Input() zIndex: number | null = null;\n\n  /**\n   * This event is fired when a feature in the layer is clicked.\n   */\n  @Output() layerClick: EventEmitter<KmlMouseEvent> = new EventEmitter<KmlMouseEvent>();\n\n  /**\n   * This event is fired when the KML layers default viewport has changed.\n   */\n  @Output() defaultViewportChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the KML layer has finished loading.\n   * At this point it is safe to read the status property to determine if the layer loaded\n   * successfully.\n   */\n  @Output() statusChange: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(private _manager: KmlLayerManager) {}\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n    this._manager.addKmlLayer(this);\n    this._addedToManager = true;\n    this._addEventListeners();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._addedToManager) {\n      return;\n    }\n    this._updatePolygonOptions(changes);\n  }\n\n  private _updatePolygonOptions(changes: SimpleChanges) {\n    const options = Object.keys(changes)\n                        .filter(k => AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1)\n                        .reduce((obj: any, k: string) => {\n                          obj[k] = changes[k].currentValue;\n                          return obj;\n                        }, {});\n    if (Object.keys(options).length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _addEventListeners() {\n    const listeners = [\n      {name: 'click', handler: (ev: KmlMouseEvent) => this.layerClick.emit(ev)},\n      {name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit()},\n      {name: 'status_changed', handler: () => this.statusChange.emit()},\n    ];\n    listeners.forEach((obj) => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return `AgmKmlLayer-${this._id.toString()}`; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._manager.deleteKmlLayer(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n}\n","import { fromEventPattern, Observable } from 'rxjs';\nimport { MapsEventListener, MVCArray } from '../services/google-maps-types';\n\nexport function createMVCEventObservable<T>(array: MVCArray<T>): Observable<MVCEvent<T>>{\n  const eventNames = ['insert_at', 'remove_at', 'set_at'];\n  return fromEventPattern(\n    (handler: Function) => eventNames.map(evName => array.addListener(evName,\n      (index: number, previous?: T) => handler.apply(array, [ {'newArr': array.getArray(), evName, index, previous} as MVCEvent<T>]))),\n    (_handler: Function, evListeners: MapsEventListener[]) => evListeners.forEach(evListener => evListener.remove()));\n}\n\nexport interface MVCEvent<T> {\n  newArr: T[];\n  evName: MvcEventType;\n  index: number;\n  previous?: T;\n}\n\nexport type MvcEventType = 'insert_at' | 'remove_at' | 'set_at';\n\nexport class MvcArrayMock<T> implements MVCArray<T> {\n  private vals: T[] = [];\n  private listeners: {\n    'remove_at': Function[];\n    'insert_at': Function[];\n    'set_at': Function[];\n    [key: string]: Function[];\n  } = {\n    'remove_at': [] as Function[],\n    'insert_at': [] as Function[],\n    'set_at': [] as Function[],\n  };\n  clear(): void {\n    for (let i = this.vals.length - 1; i >= 0; i--) {\n        this.removeAt(i);\n    }\n  }\n  getArray(): T[] {\n    return [...this.vals];\n  }\n  getAt(i: number): T {\n    return this.vals[i];\n  }\n  getLength(): number {\n    return this.vals.length;\n  }\n  insertAt(i: number, elem: T): void {\n    this.vals.splice(i, 0, elem);\n    this.listeners.insert_at.map(listener => listener(i));\n  }\n  pop(): T {\n    const deleted = this.vals.pop();\n    this.listeners.remove_at.map(listener => listener(this.vals.length, deleted));\n    return deleted;\n  }\n  push(elem: T): number {\n    this.vals.push(elem);\n    this.listeners.insert_at.map(listener => listener(this.vals.length - 1));\n    return this.vals.length;\n  }\n  removeAt(i: number): T {\n    const deleted = this.vals.splice(i, 1)[0];\n    this.listeners.remove_at.map(listener => listener(i, deleted));\n    return deleted;\n  }\n  setAt(i: number, elem: T): void {\n    const deleted = this.vals[i];\n    this.vals[i] = elem;\n    this.listeners.set_at.map(listener => listener(i, deleted));\n  }\n  forEach(callback: (elem: T, i: number) => void): void {\n    this.vals.forEach(callback);\n  }\n  addListener(eventName: string, handler: Function): MapsEventListener {\n    const listenerArr = this.listeners[eventName];\n    listenerArr.push(handler);\n    return {\n        remove: () => {\n            listenerArr.splice(listenerArr.indexOf(handler), 1);\n        },\n    };\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { merge, Observable, Observer } from 'rxjs';\nimport { map, skip, startWith, switchMap } from 'rxjs/operators';\n\nimport { AgmPolygon, PathChangePolygonPathEvent, PathCollectionChangePolygonPathEvent, PolygonPathEvent } from '../../directives/polygon';\nimport { createMVCEventObservable, MVCEvent } from '../../utils/mvcarray-utils';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport { LatLng, MVCArray, Polygon } from '../google-maps-types';\n\n@Injectable()\nexport class PolygonManager {\n  private _polygons: Map<AgmPolygon, Promise<Polygon>> =\n    new Map<AgmPolygon, Promise<Polygon>>();\n\n  constructor(private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) { }\n\n  addPolygon(path: AgmPolygon) {\n    const polygonPromise = this._mapsWrapper.createPolygon({\n      clickable: path.clickable,\n      draggable: path.draggable,\n      editable: path.editable,\n      fillColor: path.fillColor,\n      fillOpacity: path.fillOpacity,\n      geodesic: path.geodesic,\n      paths: path.paths,\n      strokeColor: path.strokeColor,\n      strokeOpacity: path.strokeOpacity,\n      strokeWeight: path.strokeWeight,\n      visible: path.visible,\n      zIndex: path.zIndex,\n    });\n    this._polygons.set(path, polygonPromise);\n  }\n\n  updatePolygon(polygon: AgmPolygon): Promise<void> {\n    const m = this._polygons.get(polygon);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polygon) => this._zone.run(() => { l.setPaths(polygon.paths); }));\n  }\n\n  setPolygonOptions(path: AgmPolygon, options: { [propName: string]: any }): Promise<void> {\n    return this._polygons.get(path).then((l: Polygon) => { l.setOptions(options); });\n  }\n\n  deletePolygon(paths: AgmPolygon): Promise<void> {\n    const m = this._polygons.get(paths);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polygon) => {\n      return this._zone.run(() => {\n        l.setMap(null);\n        this._polygons.delete(paths);\n      });\n    });\n  }\n\n  getPath(polygon: AgmPolygon): Promise<Array<LatLng>> {\n    return this._polygons.get(polygon)\n      .then((polygon) => polygon.getPath().getArray());\n  }\n\n  getPaths(polygon: AgmPolygon): Promise<Array<Array<LatLng>>> {\n    return this._polygons.get(polygon)\n      .then((polygon) => polygon.getPaths().getArray().map((p) => p.getArray()));\n  }\n\n  createEventObservable<T>(eventName: string, path: AgmPolygon): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._polygons.get(path).then((l: Polygon) => {\n        l.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  async createPathEventObservable(agmPolygon: AgmPolygon): Promise<Observable<PolygonPathEvent<any>>> {\n    const polygon = await this._polygons.get(agmPolygon);\n    const paths = polygon.getPaths();\n    const pathsChanges$ = createMVCEventObservable(paths);\n    return pathsChanges$.pipe(startWith(({ newArr: paths.getArray() } as MVCEvent<MVCArray<LatLng>>)), // in order to subscribe to them all\n      switchMap(parentMVEvent => merge(...// rest parameter\n        parentMVEvent.newArr.map((chMVC, index) =>\n          createMVCEventObservable(chMVC)\n          .pipe(map(chMVCEvent => ({ parentMVEvent, chMVCEvent, pathIndex: index })))))\n        .pipe(startWith({ parentMVEvent, chMVCEvent: null, pathIndex: null }))), // start the merged ob with an event signinifing change to parent\n      skip(1), // skip the manually added event\n      map(({ parentMVEvent, chMVCEvent, pathIndex }) => {\n        let retVal;\n        if (!chMVCEvent) {\n          retVal = {\n            newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n            eventName: parentMVEvent.evName,\n            index: parentMVEvent.index,\n          } as PathCollectionChangePolygonPathEvent;\n          if (parentMVEvent.previous) {\n            retVal.previous =  parentMVEvent.previous.getArray();\n          }\n        } else {\n          retVal = {\n            newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n            pathIndex,\n            eventName: chMVCEvent.evName,\n            index: chMVCEvent.index,\n          } as PathChangePolygonPathEvent;\n          if (chMVCEvent.previous) {\n            retVal.previous = chMVCEvent.previous;\n          }\n        }\n        return retVal;\n      }));\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmPolyline, PathEvent } from '../../directives/polyline';\nimport { AgmPolylinePoint } from '../../directives/polyline-point';\nimport { createMVCEventObservable } from '../../utils/mvcarray-utils';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport { IconSequence, LatLng, LatLngLiteral, MVCArray, Polyline } from '../google-maps-types';\n\ndeclare var google: any;\n\n@Injectable()\nexport class PolylineManager {\n  private _polylines: Map<AgmPolyline, Promise<Polyline>> =\n      new Map<AgmPolyline, Promise<Polyline>>();\n\n  constructor(private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  private static _convertPoints(line: AgmPolyline): Array<LatLngLiteral> {\n    const path = line._getPoints().map((point: AgmPolylinePoint) => {\n      return {lat: point.latitude, lng: point.longitude} as LatLngLiteral;\n    });\n    return path;\n  }\n\n  private static _convertPath(path: 'CIRCLE' | 'BACKWARD_CLOSED_ARROW' | 'BACKWARD_OPEN_ARROW' | 'FORWARD_CLOSED_ARROW' |\n  'FORWARD_CLOSED_ARROW' | string): number | string{\n    const symbolPath = google.maps.SymbolPath[path];\n    if (typeof symbolPath === 'number') {\n      return symbolPath;\n    } else{\n      return path;\n    }\n  }\n\n  private static _convertIcons(line: AgmPolyline): Array<IconSequence> {\n    const icons = line._getIcons().map(agmIcon => ({\n      fixedRotation: agmIcon.fixedRotation,\n      offset: agmIcon.offset,\n      repeat: agmIcon.repeat,\n      icon: {\n        anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n        fillColor: agmIcon.fillColor,\n        fillOpacity: agmIcon.fillOpacity,\n        path: PolylineManager._convertPath(agmIcon.path),\n        rotation: agmIcon.rotation,\n        scale: agmIcon.scale,\n        strokeColor: agmIcon.strokeColor,\n        strokeOpacity: agmIcon.strokeOpacity,\n        strokeWeight: agmIcon.strokeWeight,\n      },\n    } as IconSequence));\n    // prune undefineds;\n    icons.forEach(icon => {\n      Object.entries(icon).forEach(([key, val]) => {\n        if (typeof val === 'undefined') {\n          delete (icon as any)[key];\n        }\n      });\n      if (typeof icon.icon.anchor.x === 'undefined' ||\n        typeof icon.icon.anchor.y === 'undefined') {\n          delete icon.icon.anchor;\n        }\n    });\n    return icons;\n  }\n\n  addPolyline(line: AgmPolyline) {\n    const polylinePromise = this._mapsWrapper.getNativeMap()\n    .then(() => [ PolylineManager._convertPoints(line),\n                  PolylineManager._convertIcons(line)])\n    .then(([path, icons]: [LatLngLiteral[], IconSequence[]]) =>\n      this._mapsWrapper.createPolyline({\n        clickable: line.clickable,\n        draggable: line.draggable,\n        editable: line.editable,\n        geodesic: line.geodesic,\n        strokeColor: line.strokeColor,\n        strokeOpacity: line.strokeOpacity,\n        strokeWeight: line.strokeWeight,\n        visible: line.visible,\n        zIndex: line.zIndex,\n        path: path,\n        icons: icons,\n    }));\n    this._polylines.set(line, polylinePromise);\n  }\n\n  updatePolylinePoints(line: AgmPolyline): Promise<void> {\n    const path = PolylineManager._convertPoints(line);\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polyline) => { return this._zone.run(() => { l.setPath(path); }); });\n  }\n\n  async updateIconSequences(line: AgmPolyline): Promise<void> {\n    await this._mapsWrapper.getNativeMap();\n    const icons = PolylineManager._convertIcons(line);\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return;\n    }\n    return m.then(l => this._zone.run(() => l.setOptions({icons: icons}) ) );\n  }\n\n  setPolylineOptions(line: AgmPolyline, options: {[propName: string]: any}):\n      Promise<void> {\n    return this._polylines.get(line).then((l: Polyline) => { l.setOptions(options); });\n  }\n\n  deletePolyline(line: AgmPolyline): Promise<void> {\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polyline) => {\n      return this._zone.run(() => {\n        l.setMap(null);\n        this._polylines.delete(line);\n      });\n    });\n  }\n\n  private async getMVCPath(agmPolyline: AgmPolyline): Promise<MVCArray<LatLng>> {\n    const polyline = await this._polylines.get(agmPolyline);\n    return polyline.getPath();\n  }\n\n  async getPath(agmPolyline: AgmPolyline): Promise<Array<LatLng>> {\n    return (await this.getMVCPath(agmPolyline)).getArray();\n  }\n\n  createEventObservable<T>(eventName: string, line: AgmPolyline): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._polylines.get(line).then((l: Polyline) => {\n        l.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  async createPathEventObservable(line: AgmPolyline): Promise<Observable<PathEvent>> {\n    const mvcPath = await this.getMVCPath(line);\n    return createMVCEventObservable(mvcPath);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmRectangle } from '../../directives/rectangle';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport * as mapTypes from '../google-maps-types';\n\n@Injectable()\nexport class RectangleManager {\n  private _rectangles: Map<AgmRectangle, Promise<mapTypes.Rectangle>> =\n      new Map<AgmRectangle, Promise<mapTypes.Rectangle>>();\n\n  constructor(private _apiWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  addRectangle(rectangle: AgmRectangle) {\n    this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n      bounds: {\n        north: rectangle.north,\n        east: rectangle.east,\n        south: rectangle.south,\n        west: rectangle.west,\n      },\n      clickable: rectangle.clickable,\n      draggable: rectangle.draggable,\n      editable: rectangle.editable,\n      fillColor: rectangle.fillColor,\n      fillOpacity: rectangle.fillOpacity,\n      strokeColor: rectangle.strokeColor,\n      strokeOpacity: rectangle.strokeOpacity,\n      strokePosition: rectangle.strokePosition,\n      strokeWeight: rectangle.strokeWeight,\n      visible: rectangle.visible,\n      zIndex: rectangle.zIndex,\n    }));\n  }\n\n  /**\n   * Removes the given rectangle from the map.\n   */\n  removeRectangle(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      r.setMap(null);\n      this._rectangles.delete(rectangle);\n    });\n  }\n\n  setOptions(rectangle: AgmRectangle, options: mapTypes.RectangleOptions): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => r.setOptions(options));\n  }\n\n  getBounds(rectangle: AgmRectangle): Promise<mapTypes.LatLngBounds> {\n    return this._rectangles.get(rectangle).then((r) => r.getBounds());\n  }\n\n  setBounds(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setBounds({\n        north: rectangle.north,\n        east: rectangle.east,\n        south: rectangle.south,\n        west: rectangle.west,\n      });\n    });\n  }\n\n  setEditable(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setEditable(rectangle.editable);\n    });\n  }\n\n  setDraggable(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setDraggable(rectangle.draggable);\n    });\n  }\n\n  setVisible(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setVisible(rectangle.visible);\n    });\n  }\n\n  createEventObservable<T>(eventName: string, rectangle: AgmRectangle): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      let listener: mapTypes.MapsEventListener = null;\n      this._rectangles.get(rectangle).then((r) => {\n        listener = r.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n\n      return () => {\n        if (listener !== null) {\n          listener.remove();\n        }\n      };\n    });\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Component, ElementRef, EventEmitter, Inject, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, PLATFORM_ID, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { MouseEvent } from '../map-types';\nimport { FitBoundsService } from '../services/fit-bounds';\nimport { GoogleMapsAPIWrapper } from '../services/google-maps-api-wrapper';\nimport {\n  FullscreenControlOptions, LatLng, LatLngBounds, LatLngBoundsLiteral, LatLngLiteral,\n  MapRestriction, MapTypeControlOptions, MapTypeId, MapTypeStyle, Padding, PanControlOptions,\n  RotateControlOptions, ScaleControlOptions, StreetViewControlOptions, ZoomControlOptions,\n} from '../services/google-maps-types';\nimport { CircleManager } from '../services/managers/circle-manager';\nimport { InfoWindowManager } from '../services/managers/info-window-manager';\nimport { LayerManager } from '../services/managers/layer-manager';\nimport { MarkerManager } from '../services/managers/marker-manager';\nimport { PolygonManager } from '../services/managers/polygon-manager';\nimport { PolylineManager } from '../services/managers/polyline-manager';\nimport { RectangleManager } from '../services/managers/rectangle-manager';\nimport { DataLayerManager } from './../services/managers/data-layer-manager';\nimport { KmlLayerManager } from './../services/managers/kml-layer-manager';\n\ndeclare var google: any;\n\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'agm-map',\n  providers: [\n    CircleManager,\n    DataLayerManager,\n    DataLayerManager,\n    FitBoundsService,\n    GoogleMapsAPIWrapper,\n    InfoWindowManager,\n    KmlLayerManager,\n    LayerManager,\n    MarkerManager,\n    PolygonManager,\n    PolylineManager,\n    RectangleManager,\n  ],\n  host: {\n    // todo: deprecated - we will remove it with the next version\n    '[class.sebm-google-map-container]': 'true',\n  },\n  styles: [`\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  `],\n  template: `\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  `,\n})\nexport class AgmMap implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The longitude that defines the center of the map.\n   */\n  @Input() longitude = 0;\n\n  /**\n   * The latitude that defines the center of the map.\n   */\n  @Input() latitude = 0;\n\n  /**\n   * The zoom level of the map. The default zoom level is 8.\n   */\n  @Input() zoom = 8;\n\n  /**\n   * The minimal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n   * are enforced.\n   */\n  @Input() minZoom: number;\n\n  /**\n   * The maximal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n   * are enforced.\n   */\n  @Input() maxZoom: number;\n\n  /**\n   * The control size for the default map controls. Only governs the controls made by the Maps API itself\n   */\n  @Input() controlSize: number;\n\n  /**\n   * Enables/disables if map is draggable.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('mapDraggable') draggable = true;\n\n  /**\n   * Enables/disables zoom and center on double click. Enabled by default.\n   */\n  @Input() disableDoubleClickZoom = false;\n\n  /**\n   * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n   * value cannot get updated.\n   */\n  @Input() disableDefaultUI = false;\n\n  /**\n   * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n   */\n  @Input() scrollwheel = true;\n\n  /**\n   * Color used for the background of the Map div. This color will be visible when tiles have not\n   * yet loaded as the user pans. This option can only be set when the map is initialized.\n   */\n  @Input() backgroundColor: string;\n\n  /**\n   * The name or url of the cursor to display when mousing over a draggable map. This property uses\n   * the css  * cursor attribute to change the icon. As with the css property, you must specify at\n   * least one fallback cursor that is not a URL. For example:\n   * [draggableCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  @Input() draggableCursor: string;\n\n  /**\n   * The name or url of the cursor to display when the map is being dragged. This property uses the\n   * css cursor attribute to change the icon. As with the css property, you must specify at least\n   * one fallback cursor that is not a URL. For example:\n   * [draggingCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  @Input() draggingCursor: string;\n\n  /**\n   * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n   * enabled by default.\n   */\n  @Input() keyboardShortcuts = true;\n\n  /**\n   * The enabled/disabled state of the Zoom control.\n   */\n  @Input() zoomControl: boolean;\n\n  /**\n   * Options for the Zoom control.\n   */\n  @Input() zoomControlOptions: ZoomControlOptions;\n\n  /**\n   * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n   * modes, these styles will only apply to labels and geometry.\n   */\n  @Input() styles: MapTypeStyle[] = [];\n\n  /**\n   * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n   * used to\n   * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n   */\n  @Input() usePanning = false;\n\n  /**\n   * The initial enabled/disabled state of the Street View Pegman control.\n   * This control is part of the default UI, and should be set to false when displaying a map type\n   * on which the Street View road overlay should not appear (e.g. a non-Earth map type).\n   */\n  @Input() streetViewControl: boolean;\n\n  /**\n   * Options for the Street View control.\n   */\n  @Input() streetViewControlOptions: StreetViewControlOptions;\n\n  /**\n   * Sets the viewport to contain the given bounds.\n   * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n   */\n  @Input() fitBounds: LatLngBoundsLiteral | LatLngBounds | boolean = false;\n\n  /**\n   * Padding amount for the bounds.\n   */\n  @Input() fitBoundsPadding: number | Padding;\n\n  /**\n   * The initial enabled/disabled state of the Scale control. This is disabled by default.\n   */\n  @Input() scaleControl = false;\n\n  /**\n   * Options for the scale control.\n   */\n  @Input() scaleControlOptions: ScaleControlOptions;\n\n  /**\n   * The initial enabled/disabled state of the Map type control.\n   */\n  @Input() mapTypeControl = false;\n\n  /**\n   * Options for the Map type control.\n   */\n  @Input() mapTypeControlOptions: MapTypeControlOptions;\n\n  /**\n   * The initial enabled/disabled state of the Pan control.\n   */\n  @Input() panControl  = false;\n\n  /**\n   * Options for the Pan control.\n   */\n  @Input() panControlOptions: PanControlOptions;\n\n  /**\n   * The initial enabled/disabled state of the Rotate control.\n   */\n  @Input() rotateControl = false;\n\n  /**\n   * Options for the Rotate control.\n   */\n  @Input() rotateControlOptions: RotateControlOptions;\n\n  /**\n   * The initial enabled/disabled state of the Fullscreen control.\n   */\n  @Input() fullscreenControl  = false;\n\n  /**\n   * Options for the Fullscreen control.\n   */\n  @Input() fullscreenControlOptions: FullscreenControlOptions;\n\n  /**\n   * The map mapTypeId. Defaults to 'roadmap'.\n   */\n  @Input() mapTypeId: 'roadmap' | 'hybrid' | 'satellite' | 'terrain' | string = 'roadmap';\n\n  /**\n   * When false, map icons are not clickable. A map icon represents a point of interest,\n   * also known as a POI. By default map icons are clickable.\n   */\n  @Input() clickableIcons = true;\n\n  /**\n   * A map icon represents a point of interest, also known as a POI.\n   * When map icons are clickable by default, an info window is displayed.\n   * When this property is set to false, the info window will not be shown but the click event\n   * will still fire\n   */\n  @Input() showDefaultInfoWindow = true;\n\n  /**\n   * This setting controls how gestures on the map are handled.\n   * Allowed values:\n   * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n   * - 'greedy'      (All touch gestures pan or zoom the map.)\n   * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n   * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n   */\n  @Input() gestureHandling: 'cooperative' | 'greedy' | 'none' | 'auto' = 'auto';\n\n    /**\n     * Controls the automatic switching behavior for the angle of incidence of\n     * the map. The only allowed values are 0 and 45. The value 0 causes the map\n     * to always use a 0Â° overhead view regardless of the zoom level and\n     * viewport. The value 45 causes the tilt angle to automatically switch to\n     * 45 whenever 45Â° imagery is available for the current zoom level and\n     * viewport, and switch back to 0 whenever 45Â° imagery is not available\n     * (this is the default behavior). 45Â° imagery is only available for\n     * satellite and hybrid map types, within some locations, and at some zoom\n     * levels. Note: getTilt returns the current tilt angle, not the value\n     * specified by this option. Because getTilt and this option refer to\n     * different things, do not bind() the tilt property; doing so may yield\n     * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n     */\n  @Input() tilt = 0;\n\n  /**\n   * Options for restricting the bounds of the map.\n   * User cannot pan or zoom away from restricted area.\n   */\n  @Input() restriction: MapRestriction;\n  /**\n   * Map option attributes that can change over time\n   */\n  private static _mapOptionsAttributes: string[] = [\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\n    'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl',\n    'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom',\n    'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions',\n    'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions',\n    'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction',\n  ];\n\n  private _observableSubscriptions: Subscription[] = [];\n  private _fitBoundsSubscription: Subscription;\n\n  /**\n   * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n   * marker or infoWindow).\n   */\n  @Output() mapClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  @Output() mapRightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  @Output() mapDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter is fired when the map center changes.\n   */\n  @Output() centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n\n  /**\n   * This event is fired when the viewport bounds have changed.\n   */\n  @Output() boundsChange: EventEmitter<LatLngBounds> = new EventEmitter<LatLngBounds>();\n\n  /**\n   * This event is fired when the mapTypeId property changes.\n   */\n  @Output() mapTypeIdChange: EventEmitter<MapTypeId> = new EventEmitter<MapTypeId>();\n\n  /**\n   * This event is fired when the map becomes idle after panning or zooming.\n   */\n  @Output() idle: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the zoom level has changed.\n   */\n  @Output() zoomChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * This event is fired when the google map is fully initialized.\n   * You get the google.maps.Map instance as a result of this EventEmitter.\n   */\n  @Output() mapReady: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * This event is fired when the visible tiles have finished loading.\n   */\n  @Output() tilesLoaded: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(\n    private _elem: ElementRef,\n    private _mapsWrapper: GoogleMapsAPIWrapper,\n    @Inject(PLATFORM_ID) private _platformId: Object,\n    protected _fitBoundsService: FitBoundsService,\n    private _zone: NgZone\n  ) {}\n\n  /** @internal */\n  ngOnInit() {\n    if (isPlatformServer(this._platformId)) {\n      // The code is running on the server, do nothing\n      return;\n    }\n    // todo: this should be solved with a new component and a viewChild decorator\n    const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n    this._initMapInstance(container);\n  }\n\n  private _initMapInstance(el: HTMLElement) {\n    this._mapsWrapper.createMap(el, {\n      center: {lat: this.latitude || 0, lng: this.longitude || 0},\n      zoom: this.zoom,\n      minZoom: this.minZoom,\n      maxZoom: this.maxZoom,\n      controlSize: this.controlSize,\n      disableDefaultUI: this.disableDefaultUI,\n      disableDoubleClickZoom: this.disableDoubleClickZoom,\n      scrollwheel: this.scrollwheel,\n      backgroundColor: this.backgroundColor,\n      draggable: this.draggable,\n      draggableCursor: this.draggableCursor,\n      draggingCursor: this.draggingCursor,\n      keyboardShortcuts: this.keyboardShortcuts,\n      styles: this.styles,\n      zoomControl: this.zoomControl,\n      zoomControlOptions: this.zoomControlOptions,\n      streetViewControl: this.streetViewControl,\n      streetViewControlOptions: this.streetViewControlOptions,\n      scaleControl: this.scaleControl,\n      scaleControlOptions: this.scaleControlOptions,\n      mapTypeControl: this.mapTypeControl,\n      mapTypeControlOptions: this.mapTypeControlOptions,\n      panControl: this.panControl,\n      panControlOptions: this.panControlOptions,\n      rotateControl: this.rotateControl,\n      rotateControlOptions: this.rotateControlOptions,\n      fullscreenControl: this.fullscreenControl,\n      fullscreenControlOptions: this.fullscreenControlOptions,\n      mapTypeId: this.mapTypeId,\n      clickableIcons: this.clickableIcons,\n      gestureHandling: this.gestureHandling,\n      tilt: this.tilt,\n      restriction: this.restriction,\n    })\n      .then(() => this._mapsWrapper.getNativeMap())\n      .then(map => this.mapReady.emit(map));\n\n    // register event listeners\n    this._handleMapCenterChange();\n    this._handleMapZoomChange();\n    this._handleMapMouseEvents();\n    this._handleBoundsChange();\n    this._handleMapTypeIdChange();\n    this._handleTilesLoadedEvent();\n    this._handleIdleEvent();\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\n\n    // remove all listeners from the map instance\n    this._mapsWrapper.clearInstanceListeners();\n    if (this._fitBoundsSubscription) {\n      this._fitBoundsSubscription.unsubscribe();\n    }\n  }\n\n  /* @internal */\n  ngOnChanges(changes: SimpleChanges) {\n    this._updateMapOptionsChanges(changes);\n    this._updatePosition(changes);\n  }\n\n  private _updateMapOptionsChanges(changes: SimpleChanges) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys =\n      Object.keys(changes).filter(k => AgmMap._mapOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._mapsWrapper.setMapOptions(options);\n  }\n\n  /**\n   * Triggers a resize event on the google map instance.\n   * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n   * Returns a promise that gets resolved after the event was triggered.\n   */\n  triggerResize(recenter: boolean = true): Promise<void> {\n    // Note: When we would trigger the resize event and show the map in the same turn (which is a\n    // common case for triggering a resize event), then the resize event would not\n    // work (to show the map), so we trigger the event in a timeout.\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        return this._mapsWrapper.triggerMapEvent('resize').then(() => {\n          if (recenter) {\n            this.fitBounds != null ? this._fitBounds() : this._setCenter();\n          }\n          resolve();\n        });\n      });\n    });\n  }\n\n  private _updatePosition(changes: SimpleChanges) {\n    if (changes['latitude'] == null && changes['longitude'] == null &&\n        !changes['fitBounds']) {\n      // no position update needed\n      return;\n    }\n\n    // we prefer fitBounds in changes\n    if ('fitBounds' in changes) {\n      this._fitBounds();\n      return;\n    }\n\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n    this._setCenter();\n  }\n\n  private _setCenter() {\n    let newCenter = {\n      lat: this.latitude,\n      lng: this.longitude,\n    };\n    if (this.usePanning) {\n      this._mapsWrapper.panTo(newCenter);\n    } else {\n      this._mapsWrapper.setCenter(newCenter);\n    }\n  }\n\n  private _fitBounds() {\n    switch (this.fitBounds) {\n      case true:\n        this._subscribeToFitBoundsUpdates();\n        break;\n      case false:\n        if (this._fitBoundsSubscription) {\n          this._fitBoundsSubscription.unsubscribe();\n        }\n        break;\n      default:\n        this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n    }\n  }\n\n  private _subscribeToFitBoundsUpdates() {\n    this._zone.runOutsideAngular(() => {\n      this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {\n        this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));\n      });\n    });\n  }\n\n  protected _updateBounds(bounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding) {\n    if (!bounds) {\n      return;\n    }\n    if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n      const newBounds = new google.maps.LatLngBounds();\n      newBounds.union(bounds);\n      bounds = newBounds;\n    }\n    if (this.usePanning) {\n      this._mapsWrapper.panToBounds(bounds, padding);\n      return;\n    }\n    this._mapsWrapper.fitBounds(bounds, padding);\n  }\n\n  private _isLatLngBoundsLiteral(bounds: LatLngBounds | LatLngBoundsLiteral): bounds is LatLngBoundsLiteral {\n    return bounds != null && (bounds as any).extend === undefined;\n  }\n\n  private _handleMapCenterChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('center_changed').subscribe(() => {\n      this._mapsWrapper.getCenter().then((center: LatLng) => {\n        this.latitude = center.lat();\n        this.longitude = center.lng();\n        this.centerChange.emit({lat: this.latitude, lng: this.longitude} as LatLngLiteral);\n      });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleBoundsChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('bounds_changed').subscribe(() => {\n      this._mapsWrapper.getBounds().then(\n        (bounds: LatLngBounds) => { this.boundsChange.emit(bounds); });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapTypeIdChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('maptypeid_changed').subscribe(() => {\n      this._mapsWrapper.getMapTypeId().then(\n        (mapTypeId: MapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapZoomChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('zoom_changed').subscribe(() => {\n      this._mapsWrapper.getZoom().then((z: number) => {\n        this.zoom = z;\n        this.zoomChange.emit(z);\n      });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleIdleEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('idle').subscribe(\n      () => { this.idle.emit(void 0); });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleTilesLoadedEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('tilesloaded').subscribe(\n      () => this.tilesLoaded.emit(void 0),\n    );\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapMouseEvents() {\n    interface Emitter {\n      emit(value: any): void;\n    }\n\n    type Event = { name: string, emitter: Emitter };\n\n    const events: Event[] = [\n      {name: 'click', emitter: this.mapClick},\n      {name: 'rightclick', emitter: this.mapRightClick},\n      {name: 'dblclick', emitter: this.mapDblClick},\n    ];\n\n    events.forEach((e: Event) => {\n      const s = this._mapsWrapper.subscribeToMapEvent<{latLng: LatLng}>(e.name).subscribe(\n        (event: {latLng: LatLng}) => {\n          let value: MouseEvent = {\n            coords: {\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng(),\n            },\n            placeId: (event as {latLng: LatLng, placeId: string}).placeId,\n          };\n          // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n          if (value.placeId && !this.showDefaultInfoWindow) {\n            (event as any).stop();\n          }\n          e.emitter.emit(value);\n        });\n      this._observableSubscriptions.push(s);\n    });\n  }\n}\n","import { AfterContentInit, ContentChildren, Directive, EventEmitter, forwardRef, Input, OnChanges, OnDestroy, Output, QueryList, SimpleChange } from '@angular/core';\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { MouseEvent } from '../map-types';\nimport { FitBoundsAccessor, FitBoundsDetails } from '../services/fit-bounds';\nimport * as mapTypes from '../services/google-maps-types';\nimport { MarkerManager } from '../services/managers/marker-manager';\nimport { AgmInfoWindow } from './info-window';\n\nlet markerId = 0;\n\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Directive({\n  selector: 'agm-marker',\n  providers: [\n    { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker) },\n  ],\n  inputs: [\n    'latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl',\n    'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation',\n  ],\n  outputs: ['markerClick', 'dragStart', 'drag', 'dragEnd', 'mouseOver', 'mouseOut'],\n})\nexport class AgmMarker implements OnDestroy, OnChanges, AfterContentInit, FitBoundsAccessor {\n  /**\n   * The latitude position of the marker.\n   */\n  @Input() latitude: number;\n\n  /**\n   * The longitude position of the marker.\n   */\n  @Input() longitude: number;\n\n  /**\n   * The title of the marker.\n   */\n  @Input() title: string;\n\n  /**\n   * The label (a single uppercase character) for the marker.\n   */\n  @Input() label: string | mapTypes.MarkerLabel;\n\n  /**\n   * If true, the marker can be dragged. Default value is false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('markerDraggable') draggable = false;\n\n  /**\n   * Icon (the URL of the image) for the foreground.\n   */\n  @Input() iconUrl: string;\n\n  /**\n   * If true, the marker is visible\n   */\n  @Input() visible = true;\n\n  /**\n   * Whether to automatically open the child info window when the marker is clicked.\n   */\n  @Input() openInfoWindow = true;\n\n  /**\n   * The marker's opacity between 0.0 and 1.0.\n   */\n  @Input() opacity = 1;\n\n  /**\n   * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n   * front of markers with lower values. By default, markers are displayed according to their\n   * vertical position on screen, with lower markers appearing in front of markers further up the\n   * screen.\n   */\n  @Input() zIndex = 1;\n\n  /**\n   * If true, the marker can be clicked. Default value is true.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('markerClickable') clickable = true;\n\n  /**\n   * Which animation to play when marker is added to a map.\n   * This can be 'BOUNCE' or 'DROP'\n   */\n  @Input() animation: Animation;\n\n  /**\n   * This event is fired when the marker's animation property changes.\n   *\n   * @memberof AgmMarker\n   */\n  @Output() animationChange = new EventEmitter<Animation>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the marker.\n   */\n  @Output() markerClick: EventEmitter<AgmMarker> = new EventEmitter<AgmMarker>();\n\n  /**\n   * This event emitter gets emitted when the user clicks twice on the marker.\n   */\n  @Output() markerDblClick: EventEmitter<AgmMarker> = new EventEmitter<AgmMarker>();\n\n  /**\n   * This event is fired when the user rightclicks on the marker.\n   */\n  @Output() markerRightClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the user starts dragging the marker.\n   */\n  @Output() dragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the marker.\n   */\n  @Output() drag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the marker.\n   */\n  @Output() dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user mouses over the marker.\n   */\n  @Output() mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user mouses outside the marker.\n   */\n  @Output() mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /** @internal */\n  @ContentChildren(AgmInfoWindow) infoWindow: QueryList<AgmInfoWindow> = new QueryList<AgmInfoWindow>();\n\n  private _markerAddedToManger = false;\n  private _id: string;\n  private _observableSubscriptions: Subscription[] = [];\n\n  protected readonly _fitBoundsDetails$: ReplaySubject<FitBoundsDetails> = new ReplaySubject<FitBoundsDetails>(1);\n\n  constructor(private _markerManager: MarkerManager) { this._id = (markerId++).toString(); }\n\n  /* @internal */\n  ngAfterContentInit() {\n    this.handleInfoWindowUpdate();\n    this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n  }\n\n  private handleInfoWindowUpdate() {\n    if (this.infoWindow.length > 1) {\n      throw new Error('Expected no more than one info window.');\n    }\n    this.infoWindow.forEach(marker => {\n      marker.hostMarker = this;\n    });\n  }\n\n  /** @internal */\n  ngOnChanges(changes: { [key: string]: SimpleChange }) {\n    if (typeof this.latitude === 'string') {\n      this.latitude = Number(this.latitude);\n    }\n    if (typeof this.longitude === 'string') {\n      this.longitude = Number(this.longitude);\n    }\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n    if (!this._markerAddedToManger) {\n      this._markerManager.addMarker(this);\n      this._updateFitBoundsDetails();\n      this._markerAddedToManger = true;\n      this._addEventListeners();\n      return;\n    }\n    if (changes['latitude'] || changes['longitude']) {\n      this._markerManager.updateMarkerPosition(this);\n      this._updateFitBoundsDetails();\n    }\n    if (changes['title']) {\n      this._markerManager.updateTitle(this);\n    }\n    if (changes['label']) {\n      this._markerManager.updateLabel(this);\n    }\n    if (changes['draggable']) {\n      this._markerManager.updateDraggable(this);\n    }\n    if (changes['iconUrl']) {\n      this._markerManager.updateIcon(this);\n    }\n    if (changes['opacity']) {\n      this._markerManager.updateOpacity(this);\n    }\n    if (changes['visible']) {\n      this._markerManager.updateVisible(this);\n    }\n    if (changes['zIndex']) {\n      this._markerManager.updateZIndex(this);\n    }\n    if (changes['clickable']) {\n      this._markerManager.updateClickable(this);\n    }\n    if (changes['animation']) {\n      this._markerManager.updateAnimation(this);\n    }\n  }\n\n  /** @internal */\n  getFitBoundsDetails$(): Observable<FitBoundsDetails> {\n    return this._fitBoundsDetails$.asObservable();\n  }\n\n  protected _updateFitBoundsDetails() {\n    this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\n  }\n\n  private _addEventListeners() {\n    const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\n      if (this.openInfoWindow) {\n        this.infoWindow.forEach(infoWindow => infoWindow.open());\n      }\n      this.markerClick.emit(this);\n    });\n    this._observableSubscriptions.push(cs);\n\n    const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {\n      this.markerDblClick.emit(null);\n    });\n    this._observableSubscriptions.push(dcs);\n\n    const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {\n      this.markerRightClick.emit(null);\n    });\n    this._observableSubscriptions.push(rc);\n\n    const ds =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('dragstart', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.dragStart.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(ds);\n\n    const d =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('drag', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.drag.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(d);\n\n    const de =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('dragend', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.dragEnd.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(de);\n\n    const mover =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('mouseover', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.mouseOver.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(mover);\n\n    const mout =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('mouseout', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.mouseOut.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(mout);\n\n    const anChng =\n      this._markerManager.createEventObservable<void>('animation_changed', this)\n        .subscribe(() => {\n          this.animationChange.emit(this.animation);\n        });\n    this._observableSubscriptions.push(anChng);\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'AgmMarker-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._markerManager.deleteMarker(this);\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n\nexport type Animation = 'BOUNCE' | 'DROP' | null;\n","import { AfterContentInit, Directive, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { LatLng, LatLngLiteral, PolygonOptions, PolyMouseEvent } from '../services/google-maps-types';\nimport { PolygonManager } from '../services/managers/polygon-manager';\nimport { MvcEventType } from '../utils/mvcarray-utils';\n\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: Array<LatLngLiteral> = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\n@Directive({\n  selector: 'agm-polygon',\n})\nexport class AgmPolygon implements OnDestroy, OnChanges, AfterContentInit {\n  /**\n   * Indicates whether this Polygon handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this shape over the map. The geodesic\n   * property defines the mode of dragging. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('polyDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this shape by dragging the control\n   * points shown at the vertices and on each segment. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended\n   * named colors.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * When true, edges of the polygon are interpreted as geodesic and will\n   * follow the curvature of the Earth. When false, edges of the polygon are\n   * rendered as straight lines in screen space. Note that the shape of a\n   * geodesic polygon may appear to change when dragged, as the dimensions\n   * are maintained relative to the surface of the earth. Defaults to false.\n   */\n  @Input() geodesic = false;\n\n  /**\n   * The ordered sequence of coordinates that designates a closed loop.\n   * Unlike polylines, a polygon may consist of one or more paths.\n   *  As a result, the paths property may specify one or more arrays of\n   * LatLng coordinates. Paths are closed automatically; do not repeat the\n   * first vertex of the path as the last vertex. Simple polygons may be\n   * defined using a single array of LatLngs. More complex polygons may\n   * specify an array of arrays. Any simple arrays are converted into Arrays.\n   * Inserting or removing LatLngs from the Array will automatically update\n   * the polygon on the map.\n   */\n  @Input() paths: Array<LatLng | LatLngLiteral> | Array<Array<LatLng | LatLngLiteral>> = [];\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended\n   * named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight: number;\n\n  /**\n   * Whether this polygon is visible on the map. Defaults to true.\n   */\n  @Input() visible: boolean;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the DOM click event is fired on the Polygon.\n   */\n  @Output() polyClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM dblclick event is fired on the Polygon.\n   */\n  @Output() polyDblClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the polygon.\n   */\n  @Output() polyDrag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the polygon.\n   */\n  @Output() polyDragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the polygon.\n   */\n  @Output() polyDragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the Polygon.\n   */\n  @Output() polyMouseDown: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the Polygon.\n   */\n  @Output() polyMouseMove: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polygon mouseout.\n   */\n  @Output() polyMouseOut: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polygon mouseover.\n   */\n  @Output() polyMouseOver: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired whe the DOM mouseup event is fired on the Polygon\n   */\n  @Output() polyMouseUp: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the Polygon is right-clicked on.\n   */\n  @Output() polyRightClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired after Polygon first path changes.\n   */\n  @Output() polyPathsChange = new EventEmitter<PolygonPathEvent<any>>();\n\n  private static _polygonOptionsAttributes: Array<string> = [\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n    'editable', 'visible',\n  ];\n\n  private _id: string;\n  private _polygonAddedToManager = false;\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _polygonManager: PolygonManager) { }\n\n  /** @internal */\n  ngAfterContentInit() {\n    if (!this._polygonAddedToManager) {\n      this._init();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (!this._polygonAddedToManager) {\n      this._init();\n      return;\n    }\n\n    this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n  }\n\n  private _init() {\n    this._polygonManager.addPolygon(this);\n    this._polygonAddedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const handlers = [\n      { name: 'click', handler: (ev: PolyMouseEvent) => this.polyClick.emit(ev) },\n      { name: 'dblclick', handler: (ev: PolyMouseEvent) => this.polyDblClick.emit(ev) },\n      { name: 'drag', handler: (ev: MouseEvent) => this.polyDrag.emit(ev) },\n      { name: 'dragend', handler: (ev: MouseEvent) => this.polyDragEnd.emit(ev) },\n      { name: 'dragstart', handler: (ev: MouseEvent) => this.polyDragStart.emit(ev) },\n      { name: 'mousedown', handler: (ev: PolyMouseEvent) => this.polyMouseDown.emit(ev) },\n      { name: 'mousemove', handler: (ev: PolyMouseEvent) => this.polyMouseMove.emit(ev) },\n      { name: 'mouseout', handler: (ev: PolyMouseEvent) => this.polyMouseOut.emit(ev) },\n      { name: 'mouseover', handler: (ev: PolyMouseEvent) => this.polyMouseOver.emit(ev) },\n      { name: 'mouseup', handler: (ev: PolyMouseEvent) => this.polyMouseUp.emit(ev) },\n      { name: 'rightclick', handler: (ev: PolyMouseEvent) => this.polyRightClick.emit(ev) },\n    ];\n    handlers.forEach((obj) => {\n      const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n\n    this._polygonManager.createPathEventObservable(this)\n    .then(paths$ => {\n      const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));\n      this._subscriptions.push(os);\n    });\n  }\n\n  private _updatePolygonOptions(changes: SimpleChanges): PolygonOptions {\n    return Object.keys(changes)\n      .filter(k => AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1)\n      .reduce((obj: any, k: string) => {\n        obj[k] = changes[k].currentValue;\n        return obj;\n      }, {});\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._polygonManager.deletePolygon(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  getPath(): Promise<Array<LatLng>> {\n    return this._polygonManager.getPath(this);\n  }\n\n  getPaths(): Promise<Array<Array<LatLng>>> {\n    return this._polygonManager.getPaths(this);\n  }\n}\n\nexport interface PolygonPathEvent<T extends (LatLng | Array<LatLng>)> {\n  newArr: LatLng[][];\n  eventName: MvcEventType;\n  index: number;\n  previous?: T;\n}\n\nexport interface PathCollectionChangePolygonPathEvent extends PolygonPathEvent <Array<LatLng>>{\n}\n\nexport interface PathChangePolygonPathEvent extends PolygonPathEvent<LatLng> {\n  pathIndex: number;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\n\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n *\n * @export\n * @class AgmPolylineIcon\n */\n@Directive({selector: 'agm-polyline agm-icon-sequence'})\nexport class AgmPolylineIcon implements OnInit{\n\n  /**\n   * If `true`, each icon in the sequence has the same fixed rotation regardless of the\n   * angle of the edge on which it lies. Defaults to `false`, in which case each icon\n   * in the sequence is rotated to align with its edge.\n   *\n   * @type {boolean}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() fixedRotation: boolean;\n\n  /**\n   * The distance from the start of the line at which an icon is to be rendered. This\n   * distance may be expressed as a percentage of line's length (e.g. '50%') or in pixels\n   * (e.g. '50px'). Defaults to '100%'.\n   *\n   * @type {string}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() offset: string;\n\n  /**\n   * The distance between consecutive icons on the line. This distance may be expressed as\n   * a percentage of the line's length (e.g. '50%') or in pixels (e.g. '50px'). To disable\n   * repeating of the icon, specify '0'. Defaults to '0'.\n   *\n   * @type {string}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() repeat: string;\n\n  /**\n   * The x coordinate of the position of the symbol relative to the polyline. The coordinate\n   * of the symbol's path is translated _left_ by the anchor's x coordinate. By default, a\n   * symbol is anchored at (0, 0). The position is expressed in the same coordinate system as the\n   * symbol's path.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() anchorX: number;\n\n  /**\n   * The y coordinate of the position of the symbol relative to the polyline. The coordinate\n   * of the symbol's path is translated _up_ by the anchor's y coordinate. By default, a\n   * symbol is anchored at (0, 0). The position is expressed in the same coordinate system as the\n   * symbol's path.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() anchorY: number;\n\n  /**\n   * The symbol's fill color. All CSS3 colors are supported except for extended named\n   * colors. Defaults to the stroke color of the corresponding polyline.\n   *\n   * @type {string}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The symbol's fill opacity. Defaults to 0.\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * The symbol's path, which is a built-in symbol path, or a custom path expressed using\n   * SVG path notation. Required.\n   *\n   * @type {SymbolPath}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() path: 'CIRCLE' | 'BACKWARD_CLOSED_ARROW' | 'BACKWARD_OPEN_ARROW' | 'FORWARD_CLOSED_ARROW' |\n        'FORWARD_OPEN_ARROW' | string;\n\n  /**\n   * The angle by which to rotate the symbol, expressed clockwise in degrees.\n   * Defaults to 0. A symbol where `fixedRotation` is `false` is rotated relative to\n   * the angle of the edge on which it lies.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() rotation: number;\n\n  /**\n   * The amount by which the symbol is scaled in size. Defaults to the stroke weight\n   * of the polyline; after scaling, the symbol must lie inside a square 22 pixels in\n   * size centered at the symbol's anchor.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() scale: number;\n\n  /**\n   * The symbol's stroke color. All CSS3 colors are supported except for extended named\n   * colors. Defaults to the stroke color of the polyline.\n   *\n   * @type {string}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The symbol's stroke opacity. Defaults to the stroke opacity of the polyline.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The symbol's stroke weight. Defaults to the scale of the symbol.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() strokeWeight: number;\n\n  ngOnInit(): void {\n    if (this.path == null) {\n      throw new Error('Icon Sequence path is required');\n    }\n  }\n}\n","import { Directive, EventEmitter, forwardRef, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { LatLngLiteral } from '../../core/services/google-maps-types';\nimport { FitBoundsAccessor, FitBoundsDetails } from '../services/fit-bounds';\n\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\n@Directive({\n  selector: 'agm-polyline-point',\n  providers: [\n    {provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint)},\n  ],\n})\nexport class AgmPolylinePoint implements OnChanges, FitBoundsAccessor {\n  /**\n   * The latitude position of the point.\n   */\n  @Input() public latitude: number;\n\n  /**\n   * The longitude position of the point;\n   */\n  @Input() public longitude: number;\n\n  /**\n   * This event emitter gets emitted when the position of the point changed.\n   */\n  @Output() positionChanged: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n\n  constructor() {}\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (changes['latitude'] || changes['longitude']) {\n      const position: LatLngLiteral = {\n        lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n        lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude,\n      } as LatLngLiteral;\n      this.positionChanged.emit(position);\n    }\n  }\n\n  /** @internal */\n  getFitBoundsDetails$(): Observable<FitBoundsDetails> {\n    return this.positionChanged.pipe(\n      startWith({lat: this.latitude, lng: this.longitude}),\n      map(position => ({latLng: position}))\n    );\n  }\n}\n","import { AfterContentInit, ContentChildren, Directive, EventEmitter, Input, OnChanges, OnDestroy, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { LatLng, PolyMouseEvent } from '../services/google-maps-types';\nimport { PolylineManager } from '../services/managers/polyline-manager';\nimport { AgmPolylineIcon } from './polyline-icon';\nimport { AgmPolylinePoint } from './polyline-point';\n\nlet polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Directive({\n  selector: 'agm-polyline',\n})\nexport class AgmPolyline implements OnDestroy, OnChanges, AfterContentInit {\n  /**\n   * Indicates whether this Polyline handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this shape over the map. The geodesic property defines the\n   * mode of dragging. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('polylineDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this shape by dragging the control points shown at the\n   * vertices and on each segment. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n   * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n   * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n   * are maintained relative to the surface of the earth. Defaults to false.\n   */\n  @Input() geodesic = false;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0.\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight: number;\n\n  /**\n   * Whether this polyline is visible on the map. Defaults to true.\n   */\n  @Input() visible = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the DOM click event is fired on the Polyline.\n   */\n  @Output() lineClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM dblclick event is fired on the Polyline.\n   */\n  @Output() lineDblClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the polyline.\n   */\n  @Output() lineDrag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the polyline.\n   */\n  @Output() lineDragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the polyline.\n   */\n  @Output() lineDragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the Polyline.\n   */\n  @Output() lineMouseDown: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the Polyline.\n   */\n  @Output() lineMouseMove: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polyline mouseout.\n   */\n  @Output() lineMouseOut: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polyline mouseover.\n   */\n  @Output() lineMouseOver: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired whe the DOM mouseup event is fired on the Polyline\n   */\n  @Output() lineMouseUp: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the Polyline is right-clicked on.\n   */\n  @Output() lineRightClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired after Polyline's path changes.\n   */\n  @Output() polyPathChange = new EventEmitter<PathEvent>();\n\n  /**\n   * @internal\n   */\n  @ContentChildren(AgmPolylinePoint) points: QueryList<AgmPolylinePoint>;\n\n  @ContentChildren(AgmPolylineIcon) iconSequences: QueryList<AgmPolylineIcon>;\n\n  private static _polylineOptionsAttributes: Array<string> = [\n    'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\n    'zIndex',\n  ];\n\n  private _id: string;\n  private _polylineAddedToManager = false;\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _polylineManager: PolylineManager) { this._id = (polylineId++).toString(); }\n\n  /** @internal */\n  ngAfterContentInit() {\n    if (this.points.length) {\n      this.points.forEach((point: AgmPolylinePoint) => {\n        const s = point.positionChanged.subscribe(\n            () => { this._polylineManager.updatePolylinePoints(this); });\n        this._subscriptions.push(s);\n      });\n    }\n    if (!this._polylineAddedToManager) {\n      this._init();\n    }\n    const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));\n    this._subscriptions.push(pointSub);\n    this._polylineManager.updatePolylinePoints(this);\n\n    const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));\n    this._subscriptions.push(iconSub);\n  }\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (!this._polylineAddedToManager) {\n      this._init();\n      return;\n    }\n\n    let options: {[propName: string]: any} = {};\n    const optionKeys = Object.keys(changes).filter(\n        k => AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach(k => options[k] = changes[k].currentValue);\n    this._polylineManager.setPolylineOptions(this, options);\n  }\n\n  getPath(): Promise<Array<LatLng>> {\n    return this._polylineManager.getPath(this);\n  }\n\n  private _init() {\n    this._polylineManager.addPolyline(this);\n    this._polylineAddedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const handlers = [\n      {name: 'click', handler: (ev: PolyMouseEvent) => this.lineClick.emit(ev)},\n      {name: 'dblclick', handler: (ev: PolyMouseEvent) => this.lineDblClick.emit(ev)},\n      {name: 'drag', handler: (ev: MouseEvent) => this.lineDrag.emit(ev)},\n      {name: 'dragend', handler: (ev: MouseEvent) => this.lineDragEnd.emit(ev)},\n      {name: 'dragstart', handler: (ev: MouseEvent) => this.lineDragStart.emit(ev)},\n      {name: 'mousedown', handler: (ev: PolyMouseEvent) => this.lineMouseDown.emit(ev)},\n      {name: 'mousemove', handler: (ev: PolyMouseEvent) => this.lineMouseMove.emit(ev)},\n      {name: 'mouseout', handler: (ev: PolyMouseEvent) => this.lineMouseOut.emit(ev)},\n      {name: 'mouseover', handler: (ev: PolyMouseEvent) => this.lineMouseOver.emit(ev)},\n      {name: 'mouseup', handler: (ev: PolyMouseEvent) => this.lineMouseUp.emit(ev)},\n      {name: 'rightclick', handler: (ev: PolyMouseEvent) => this.lineRightClick.emit(ev)},\n    ];\n    handlers.forEach((obj) => {\n      const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n\n    this._polylineManager.createPathEventObservable(this).then((ob$) => {\n      const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));\n      this._subscriptions.push(os);\n    });\n  }\n\n  /** @internal */\n  _getPoints(): Array<AgmPolylinePoint> {\n    if (this.points) {\n      return this.points.toArray();\n    }\n    return [];\n  }\n\n  _getIcons(): Array<AgmPolylineIcon> {\n    if (this.iconSequences) {\n      return this.iconSequences.toArray();\n    }\n    return [];\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._polylineManager.deletePolyline(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n\nexport interface PathEvent {\n  newArr: LatLng[];\n  evName: 'insert_at' | 'remove_at' | 'set_at';\n  index: number;\n  previous?: LatLng;\n}\n","import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChange,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { MouseEvent } from '../map-types';\nimport {\n  LatLngBounds,\n  LatLngBoundsLiteral,\n  MouseEvent as MapMouseEvent,\n} from '../services/google-maps-types';\nimport { RectangleManager } from '../services/managers/rectangle-manager';\n\n@Directive({\n  selector: 'agm-rectangle',\n})\nexport class AgmRectangle implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The north position of the rectangle (required).\n   */\n  @Input() north: number;\n\n  /**\n   * The east position of the rectangle (required).\n   */\n  @Input() east: number;\n\n  /**\n   * The south position of the rectangle (required).\n   */\n  @Input() south: number;\n\n  /**\n   * The west position of the rectangle (required).\n   */\n  @Input() west: number;\n\n  /**\n   * Indicates whether this Rectangle handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this rectangle over the map. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('rectangleDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this rectangle by dragging the control points shown at\n   * the center and around the circumference of the rectangle. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0.\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke position. Defaults to CENTER.\n   * This property is not supported on Internet Explorer 8 and earlier.\n   */\n  @Input() strokePosition: 'CENTER' | 'INSIDE' | 'OUTSIDE' = 'CENTER';\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight = 0;\n\n  /**\n   * Whether this rectangle is visible on the map. Defaults to true.\n   */\n  @Input() visible = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the rectangle's is changed.\n   */\n  @Output()\n  boundsChange: EventEmitter<LatLngBoundsLiteral> = new EventEmitter<\n    LatLngBoundsLiteral\n  >();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the rectangle.\n   */\n  @Output()\n  rectangleClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the rectangle.\n   */\n  @Output()\n  rectangleDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the rectangle.\n   */\n  @Output() drag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the rectangle.\n   */\n  @Output() dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the rectangle.\n   */\n  @Output()\n  dragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the rectangle.\n   */\n  @Output()\n  mouseDown: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the rectangle.\n   */\n  @Output()\n  mouseMove: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on rectangle mouseout.\n   */\n  @Output() mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on rectangle mouseover.\n   */\n  @Output()\n  mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mouseup event is fired on the rectangle.\n   */\n  @Output() mouseUp: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the rectangle is right-clicked on.\n   */\n  @Output()\n  rightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  private _rectangleAddedToManager = false;\n\n  private static _mapOptions: string[] = [\n    'fillColor',\n    'fillOpacity',\n    'strokeColor',\n    'strokeOpacity',\n    'strokePosition',\n    'strokeWeight',\n    'visible',\n    'zIndex',\n    'clickable',\n  ];\n\n  private _eventSubscriptions: Subscription[] = [];\n\n  constructor(private _manager: RectangleManager) {}\n\n  /** @internal */\n  ngOnInit() {\n    this._manager.addRectangle(this);\n    this._rectangleAddedToManager = true;\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: { [key: string]: SimpleChange }) {\n    if (!this._rectangleAddedToManager) {\n      return;\n    }\n    if (\n      changes['north'] ||\n      changes['east'] ||\n      changes['south'] ||\n      changes['west']\n    ) {\n      this._manager.setBounds(this);\n    }\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    }\n    this._updateRectangleOptionsChanges(changes);\n  }\n\n  private _updateRectangleOptionsChanges(changes: {\n    [propName: string]: SimpleChange;\n  }) {\n    let options: { [propName: string]: any } = {};\n    let optionKeys = Object.keys(changes).filter(\n      k => AgmRectangle._mapOptions.indexOf(k) !== -1,\n    );\n    optionKeys.forEach(k => {\n      options[k] = changes[k].currentValue;\n    });\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _registerEventListeners() {\n    let events: Map<string, EventEmitter<any>> = new Map<\n      string,\n      EventEmitter<any>\n    >();\n    events.set('bounds_changed', this.boundsChange);\n    events.set('click', this.rectangleClick);\n    events.set('dblclick', this.rectangleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragStart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('rightclick', this.rightClick);\n\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(\n        this._manager\n          .createEventObservable<MapMouseEvent>(eventName, this)\n          .subscribe(value => {\n            switch (eventName) {\n              case 'bounds_changed':\n                this._manager.getBounds(this).then(bounds =>\n                  eventEmitter.emit({\n                    north: bounds.getNorthEast().lat(),\n                    east: bounds.getNorthEast().lng(),\n                    south: bounds.getSouthWest().lat(),\n                    west: bounds.getSouthWest().lng(),\n                  } as LatLngBoundsLiteral),\n                );\n                break;\n              default:\n                eventEmitter.emit({\n                  coords: { lat: value.latLng.lat(), lng: value.latLng.lng() },\n                } as MouseEvent);\n            }\n          }),\n      );\n    });\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(function(s: Subscription) {\n      s.unsubscribe();\n    });\n    this._eventSubscriptions = null;\n    this._manager.removeRectangle(this);\n  }\n\n  /**\n   * Gets the LatLngBounds of this Rectangle.\n   */\n  getBounds(): Promise<LatLngBounds> {\n    return this._manager.getBounds(this);\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { LayerManager } from '../services/managers/layer-manager';\n\nlet layerId = 0;\n\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\n@Directive({\n    selector: 'agm-transit-layer',\n})\n\nexport class AgmTransitLayer implements OnInit, OnChanges, OnDestroy{\n    private _addedToManager = false;\n    private _id: string = (layerId++).toString();\n\n    /**\n     * Hide/show transit layer\n     */\n    @Input() visible = true;\n\n    constructor( private _manager: LayerManager ) {}\n\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addTransitLayer(this, {visible: this.visible});\n        this._addedToManager = true;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, {visible: changes['visible'].currentValue});\n        }\n    }\n\n    /** @internal */\n    id(): string { return this._id; }\n\n    /** @internal */\n    toString(): string { return `AgmTransitLayer-${this._id.toString()}`; }\n\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n\n}\n","export var google: any;\n\nexport interface MVCObject {\n  addListener(eventName: string, handler: Function): MapsEventListener;\n}\n\nexport interface MVCArray<T> extends MVCObject {\n  clear(): void;\n  getArray(): Array<T>;\n  getAt(i: number): T;\n  getLength(): number;\n  insertAt(i: number, elem: T): void;\n  pop(): T;\n  push(elem: T): number;\n  removeAt(i: number): T;\n  setAt(i: number, elem: T): void;\n  /* tslint:disable */\n  /*\n  * Tslint configuration check-parameters will prompt errors for these lines of code.\n  * https://palantir.github.io/tslint/rules/no-unused-variable/\n  */\n  forEach(callback: (elem: T, i: number) => void): void;\n  /* tslint:enable */\n}\n\nexport interface GoogleMap extends MVCObject {\n  data?: Data;\n  panTo(latLng: LatLng | LatLngLiteral): void;\n  panBy(x: number, y: number): void;\n  setZoom(zoom: number): void;\n  getCenter(): LatLng;\n  setCenter(latLng: LatLng | LatLngLiteral): void;\n  getBounds(): LatLngBounds;\n  getMapTypeId(): MapTypeId;\n  getZoom(): number;\n  setOptions(options: MapOptions): void;\n  panToBounds(latLngBounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding): void;\n  fitBounds(bounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding): void;\n}\n\nexport interface LatLng {\n  lat(): number;\n  lng(): number;\n  toJSON(): any;\n  toString(): string;\n}\n\nexport interface Marker extends MVCObject {\n  setMap(map: GoogleMap): void;\n  setPosition(latLng: LatLng | LatLngLiteral): void;\n  setTitle(title: string): void;\n  setLabel(label: string | MarkerLabel): void;\n  setDraggable(draggable: boolean): void;\n  setIcon(icon: string): void;\n  setOpacity(opacity: number): void;\n  setVisible(visible: boolean): void;\n  setZIndex(zIndex: number): void;\n  setAnimation(animation: any): void;\n  getLabel(): MarkerLabel;\n  setClickable(clickable: boolean): void;\n}\n\nexport interface MarkerOptions {\n  position: LatLng | LatLngLiteral;\n  title?: string;\n  map?: GoogleMap;\n  label?: string | MarkerLabel;\n  draggable?: boolean;\n  icon?: string;\n  opacity?: number;\n  visible?: boolean;\n  zIndex?: number;\n  clickable: boolean;\n  animation?: any;\n}\n\nexport interface MarkerLabel {\n  color: string;\n  fontFamily: string;\n  fontSize: string;\n  fontWeight: string;\n  text: string;\n}\n\nexport interface Circle extends MVCObject {\n  getBounds(): LatLngBounds;\n  getCenter(): LatLng;\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getRadius(): number;\n  getVisible(): boolean;\n  setCenter(center: LatLng | LatLngLiteral): void;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: CircleOptions): void;\n  setRadius(radius: number): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface CircleOptions {\n  center?: LatLng | LatLngLiteral;\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  map?: GoogleMap;\n  radius?: number;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokePosition?: 'CENTER' | 'INSIDE' | 'OUTSIDE';\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Rectangle extends MVCObject {\n  getBounds(): LatLngBounds;\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getVisible(): boolean;\n  setBounds(bounds: LatLngBounds | LatLngBoundsLiteral): void;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: RectangleOptions): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface RectangleOptions {\n  bounds?: LatLngBounds | LatLngBoundsLiteral;\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  map?: GoogleMap;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokePosition?: 'CENTER' | 'INSIDE' | 'OUTSIDE';\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface LatLngBounds {\n  contains(latLng: LatLng): boolean;\n  equals(other: LatLngBounds | LatLngBoundsLiteral): boolean;\n  extend(point: LatLng | LatLngLiteral): void;\n  getCenter(): LatLng;\n  getNorthEast(): LatLng;\n  getSouthWest(): LatLng;\n  intersects(other: LatLngBounds | LatLngBoundsLiteral): boolean;\n  isEmpty(): boolean;\n  toJSON(): LatLngBoundsLiteral;\n  toSpan(): LatLng;\n  toString(): string;\n  toUrlValue(precision?: number): string;\n  union(other: LatLngBounds | LatLngBoundsLiteral): LatLngBounds;\n}\n\nexport interface Padding {\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n}\n\nexport interface LatLngBoundsLiteral {\n  east: number;\n  north: number;\n  south: number;\n  west: number;\n}\n\nexport interface LatLngLiteral {\n  lat: number;\n  lng: number;\n}\n\nexport interface MouseEvent { latLng: LatLng; }\n\nexport interface MapOptions {\n  center?: LatLng | LatLngLiteral;\n  zoom?: number;\n  minZoom?: number;\n  maxZoom?: number;\n  controlSize?: number;\n  disableDoubleClickZoom?: boolean;\n  disableDefaultUI?: boolean;\n  scrollwheel?: boolean;\n  backgroundColor?: string;\n  draggable?: boolean;\n  draggableCursor?: string;\n  draggingCursor?: string;\n  keyboardShortcuts?: boolean;\n  styles?: MapTypeStyle[];\n  zoomControl?: boolean;\n  zoomControlOptions?: ZoomControlOptions;\n  streetViewControl?: boolean;\n  streetViewControlOptions?: StreetViewControlOptions;\n  scaleControl?: boolean;\n  scaleControlOptions?: ScaleControlOptions;\n  mapTypeControl?: boolean;\n  mapTypeControlOptions?: MapTypeControlOptions;\n  panControl?: boolean;\n  panControlOptions?: PanControlOptions;\n  rotateControl?: boolean;\n  rotateControlOptions?: RotateControlOptions;\n  fullscreenControl?: boolean;\n  fullscreenControlOptions?: FullscreenControlOptions;\n  mapTypeId?: string | MapTypeId;\n  clickableIcons?: boolean;\n  gestureHandling?: 'cooperative' | 'greedy' | 'none' | 'auto';\n  tilt?: number;\n  restriction?: MapRestriction;\n}\n\nexport interface MapTypeStyle {\n  elementType?: 'all' | 'geometry' | 'geometry.fill' | 'geometry.stroke' | 'labels' | 'labels.icon' |\n  'labels.text' | 'labels.text.fill' | 'labels.text.stroke';\n  featureType?: 'administrative' | 'administrative.country' | 'administrative.land_parcel' |\n  'administrative.locality' | 'administrative.neighborhood' | 'administrative.province' | 'all' |\n  'landscape' | 'landscape.man_made' | 'landscape.natural' | 'landscape.natural.landcover' |\n  'landscape.natural.terrain' | 'poi' | 'poi.attraction' | 'poi.business' | 'poi.government' |\n  'poi.medical' | 'poi.park' | 'poi.place_of_worship' | 'poi.school' | 'poi.sports_complex' | 'road' |\n  'road.arterial' | 'road.highway' | 'road.highway.controlled_access' | 'road.local' | 'transit' |\n  'transit.line' | 'transit.station' | 'transit.station.airport' | 'transit.station.bus' |\n  'transit.station.rail' | 'water';\n  stylers: MapTypeStyler[];\n}\n\n/**\n *  If more than one key is specified in a single MapTypeStyler, all but one will be ignored.\n */\nexport interface MapTypeStyler {\n  color?: string;\n  gamma?: number;\n  hue?: string;\n  invert_lightness?: boolean;\n  lightness?: number;\n  saturation?: number;\n  visibility?: string;\n  weight?: number;\n}\n\nexport interface InfoWindow extends MVCObject {\n  close(): void;\n  getContent(): string | Node;\n  getPosition(): LatLng;\n  getZIndex(): number;\n  open(map?: GoogleMap, anchor?: MVCObject): void;\n  setContent(content: string | Node): void;\n  setOptions(options: InfoWindowOptions): void;\n  setPosition(position: LatLng | LatLngLiteral): void;\n  setZIndex(zIndex: number): void;\n}\n\nexport interface MapsEventListener { remove(): void; }\n\nexport interface Size {\n  height: number;\n  width: number;\n  equals(other: Size): boolean;\n  toString(): string;\n}\n\nexport interface InfoWindowOptions {\n  content?: string | Node;\n  disableAutoPan?: boolean;\n  maxWidth?: number;\n  pixelOffset?: Size;\n  position?: LatLng | LatLngLiteral;\n  zIndex?: number;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n  equals(other: Point): boolean;\n  toString(): string;\n}\n\nexport interface GoogleSymbol {\n  anchor?: Point;\n  fillColor?: string;\n  fillOpacity?: number;\n  labelOrigin?: Point;\n  path?: string | SymbolPath;\n  rotation?: number;\n  scale?: number;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n}\n\nexport interface IconSequence {\n  fixedRotation?: boolean;\n  icon?: GoogleSymbol;\n  offset?: string;\n  repeat?: string;\n}\n\nexport enum SymbolPath {\n  BACKWARD_CLOSED_ARROW = 3,\n  BACKWARD_OPEN_ARROW = 4,\n  CIRCLE = 0,\n  FORWARD_CLOSED_ARROW = 1,\n  FORWARD_OPEN_ARROW = 2,\n}\n\nexport interface PolylineOptions {\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  geodesic?: boolean;\n  icons?: Array<IconSequence>;\n  map?: GoogleMap;\n  path?: Array<LatLng> | Array<LatLng | LatLngLiteral>;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Polyline extends MVCObject {\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getPath(): MVCArray<LatLng>;\n  getVisible(): boolean;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: PolylineOptions): void;\n  setPath(path: Array<LatLng | LatLngLiteral>): void;\n  setVisible(visible: boolean): void;\n}\n\n/**\n * PolyMouseEvent gets emitted when the user triggers mouse events on a polyline.\n */\nexport interface PolyMouseEvent extends MouseEvent {\n  edge: number;\n  path: number;\n  vertex: number;\n}\n\nexport interface PolygonOptions {\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  geodesic?: boolean;\n  icon?: Array<IconSequence>;\n  map?: GoogleMap;\n  paths?: Array<LatLng | LatLngLiteral> | Array<Array<LatLng | LatLngLiteral>>;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Polygon extends MVCObject {\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getPath(): MVCArray<LatLng>;\n  getPaths(): MVCArray<MVCArray<LatLng>>;\n  getVisible(): boolean;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setPath(path: Array<LatLng> | Array<LatLng | LatLngLiteral>): void;\n  setOptions(options: PolygonOptions): void;\n  setPaths(paths: Array<Array<LatLng | LatLngLiteral>> | Array<LatLng | LatLngLiteral>): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface KmlLayer extends MVCObject {\n  getDefaultViewport(): LatLngBounds;\n  getMap(): GoogleMap;\n  getMetadata(): KmlLayerMetadata;\n  getStatus(): KmlLayerStatus;\n  getUrl(): string;\n  getZIndex(): number;\n  setMap(map: GoogleMap): void;\n  setOptions(options: KmlLayerOptions): void;\n  setUrl(url: string): void;\n  setZIndex(zIndex: number): void;\n}\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerStatus\n */\nexport type KmlLayerStatus = 'DOCUMENT_NOT_FOUND' |\n  'DOCUMENT_TOO_LARGE' | 'FETCH_ERROR' | 'INVALID_DOCUMENT' | 'INVALID_REQUEST' |\n  'LIMITS_EXCEEDED' | 'OK' | 'TIMED_OUT' | 'UNKNOWN';\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerMetadata\n */\nexport interface KmlLayerMetadata {\n  author: KmlAuthor;\n  description: string;\n  hasScreenOverlays: boolean;\n  name: string;\n  snippet: string;\n}\n\nexport interface KmlAuthor {\n  email: string;\n  name: string;\n  uri: string;\n}\n\nexport interface KmlLayerOptions {\n  clickable?: boolean;\n  map?: GoogleMap;\n  preserveViewport?: boolean;\n  screenOverlays?: boolean;\n  suppressInfoWindows?: boolean;\n  url?: string;\n  zIndex?: number;\n}\n\nexport interface KmlFeatureData {\n  author: KmlAuthor;\n  description: string;\n  id: string;\n  infoWindowHtml: string;\n  name: string;\n  snippet: string;\n}\n\nexport interface KmlMouseEvent extends MouseEvent {\n  featureData: KmlFeatureData;\n  pixelOffset: Size;\n}\n\nexport interface TransitLayer extends MVCObject {\n  getMap(): GoogleMap;\n  setMap(map: GoogleMap): void;\n}\n\nexport interface TransitLayerOptions {\n  visible: boolean;\n}\n\nexport interface BicyclingLayer extends MVCObject {\n  getMap(): GoogleMap;\n  setMap(map: GoogleMap): void;\n}\n\nexport interface BicyclingLayerOptions {\n  visible: boolean;\n}\n\nexport interface Data extends MVCObject {\n  features: Feature[];\n  addGeoJson(geoJson: Object, options?: GeoJsonOptions): Feature[];\n  remove(feature: Feature): void;\n  setControlPosition(controlPosition: ControlPosition): void;\n  setControls(controls: string[]): void;\n  setDrawingMode(drawingMode: string): void;\n  setMap(map: GoogleMap): void;\n  /* tslint:disable */\n  /*\n  * Tslint configuration check-parameters will prompt errors for these lines of code.\n  * https://palantir.github.io/tslint/rules/no-unused-variable/\n  */\n  setStyle(style: () => void): void;\n  forEach(callback: (feature: Feature) => void): void;\n  loadGeoJson(url: string, options?: GeoJsonOptions, callback?: (feats: Feature[]) => void): void;\n  /* tslint:enable */\n}\n\nexport interface Feature extends MVCObject {\n  id?: number | string | undefined;\n  geometry: Geometry;\n  properties: any;\n}\n\nexport interface DataOptions {\n  controlPosition?: ControlPosition;\n  controls?: string[];\n  drawingMode?: string;\n  featureFactory?: (geometry: Geometry) => Feature;\n  map?: GoogleMap;\n  style?: () => void;\n}\n\nexport interface DataMouseEvent extends MouseEvent {\n  feature: Feature;\n}\n\nexport interface GeoJsonOptions {\n  idPropertyName: string;\n}\n\nexport interface Geometry {\n  type: string;\n}\n\n/**\n * Identifiers used to specify the placement of controls on the map. Controls are\n * positioned relative to other controls in the same layout position. Controls that\n * are added first are positioned closer to the edge of the map.\n */\nexport enum ControlPosition {\n  RIGHT_BOTTOM,\n  TOP_LEFT,\n  TOP_CENTER,\n  TOP_RIGHT,\n  LEFT_CENTER,\n  LEFT_TOP,\n  LEFT_BOTTOM,\n  RIGHT_TOP,\n  RIGHT_CENTER,\n  BOTTOM_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_CENTER,\n}\n\nexport enum MapTypeId {\n  /** This map type displays a transparent layer of major streets on satellite images. */\n  HYBRID,\n  /** This map type displays a normal street map. */\n  ROADMAP,\n  /** This map type displays satellite images. */\n  SATELLITE,\n  /** This map type displays maps with physical features such as terrain and vegetation. */\n  TERRAIN,\n}\n\n/***** Controls *****/\n/** Options for the rendering of the map type control. */\nexport interface MapTypeControlOptions {\n  /** IDs of map types to show in the control. */\n  mapTypeIds?: (MapTypeId | string)[];\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_RIGHT.\n   */\n  position?: ControlPosition;\n  /** Style id. Used to select what style of map type control to display. */\n  style?: MapTypeControlStyle;\n}\n\nexport enum MapTypeControlStyle {\n  DEFAULT = 0,\n  DROPDOWN_MENU = 2,\n  HORIZONTAL_BAR = 1,\n}\n\nexport interface OverviewMapControlOptions {\n  opened?: boolean;\n}\n\n/** Options for the rendering of the pan control. */\nexport interface PanControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the rendering of the rotate control. */\nexport interface RotateControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the rendering of the scale control. */\nexport interface ScaleControlOptions {\n  /** Style id. Used to select what style of scale control to display. */\n  style?: ScaleControlStyle;\n}\n\nexport enum ScaleControlStyle {\n  DEFAULT,\n}\n\n/** Options for the rendering of the Street View pegman control on the map. */\nexport interface StreetViewControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map. The\n   * default position is embedded within the navigation (zoom and pan) controls.\n   * If this position is empty or the same as that specified in the\n   * zoomControlOptions or panControlOptions, the Street View control will be\n   * displayed as part of the navigation controls. Otherwise, it will be displayed\n   * separately.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the rendering of the zoom control. */\nexport interface ZoomControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: ControlPosition;\n  style?: ZoomControlStyle;\n}\n\nexport enum ZoomControlStyle {\n  DEFAULT,\n  LARGE,\n  SMALL,\n}\n\n/** Options for the rendering of the fullscreen control. */\nexport interface FullscreenControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is RIGHT_TOP.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the restricting the bounds of the map. */\nexport interface MapRestriction {\n  latLngBounds: LatLngBounds | LatLngBoundsLiteral;\n  strictBounds?: boolean;\n}\n\nexport interface Geocoder {\n  geocode: (request: GeocoderRequest, googleCallback: (results: GeocoderResult[], status: GeocoderStatus) => void) => void;\n}\n\nexport interface GeocoderAddressComponent {\n  long_name: string;\n  short_name: string;\n  types: string[];\n}\n\n/** Options for restricting the geocoder results */\nexport interface GeocoderComponentRestrictions {\n  administrativeArea?: string;\n  country?: string;\n  locality?: string;\n  postalCode?: string;\n  route?: string;\n}\n\nexport interface GeocoderGeometry {\n  bounds: LatLngBounds;\n  location: LatLng;\n  location_type: GeocoderLocationType;\n  viewport: LatLngBounds;\n}\n\nexport enum GeocoderLocationType {\n  APPROXIMATE = 'APPROXIMATE',\n  GEOMETRIC_CENTER = 'GEOMETRIC_CENTER',\n  RANGE_INTERPOLATED = 'RANGE_INTERPOLATED',\n  ROOFTOP = 'ROOFTOP',\n}\n\nexport interface GeocoderRequest {\n  address?: string;\n  bounds?: LatLngBounds | LatLngBoundsLiteral;\n  componentRestrictions?: GeocoderComponentRestrictions;\n  location?: LatLng | LatLngLiteral;\n  placeId?: string;\n  region?: string;\n}\n\nexport interface GeocoderResult {\n  address_components: GeocoderAddressComponent[];\n  formatted_address: string;\n  geometry: GeocoderGeometry;\n  partial_match: boolean;\n  place_id: string;\n  postcode_localities: string[];\n  types: string[];\n}\n\nexport enum GeocoderStatus {\n  ERROR = 'ERROR',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  OK = 'OK',\n  OVER_QUERY_LIMIT = 'OVER_QUERY_LIMIT',\n  REQUEST_DENIED = 'REQUEST_DENIED',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n  ZERO_RESULTS = 'ZERO_RESULTS',\n}\n","import { Injectable } from '@angular/core';\nimport { bindCallback, ConnectableObservable, Observable, of, ReplaySubject, throwError } from 'rxjs';\nimport { map, multicast, switchMap } from 'rxjs/operators';\nimport { Geocoder, GeocoderRequest, GeocoderResult, GeocoderStatus } from './google-maps-types';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n\ndeclare var google: any;\n\n@Injectable({ providedIn: 'root' })\nexport class AgmGeocoder {\n  protected readonly geocoder$: Observable<Geocoder>;\n\n  constructor(loader: MapsAPILoader) {\n    const connectableGeocoder$ = new Observable(subscriber => {\n      loader.load().then(() => subscriber.next());\n    })\n      .pipe(\n        map(() => this._createGeocoder()),\n        multicast(new ReplaySubject(1)),\n      ) as ConnectableObservable<Geocoder>;\n\n    connectableGeocoder$.connect(); // ignore the subscription\n    // since we will remain subscribed till application exits\n\n    this.geocoder$ = connectableGeocoder$;\n  }\n\n  geocode(request: GeocoderRequest): Observable<GeocoderResult[]> {\n    return this.geocoder$.pipe(\n      switchMap((geocoder) => this._getGoogleResults(geocoder, request))\n    );\n  }\n\n  private _getGoogleResults(geocoder: Geocoder, request: GeocoderRequest): Observable<GeocoderResult[]> {\n    const geocodeObservable = bindCallback(geocoder.geocode);\n    return geocodeObservable(request).pipe(\n      switchMap(([results, status]) => {\n        if (status === GeocoderStatus.OK) {\n          return of(results);\n        }\n\n        return throwError(status);\n      })\n    );\n  }\n\n  private _createGeocoder(): Geocoder {\n    return new google.maps.Geocoder() as Geocoder;\n  }\n}\n","import { Provider } from '@angular/core';\n\nexport class WindowRef {\n  getNativeWindow(): any { return window; }\n}\n\nexport class DocumentRef {\n  getNativeDocument(): any { return document; }\n}\n\nexport const BROWSER_GLOBALS_PROVIDERS: Provider[] = [WindowRef, DocumentRef];\n","import { Inject, Injectable, InjectionToken, LOCALE_ID, Optional } from '@angular/core';\n\nimport { DocumentRef, WindowRef } from '../../utils/browser-globals';\n\nimport { MapsAPILoader } from './maps-api-loader';\n\nexport enum GoogleMapsScriptProtocol {\n  HTTP = 1,\n  HTTPS = 2,\n  AUTO = 3,\n}\n\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nexport const LAZY_MAPS_API_CONFIG = new InjectionToken<LazyMapsAPILoaderConfigLiteral>('angular-google-maps LAZY_MAPS_API_CONFIG');\n\n/**\n * Configuration for the {@link LazyMapsAPILoader}.\n */\nexport interface LazyMapsAPILoaderConfigLiteral {\n  /**\n   * The Google Maps API Key (see:\n   * https://developers.google.com/maps/documentation/javascript/get-api-key)\n   */\n  apiKey?: string;\n\n  /**\n   * The Google Maps client ID (for premium plans).\n   * When you have a Google Maps APIs Premium Plan license, you must authenticate\n   * your application with either an API key or a client ID.\n   * The Google Maps API will fail to load if both a client ID and an API key are included.\n   */\n  clientId?: string;\n\n  /**\n   * The Google Maps channel name (for premium plans).\n   * A channel parameter is an optional parameter that allows you to track usage under your client\n   * ID by assigning a distinct channel to each of your applications.\n   */\n  channel?: string;\n\n  /**\n   * Google Maps API version.\n   */\n  apiVersion?: string;\n\n  /**\n   * Host and Path used for the `<script>` tag.\n   */\n  hostAndPath?: string;\n\n  /**\n   * Protocol used for the `<script>` tag.\n   */\n  protocol?: GoogleMapsScriptProtocol;\n\n  /**\n   * Defines which Google Maps libraries should get loaded.\n   */\n  libraries?: string[];\n\n  /**\n   * The default bias for the map behavior is US.\n   * If you wish to alter your application to serve different map tiles or bias the\n   * application, you can overwrite the default behavior (US) by defining a `region`.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Region\n   */\n  region?: string;\n\n  /**\n   * The Google Maps API uses the browser's preferred language when displaying\n   * textual information. If you wish to overwrite this behavior and force the API\n   * to use a given language, you can use this setting.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Language\n   */\n  language?: string;\n}\n\n@Injectable()\nexport class LazyMapsAPILoader extends MapsAPILoader {\n  protected _scriptLoadingPromise: Promise<void>;\n  protected _config: LazyMapsAPILoaderConfigLiteral;\n  protected _windowRef: WindowRef;\n  protected _documentRef: DocumentRef;\n  protected readonly _SCRIPT_ID: string = 'agmGoogleMapsApiScript';\n  protected readonly callbackName: string = `agmLazyMapsAPILoader`;\n\n  constructor(@Optional() @Inject(LAZY_MAPS_API_CONFIG) config: any = null, w: WindowRef, d: DocumentRef,\n   @Inject(LOCALE_ID) private localeId: string) {\n    super();\n    this._config = config || {};\n    this._windowRef = w;\n    this._documentRef = d;\n  }\n\n  load(): Promise<void> {\n    const window = this._windowRef.getNativeWindow() as any;\n    if (window.google && window.google.maps) {\n      // Google maps already loaded on the page.\n      return Promise.resolve();\n    }\n\n    if (this._scriptLoadingPromise) {\n      return this._scriptLoadingPromise;\n    }\n\n    // this can happen in HMR situations or Stackblitz.io editors.\n    const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n    if (scriptOnPage) {\n      this._assignScriptLoadingPromise(scriptOnPage);\n      return this._scriptLoadingPromise;\n    }\n\n    const script = this._documentRef.getNativeDocument().createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    script.id = this._SCRIPT_ID;\n    script.src = this._getScriptSrc(this.callbackName);\n    this._assignScriptLoadingPromise(script);\n    this._documentRef.getNativeDocument().body.appendChild(script);\n    return this._scriptLoadingPromise;\n  }\n\n  private _assignScriptLoadingPromise(scriptElem: HTMLElement) {\n    this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\n      (this._windowRef.getNativeWindow() as any)[this.callbackName] = () => {\n        resolve();\n      };\n\n      scriptElem.onerror = (error: Event) => {\n        reject(error);\n      };\n    });\n  }\n\n  protected _getScriptSrc(callbackName: string): string {\n    let protocolType: GoogleMapsScriptProtocol =\n        (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\n    let protocol: string;\n\n    switch (protocolType) {\n      case GoogleMapsScriptProtocol.AUTO:\n        protocol = '';\n        break;\n      case GoogleMapsScriptProtocol.HTTP:\n        protocol = 'http:';\n        break;\n      case GoogleMapsScriptProtocol.HTTPS:\n        protocol = 'https:';\n        break;\n    }\n\n    const hostAndPath: string = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n    const queryParams: {[key: string]: string | Array<string>} = {\n      v: this._config.apiVersion || 'quarterly',\n      callback: callbackName,\n      key: this._config.apiKey,\n      client: this._config.clientId,\n      channel: this._config.channel,\n      libraries: this._config.libraries,\n      region: this._config.region,\n      language: this._config.language || this.localeId !== 'en-US' ? this.localeId : null,\n    };\n    const params: string = Object.keys(queryParams)\n                               .filter((k: string) => queryParams[k] != null)\n                               .filter((k: string) => {\n                                 // remove empty arrays\n                                 return !Array.isArray(queryParams[k]) ||\n                                     (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n                               })\n                               .map((k: string) => {\n                                 // join arrays as comma seperated strings\n                                 let i = queryParams[k];\n                                 if (Array.isArray(i)) {\n                                   return {key: k, value: i.join(',')};\n                                 }\n                                 return {key: k, value: queryParams[k]};\n                               })\n                               .map((entry: {key: string, value: string}) => {\n                                 return `${entry.key}=${entry.value}`;\n                               })\n                               .join('&');\n    return `${protocol}//${hostAndPath}?${params}`;\n  }\n}\n","import { MapsAPILoader } from './maps-api-loader';\n\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\nexport class NoOpMapsAPILoader implements MapsAPILoader {\n  load(): Promise<void> {\n    if (!(window as any).google || !(window as any).google.maps) {\n      throw new Error(\n          'Google Maps API not loaded on page. Make sure window.google.maps is available!');\n    }\n    return Promise.resolve();\n  }\n}\n","import { LatLngLiteral } from './services/google-maps-types';\n\n// exported map types\nexport {\n  KmlMouseEvent,\n  DataMouseEvent,\n  LatLngBounds,\n  LatLngBoundsLiteral,\n  LatLng,\n  LatLngLiteral,\n  PolyMouseEvent,\n  MarkerLabel,\n  Geocoder,\n  GeocoderAddressComponent,\n  GeocoderComponentRestrictions,\n  GeocoderGeometry,\n  GeocoderLocationType,\n  GeocoderRequest,\n  GeocoderResult,\n  GeocoderStatus,\n  MapTypeStyle,\n  Padding,\n  ControlPosition,\n  OverviewMapControlOptions,\n  PanControlOptions,\n  RotateControlOptions,\n  MapTypeControlOptions,\n  MapTypeId,\n  ScaleControlOptions,\n  ScaleControlStyle,\n  StreetViewControlOptions,\n  ZoomControlOptions,\n  ZoomControlStyle,\n  FullscreenControlOptions,\n  CircleOptions,\n  Circle,\n  Polyline,\n  PolylineOptions,\n  Polygon,\n  PolygonOptions,\n  Rectangle,\n  RectangleOptions,\n  Marker,\n  MarkerOptions,\n} from './services/google-maps-types';\n\n/**\n * MouseEvent gets emitted when the user triggers mouse events on the map.\n */\nexport interface MouseEvent {\n  coords: LatLngLiteral;\n  placeId?: string;\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { AgmBicyclingLayer } from './directives/bicycling-layer';\nimport { AgmCircle } from './directives/circle';\nimport { AgmDataLayer } from './directives/data-layer';\nimport { AgmFitBounds } from './directives/fit-bounds';\nimport { AgmInfoWindow } from './directives/info-window';\nimport { AgmKmlLayer } from './directives/kml-layer';\nimport { AgmMap } from './directives/map';\nimport { AgmMarker } from './directives/marker';\nimport { AgmPolygon } from './directives/polygon';\nimport { AgmPolyline } from './directives/polyline';\nimport { AgmPolylineIcon } from './directives/polyline-icon';\nimport { AgmPolylinePoint } from './directives/polyline-point';\nimport { AgmRectangle } from './directives/rectangle';\nimport { AgmTransitLayer } from './directives/transit-layer';\n\nimport { LAZY_MAPS_API_CONFIG, LazyMapsAPILoader, LazyMapsAPILoaderConfigLiteral } from './services/maps-api-loader/lazy-maps-api-loader';\nimport { MapsAPILoader } from './services/maps-api-loader/maps-api-loader';\n\nimport { BROWSER_GLOBALS_PROVIDERS } from './utils/browser-globals';\n\n/**\n * @internal\n */\nexport function coreDirectives() {\n  return [\n    AgmBicyclingLayer,\n    AgmCircle,\n    AgmDataLayer,\n    AgmFitBounds,\n    AgmInfoWindow,\n    AgmKmlLayer,\n    AgmMap,\n    AgmMarker,\n    AgmPolygon,\n    AgmPolyline,\n    AgmPolylineIcon,\n    AgmPolylinePoint,\n    AgmRectangle,\n    AgmTransitLayer,\n  ];\n}\n\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\n@NgModule({declarations: coreDirectives(), exports: coreDirectives()})\nexport class AgmCoreModule {\n  /**\n   * Please use this method when you register the module at the root level.\n   */\n  static forRoot(lazyMapsAPILoaderConfig?: LazyMapsAPILoaderConfigLiteral): ModuleWithProviders {\n    return {\n      ngModule: AgmCoreModule,\n      providers: [\n        ...BROWSER_GLOBALS_PROVIDERS, {provide: MapsAPILoader, useClass: LazyMapsAPILoader},\n        {provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig},\n      ],\n    };\n  }\n}\n","// main modules\nexport * from './directives';\nexport * from './services';\nexport * from './map-types';\n\n// core module\n// we explicitly export the module here to prevent this Ionic 2 bug:\n// http://stevemichelotti.com/integrate-angular-2-google-maps-into-ionic-2/\nexport { AgmCoreModule } from './core.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {coreDirectives as Éµb} from './core.module';\nexport {FitBoundsService as Éµa} from './services/fit-bounds';\nexport {BROWSER_GLOBALS_PROVIDERS as Éµe,DocumentRef as Éµd,WindowRef as Éµc} from './utils/browser-globals';"]},"metadata":{},"sourceType":"module"}