{"ast":null,"code":"import _inherits from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate) {\n  var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return function (source) {\n    return source.lift(new TakeWhileOperator(predicate, inclusive));\n  };\n}\n\nvar TakeWhileOperator = /*#__PURE__*/function () {\n  function TakeWhileOperator(predicate, inclusive) {\n    _classCallCheck(this, TakeWhileOperator);\n\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n  }\n\n  _createClass(TakeWhileOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n    }\n  }]);\n\n  return TakeWhileOperator;\n}();\n\nvar TakeWhileSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(TakeWhileSubscriber, _Subscriber);\n\n  var _super = _createSuper(TakeWhileSubscriber);\n\n  function TakeWhileSubscriber(destination, predicate, inclusive) {\n    var _this;\n\n    _classCallCheck(this, TakeWhileSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.predicate = predicate;\n    _this.inclusive = inclusive;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(TakeWhileSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var destination = this.destination;\n      var result;\n\n      try {\n        result = this.predicate(value, this.index++);\n      } catch (err) {\n        destination.error(err);\n        return;\n      }\n\n      this.nextOrComplete(value, result);\n    }\n  }, {\n    key: \"nextOrComplete\",\n    value: function nextOrComplete(value, predicateResult) {\n      var destination = this.destination;\n\n      if (Boolean(predicateResult)) {\n        destination.next(value);\n      } else {\n        if (this.inclusive) {\n          destination.next(value);\n        }\n\n        destination.complete();\n      }\n    }\n  }]);\n\n  return TakeWhileSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/takeWhile.ts"],"names":[],"mappings":";;;;AAEA,SAAS,UAAT,QAA2B,eAA3B;AAmDA,OAAM,SAAU,SAAV,CACF,SADE,EAEe;AAAA,MAAjB,SAAiB,uEAAL,KAAK;AACnB,SAAO,UAAC,MAAD;AAAA,WACI,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,SAAtB,EAAiC,SAAjC,CAAZ,CADJ;AAAA,GAAP;AAED;;IAEK,iB;AACJ,6BACY,SADZ,EAEY,SAFZ,EAE8B;AAAA;;AADlB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,SAAA,GAAA,SAAA;AAAsB;;;;yBAE7B,U,EAA2B,M,EAAW;AACzC,aAAO,MAAM,CAAC,SAAP,CACH,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,KAAK,SAAzC,EAAoD,KAAK,SAAzD,CADG,CAAP;AAED;;;;;;IAQG,mB;;;;;AAGJ,+BACI,WADJ,EAEY,SAFZ,EAGY,SAHZ,EAG8B;AAAA;;AAAA;;AAC5B,8BAAM,WAAN;AAFU,UAAA,SAAA,GAAA,SAAA;AACA,UAAA,SAAA,GAAA,SAAA;AALJ,UAAA,KAAA,GAAgB,CAAhB;AAKsB;AAE7B;;;;0BAEe,K,EAAQ;AACtB,UAAM,WAAW,GAAG,KAAK,WAAzB;AACA,UAAI,MAAJ;;AACA,UAAI;AACF,QAAA,MAAM,GAAG,KAAK,SAAL,CAAe,KAAf,EAAsB,KAAK,KAAL,EAAtB,CAAT;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,QAAA,WAAW,CAAC,KAAZ,CAAkB,GAAlB;AACA;AACD;;AACD,WAAK,cAAL,CAAoB,KAApB,EAA2B,MAA3B;AACD;;;mCAEsB,K,EAAU,e,EAAwB;AACvD,UAAM,WAAW,GAAG,KAAK,WAAzB;;AACA,UAAI,OAAO,CAAC,eAAD,CAAX,EAA8B;AAC5B,QAAA,WAAW,CAAC,IAAZ,CAAiB,KAAjB;AACD,OAFD,MAEO;AACL,YAAI,KAAK,SAAT,EAAoB;AAClB,UAAA,WAAW,CAAC,IAAZ,CAAiB,KAAjB;AACD;;AACD,QAAA,WAAW,CAAC,QAAZ;AACD;AACF;;;;EAhCkC,U","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return (source) => source.lift(new TakeWhileOperator(predicate, inclusive));\n}\nclass TakeWhileOperator {\n    constructor(predicate, inclusive) {\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n    }\n}\nclass TakeWhileSubscriber extends Subscriber {\n    constructor(destination, predicate, inclusive) {\n        super(destination);\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        let result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    }\n    nextOrComplete(value, predicateResult) {\n        const destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            if (this.inclusive) {\n                destination.next(value);\n            }\n            destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=takeWhile.js.map"]},"metadata":{},"sourceType":"module"}