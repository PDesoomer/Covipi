{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/dougair/Documents/WebDev/Angular/Covipi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { isObservable, of, Subject } from 'rxjs';\nimport { ɵɵdefineInjectable, Injectable, InjectionToken } from '@angular/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar DataSource = function DataSource() {\n  _classCallCheck(this, DataSource);\n};\n/** Checks whether an object is a data source. */\n\n\nfunction isDataSource(value) {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** DataSource wrapper for a native array. */\n\n\nvar ArrayDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(ArrayDataSource, _DataSource);\n\n  var _super = _createSuper(ArrayDataSource);\n\n  function ArrayDataSource(_data) {\n    var _this;\n\n    _classCallCheck(this, ArrayDataSource);\n\n    _this = _super.call(this);\n    _this._data = _data;\n    return _this;\n  }\n\n  _createClass(ArrayDataSource, [{\n    key: \"connect\",\n    value: function connect() {\n      return isObservable(this._data) ? this._data : of(this._data);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {}\n  }]);\n\n  return ArrayDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\n\n\nvar _DisposeViewRepeaterStrategy = /*#__PURE__*/function () {\n  function _DisposeViewRepeaterStrategy() {\n    _classCallCheck(this, _DisposeViewRepeaterStrategy);\n  }\n\n  _createClass(_DisposeViewRepeaterStrategy, [{\n    key: \"applyChanges\",\n    value: function applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n      changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n        var view;\n        var operation;\n\n        if (record.previousIndex == null) {\n          var insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n          operation = 1\n          /* INSERTED */\n          ;\n        } else if (currentIndex == null) {\n          viewContainerRef.remove(adjustedPreviousIndex);\n          operation = 3\n          /* REMOVED */\n          ;\n        } else {\n          view = viewContainerRef.get(adjustedPreviousIndex);\n          viewContainerRef.move(view, currentIndex);\n          operation = 2\n          /* MOVED */\n          ;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view === null || view === void 0 ? void 0 : view.context,\n            operation: operation,\n            record: record\n          });\n        }\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {}\n  }]);\n\n  return _DisposeViewRepeaterStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\n\n\nvar _RecycleViewRepeaterStrategy = /*#__PURE__*/function () {\n  function _RecycleViewRepeaterStrategy() {\n    _classCallCheck(this, _RecycleViewRepeaterStrategy);\n\n    /**\n     * The size of the cache used to store unused views.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n     */\n    this.viewCacheSize = 20;\n    /**\n     * View cache that stores embedded view instances that have been previously stamped out,\n     * but don't are not currently rendered. The view repeater will reuse these views rather than\n     * creating brand new ones.\n     *\n     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n     */\n\n    this._viewCache = [];\n  }\n  /** Apply changes to the DOM. */\n\n\n  _createClass(_RecycleViewRepeaterStrategy, [{\n    key: \"applyChanges\",\n    value: function applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n      var _this2 = this;\n\n      // Rearrange the views to put them in the right location.\n      changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n        var view;\n        var operation;\n\n        if (record.previousIndex == null) {\n          // Item added.\n          var viewArgsFactory = function viewArgsFactory() {\n            return itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          };\n\n          view = _this2._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n          operation = view ? 1\n          /* INSERTED */\n          : 0\n          /* REPLACED */\n          ;\n        } else if (currentIndex == null) {\n          // Item removed.\n          _this2._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n\n          operation = 3\n          /* REMOVED */\n          ;\n        } else {\n          // Item moved.\n          view = _this2._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n          operation = 2\n          /* MOVED */\n          ;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view === null || view === void 0 ? void 0 : view.context,\n            operation: operation,\n            record: record\n          });\n        }\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      var _iterator = _createForOfIteratorHelper(this._viewCache),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var view = _step.value;\n          view.destroy();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n\n  }, {\n    key: \"_insertView\",\n    value: function _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n      var cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n\n      if (cachedView) {\n        cachedView.context.$implicit = value;\n        return undefined;\n      }\n\n      var viewArgs = viewArgsFactory();\n      return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n\n  }, {\n    key: \"_detachAndCacheView\",\n    value: function _detachAndCacheView(index, viewContainerRef) {\n      var detachedView = this._detachView(index, viewContainerRef);\n\n      this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n\n  }, {\n    key: \"_moveView\",\n    value: function _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n      var view = viewContainerRef.get(adjustedPreviousIndex);\n      viewContainerRef.move(view, currentIndex);\n      view.context.$implicit = value;\n      return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n\n  }, {\n    key: \"_maybeCacheView\",\n    value: function _maybeCacheView(view, viewContainerRef) {\n      if (this._viewCache.length < this.viewCacheSize) {\n        this._viewCache.push(view);\n      } else {\n        var index = viewContainerRef.indexOf(view); // The host component could remove views from the container outside of\n        // the view repeater. It's unlikely this will occur, but just in case,\n        // destroy the view on its own, otherwise destroy it through the\n        // container to ensure that all the references are removed.\n\n        if (index === -1) {\n          view.destroy();\n        } else {\n          viewContainerRef.remove(index);\n        }\n      }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n\n  }, {\n    key: \"_insertViewFromCache\",\n    value: function _insertViewFromCache(index, viewContainerRef) {\n      var cachedView = this._viewCache.pop();\n\n      if (cachedView) {\n        viewContainerRef.insert(cachedView, index);\n      }\n\n      return cachedView || null;\n    }\n    /** Detaches the embedded view at the given index. */\n\n  }, {\n    key: \"_detachView\",\n    value: function _detachView(index, viewContainerRef) {\n      return viewContainerRef.detach(index);\n    }\n  }]);\n\n  return _RecycleViewRepeaterStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\n\n\nvar SelectionModel = /*#__PURE__*/function () {\n  function SelectionModel() {\n    var _this3 = this;\n\n    var _multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var initiallySelectedValues = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _emitChanges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, SelectionModel);\n\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    /** Currently-selected values. */\n\n    this._selection = new Set();\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n\n    this._deselectedToEmit = [];\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n\n    this._selectedToEmit = [];\n    /** Event emitted when the value has changed. */\n\n    this.changed = new Subject();\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(function (value) {\n          return _this3._markSelected(value);\n        });\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      } // Clear the array in order to avoid firing the change event for preselected values.\n\n\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /** Selected values. */\n\n\n  _createClass(SelectionModel, [{\n    key: \"select\",\n\n    /**\n     * Selects a value or an array of values.\n     */\n    value: function select() {\n      var _this4 = this;\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this4._markSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this5._unmarkSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(value) {\n      this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._unmarkAll();\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(value) {\n      return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(predicate) {\n      if (this._multiple && this.selected) {\n        this._selected.sort(predicate);\n      }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n\n  }, {\n    key: \"isMultipleSelection\",\n    value: function isMultipleSelection() {\n      return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      // Clear the selected values so they can be re-cached.\n      this._selected = null;\n\n      if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n        this.changed.next({\n          source: this,\n          added: this._selectedToEmit,\n          removed: this._deselectedToEmit\n        });\n        this._deselectedToEmit = [];\n        this._selectedToEmit = [];\n      }\n    }\n    /** Selects a value. */\n\n  }, {\n    key: \"_markSelected\",\n    value: function _markSelected(value) {\n      if (!this.isSelected(value)) {\n        if (!this._multiple) {\n          this._unmarkAll();\n        }\n\n        this._selection.add(value);\n\n        if (this._emitChanges) {\n          this._selectedToEmit.push(value);\n        }\n      }\n    }\n    /** Deselects a value. */\n\n  }, {\n    key: \"_unmarkSelected\",\n    value: function _unmarkSelected(value) {\n      if (this.isSelected(value)) {\n        this._selection.delete(value);\n\n        if (this._emitChanges) {\n          this._deselectedToEmit.push(value);\n        }\n      }\n    }\n    /** Clears out the selected values. */\n\n  }, {\n    key: \"_unmarkAll\",\n    value: function _unmarkAll() {\n      var _this6 = this;\n\n      if (!this.isEmpty()) {\n        this._selection.forEach(function (value) {\n          return _this6._unmarkSelected(value);\n        });\n      }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n\n  }, {\n    key: \"_verifyValueAssignment\",\n    value: function _verifyValueAssignment(values) {\n      if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMultipleValuesInSingleSelectionError();\n      }\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      if (!this._selected) {\n        this._selected = Array.from(this._selection.values());\n      }\n\n      return this._selected;\n    }\n  }]);\n\n  return SelectionModel;\n}();\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\n\n\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n\n\nvar UniqueSelectionDispatcher = /*#__PURE__*/function () {\n  function UniqueSelectionDispatcher() {\n    _classCallCheck(this, UniqueSelectionDispatcher);\n\n    this._listeners = [];\n  }\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n\n\n  _createClass(UniqueSelectionDispatcher, [{\n    key: \"notify\",\n    value: function notify(id, name) {\n      var _iterator2 = _createForOfIteratorHelper(this._listeners),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var listener = _step2.value;\n          listener(id, name);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(listener) {\n      var _this7 = this;\n\n      this._listeners.push(listener);\n\n      return function () {\n        _this7._listeners = _this7._listeners.filter(function (registered) {\n          return listener !== registered;\n        });\n      };\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._listeners = [];\n    }\n  }]);\n\n  return UniqueSelectionDispatcher;\n}();\n\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) {\n  return new (t || UniqueSelectionDispatcher)();\n};\n\nUniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function UniqueSelectionDispatcher_Factory() {\n    return new UniqueSelectionDispatcher();\n  },\n  token: UniqueSelectionDispatcher,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token for {@link _ViewRepeater}.\n *\n * INTERNAL ONLY - not for public consumption.\n * @docs-private\n */\n\n\nvar _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };","map":{"version":3,"sources":["../../../../../../src/cdk/collections/data-source.ts","../../../../../../src/cdk/collections/array-data-source.ts","../../../../../../src/cdk/collections/collection-viewer.ts","../../../../../../src/cdk/collections/dispose-view-repeater-strategy.ts","../../../../../../src/cdk/collections/recycle-view-repeater-strategy.ts","../../../../../../src/cdk/collections/selection-model.ts","../../../../../../src/cdk/collections/unique-selection-dispatcher.ts","../../../../../../src/cdk/collections/tree-adapter.ts","../../../../../../src/cdk/collections/view-repeater.ts","../../../../../../src/cdk/collections/public-api.ts","../../../../../../src/cdk/collections/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[] | ReadonlyArray<T>>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: T[] | ReadonlyArray<T> | Observable<T[] | ReadonlyArray<T>>) {\n    super();\n  }\n\n  connect(): Observable<T[] | ReadonlyArray<T>> {\n    return isObservable(this._data) ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\n\n/** Represents a range of numbers with a specified start and end. */\nexport type ListRange = {start: number, end: number};\n\n\n/**\n * Interface for any component that provides a view of some data collection and wants to provide\n * information regarding the view and any changes made.\n */\nexport interface CollectionViewer {\n  /**\n   * A stream that emits whenever the `CollectionViewer` starts looking at a new portion of the\n   * data. The `start` index is inclusive, while the `end` is exclusive.\n   */\n  viewChange: Observable<ListRange>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation\n} from './view-repeater';\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _DisposeViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n    implements _ViewRepeater<T, R, C> {\n  applyChanges(changes: IterableChanges<R>,\n               viewContainerRef: ViewContainerRef,\n               itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n               itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n               itemViewChanged?: _ViewRepeaterItemChanged<R, C>) {\n    changes.forEachOperation(\n        (record: IterableChangeRecord<R>,\n         adjustedPreviousIndex: number | null,\n         currentIndex: number | null) => {\n          let view: EmbeddedViewRef<C> | undefined;\n          let operation: _ViewRepeaterOperation;\n          if (record.previousIndex == null) {\n            const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n            view = viewContainerRef.createEmbeddedView(\n                insertContext.templateRef, insertContext.context, insertContext.index);\n            operation = _ViewRepeaterOperation.INSERTED;\n          } else if (currentIndex == null) {\n            viewContainerRef.remove(adjustedPreviousIndex!);\n            operation = _ViewRepeaterOperation.REMOVED;\n          } else {\n            view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\n            viewContainerRef.move(view!, currentIndex);\n            operation = _ViewRepeaterOperation.MOVED;\n          }\n\n          if (itemViewChanged) {\n            itemViewChanged({\n              context: view?.context,\n              operation,\n              record,\n            });\n          }\n        });\n  }\n\n  detach() {\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemInsertArgs,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation\n} from './view-repeater';\n\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _RecycleViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n    implements _ViewRepeater<T, R, C> {\n  /**\n   * The size of the cache used to store unused views.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n   */\n  viewCacheSize: number = 20;\n\n  /**\n   * View cache that stores embedded view instances that have been previously stamped out,\n   * but don't are not currently rendered. The view repeater will reuse these views rather than\n   * creating brand new ones.\n   *\n   * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n   */\n  private _viewCache: EmbeddedViewRef<C>[] = [];\n\n  /** Apply changes to the DOM. */\n  applyChanges(changes: IterableChanges<R>,\n               viewContainerRef: ViewContainerRef,\n               itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n               itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n               itemViewChanged?: _ViewRepeaterItemChanged<R, C>) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record: IterableChangeRecord<R>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n      let view: EmbeddedViewRef<C> | undefined;\n      let operation: _ViewRepeaterOperation;\n      if (record.previousIndex == null) {  // Item added.\n        const viewArgsFactory = () => itemContextFactory(\n            record, adjustedPreviousIndex, currentIndex);\n        view = this._insertView(viewArgsFactory, currentIndex!, viewContainerRef,\n            itemValueResolver(record));\n        operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n      } else if (currentIndex == null) {  // Item removed.\n        this._detachAndCacheView(adjustedPreviousIndex!, viewContainerRef);\n        operation = _ViewRepeaterOperation.REMOVED;\n      } else {  // Item moved.\n        view = this._moveView(adjustedPreviousIndex!, currentIndex!, viewContainerRef,\n            itemValueResolver(record));\n        operation = _ViewRepeaterOperation.MOVED;\n      }\n\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record,\n        });\n      }\n    });\n  }\n\n  detach() {\n    for (const view of this._viewCache) {\n      view.destroy();\n    }\n  }\n\n  /**\n   * Inserts a view for a new item, either from the cache or by creating a new\n   * one. Returns `undefined` if the item was inserted into a cached view.\n   */\n  private _insertView(viewArgsFactory: () => _ViewRepeaterItemInsertArgs<C>, currentIndex: number,\n                      viewContainerRef: ViewContainerRef,\n                      value: T): EmbeddedViewRef<C> | undefined {\n    let cachedView = this._insertViewFromCache(currentIndex!, viewContainerRef);\n    if (cachedView) {\n      cachedView.context.$implicit = value;\n      return undefined;\n    }\n\n    const viewArgs = viewArgsFactory();\n    return viewContainerRef.createEmbeddedView(\n        viewArgs.templateRef, viewArgs.context, viewArgs.index);\n  }\n\n  /** Detaches the view at the given index and inserts into the view cache. */\n  private _detachAndCacheView(index: number, viewContainerRef: ViewContainerRef) {\n    const detachedView = this._detachView(index, viewContainerRef);\n    this._maybeCacheView(detachedView, viewContainerRef);\n  }\n\n  /** Moves view at the previous index to the current index. */\n  private _moveView(adjustedPreviousIndex: number, currentIndex: number,\n                    viewContainerRef: ViewContainerRef, value: T): EmbeddedViewRef<C> {\n    const view = viewContainerRef.get(adjustedPreviousIndex!) as\n        EmbeddedViewRef<C>;\n    viewContainerRef.move(view, currentIndex);\n    view.context.$implicit = value;\n    return view;\n  }\n\n  /**\n   * Cache the given detached view. If the cache is full, the view will be\n   * destroyed.\n   */\n  private _maybeCacheView(view: EmbeddedViewRef<C>, viewContainerRef: ViewContainerRef) {\n    if (this._viewCache.length < this.viewCacheSize) {\n      this._viewCache.push(view);\n    } else {\n      const index = viewContainerRef.indexOf(view);\n\n      // The host component could remove views from the container outside of\n      // the view repeater. It's unlikely this will occur, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        viewContainerRef.remove(index);\n      }\n    }\n  }\n\n  /** Inserts a recycled view from the cache at the given index. */\n  private _insertViewFromCache(index: number,\n                               viewContainerRef: ViewContainerRef): EmbeddedViewRef<C> | null {\n    const cachedView = this._viewCache.pop();\n    if (cachedView) {\n      viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n\n  /** Detaches the embedded view at the given index. */\n  private _detachView(index: number, viewContainerRef: ViewContainerRef): EmbeddedViewRef<C> {\n    return viewContainerRef.detach(index) as EmbeddedViewRef<C>;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  changed: Subject<SelectionChange<T>> = new Subject();\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true) {\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   */\n  select(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   */\n  deselect(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   */\n  toggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   */\n  clear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SelectionModel} from './selection-model';\n\n\n/**\n * Interface for a class that can flatten hierarchical structured data and re-expand the flattened\n * data back into its original structure. Should be used in conjunction with the cdk-tree.\n */\nexport interface TreeDataNodeFlattener<T> {\n  /** Transforms a set of hierarchical structured data into a flattened data array. */\n  flattenNodes(structuredData: any[]): T[];\n\n  /**\n   * Expands a flattened array of data into its hierarchical form using the provided expansion\n   * model.\n   */\n  expandFlattenedNodes(nodes: T[], expansionModel: SelectionModel<T>): T[];\n\n  /**\n   * Put node descendants of node in array.\n   * If `onlyExpandable` is true, then only process expandable descendants.\n   */\n  nodeDescendents(node: T, nodes: T[], onlyExpandable: boolean): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  InjectionToken,\n  IterableChangeRecord,\n  IterableChanges,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\n\n/**\n * The context for an embedded view in the repeater's view container.\n *\n * @template T The type for the embedded view's $implicit property.\n */\nexport interface _ViewRepeaterItemContext<T> {\n  $implicit?: T;\n}\n\n/**\n * The arguments needed to construct an embedded view for an item in a view\n * container.\n *\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemInsertArgs<C> {\n  templateRef: TemplateRef<C>;\n  context?: C;\n  index?: number;\n}\n\n/**\n * A factory that derives the embedded view context for an item in a view\n * container.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemContextFactory<T, R, C extends _ViewRepeaterItemContext<T>> =\n    (record: IterableChangeRecord<R>,\n     adjustedPreviousIndex: number | null,\n     currentIndex: number | null) => _ViewRepeaterItemInsertArgs<C>;\n\n/**\n * Extracts the value of an item from an {@link IterableChangeRecord}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n */\nexport type _ViewRepeaterItemValueResolver<T, R> =\n    (record: IterableChangeRecord<R>) => T;\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nexport const enum _ViewRepeaterOperation {\n  /** The content of an existing view was replaced with another item. */\n  REPLACED,\n  /** A new view was created with `createEmbeddedView`. */\n  INSERTED,\n  /** The position of a view changed, but the content remains the same. */\n  MOVED,\n  /** A view was detached from the view container. */\n  REMOVED,\n}\n\n/**\n * Meta data describing the state of a view after it was updated by a\n * {@link _ViewRepeater}.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemChange<R, C> {\n  /** The view's context after it was changed. */\n  context?: C;\n  /** Indicates how the view was changed. */\n  operation: _ViewRepeaterOperation;\n  /** The view's corresponding change record. */\n  record: IterableChangeRecord<R>;\n}\n\n/**\n * Type for a callback to be executed after a view has changed.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemChanged<R, C> =\n    (change: _ViewRepeaterItemChange<R, C>) => void;\n\n/**\n * Describes a strategy for rendering items in a {@link ViewContainerRef}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeater<T, R, C extends _ViewRepeaterItemContext<T>> {\n  applyChanges(\n      changes: IterableChanges<R>,\n      viewContainerRef: ViewContainerRef,\n      itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n      itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n      itemViewChanged?: _ViewRepeaterItemChanged<R, C>): void;\n\n  detach(): void;\n}\n\n/**\n * Injection token for {@link _ViewRepeater}.\n *\n * INTERNAL ONLY - not for public consumption.\n * @docs-private\n */\nexport const _VIEW_REPEATER_STRATEGY = new InjectionToken<\n        _ViewRepeater<unknown, unknown, _ViewRepeaterItemContext<unknown>>>('_ViewRepeater');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './array-data-source';\nexport * from './collection-viewer';\nexport * from './data-source';\nexport * from './dispose-view-repeater-strategy';\nexport * from './recycle-view-repeater-strategy';\nexport * from './selection-model';\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n} from './unique-selection-dispatcher';\nexport * from './tree-adapter';\nexport * from './view-repeater';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}