{"ast":null,"code":"import _classCallCheck from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport var Observable = /*#__PURE__*/function () {\n  function Observable(subscribe) {\n    _classCallCheck(this, Observable);\n\n    this._isScalar = false;\n\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  _createClass(Observable, [{\n    key: \"lift\",\n    value: function lift(operator) {\n      var observable = new Observable();\n      observable.source = this;\n      observable.operator = operator;\n      return observable;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(observerOrNext, error, complete) {\n      var operator = this.operator;\n      var sink = toSubscriber(observerOrNext, error, complete);\n\n      if (operator) {\n        sink.add(operator.call(sink, this.source));\n      } else {\n        sink.add(this.source || config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n      }\n\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        if (sink.syncErrorThrowable) {\n          sink.syncErrorThrowable = false;\n\n          if (sink.syncErrorThrown) {\n            throw sink.syncErrorValue;\n          }\n        }\n      }\n\n      return sink;\n    }\n  }, {\n    key: \"_trySubscribe\",\n    value: function _trySubscribe(sink) {\n      try {\n        return this._subscribe(sink);\n      } catch (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n          sink.syncErrorThrown = true;\n          sink.syncErrorValue = err;\n        }\n\n        if (canReportError(sink)) {\n          sink.error(err);\n        } else {\n          console.warn(err);\n        }\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(next, promiseCtor) {\n      var _this = this;\n\n      promiseCtor = getPromiseCtor(promiseCtor);\n      return new promiseCtor(function (resolve, reject) {\n        var subscription;\n        subscription = _this.subscribe(function (value) {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n\n            if (subscription) {\n              subscription.unsubscribe();\n            }\n          }\n        }, reject, resolve);\n      });\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var source = this.source;\n      return source && source.subscribe(subscriber);\n    }\n  }, {\n    key: Symbol_observable,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"pipe\",\n    value: function pipe() {\n      for (var _len = arguments.length, operations = new Array(_len), _key = 0; _key < _len; _key++) {\n        operations[_key] = arguments[_key];\n      }\n\n      if (operations.length === 0) {\n        return this;\n      }\n\n      return pipeFromArray(operations)(this);\n    }\n  }, {\n    key: \"toPromise\",\n    value: function toPromise(promiseCtor) {\n      var _this2 = this;\n\n      promiseCtor = getPromiseCtor(promiseCtor);\n      return new promiseCtor(function (resolve, reject) {\n        var value;\n\n        _this2.subscribe(function (x) {\n          return value = x;\n        }, function (err) {\n          return reject(err);\n        }, function () {\n          return resolve(value);\n        });\n      });\n    }\n  }]);\n\n  return Observable;\n}();\n\nObservable.create = function (subscribe) {\n  return new Observable(subscribe);\n};\n\nfunction getPromiseCtor(promiseCtor) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}","map":{"version":3,"sources":["../../src/internal/Observable.ts"],"names":[],"mappings":"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","sourcesContent":["import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map"]},"metadata":{},"sourceType":"module"}