{"ast":null,"code":"import _get from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/azarog/Documents/Covipi/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\n\nvar RepeatWhenOperator = /*#__PURE__*/function () {\n  function RepeatWhenOperator(notifier) {\n    _classCallCheck(this, RepeatWhenOperator);\n\n    this.notifier = notifier;\n  }\n\n  _createClass(RepeatWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n  }]);\n\n  return RepeatWhenOperator;\n}();\n\nvar RepeatWhenSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(RepeatWhenSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(RepeatWhenSubscriber);\n\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    var _this;\n\n    _classCallCheck(this, RepeatWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.notifier = notifier;\n    _this.source = source;\n    _this.sourceIsBeingSubscribedTo = true;\n    return _this;\n  }\n\n  _createClass(RepeatWhenSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      this.sourceIsBeingSubscribedTo = true;\n      this.source.subscribe(this);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.sourceIsBeingSubscribedTo === false) {\n        return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"complete\", this).call(this);\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.sourceIsBeingSubscribedTo = false;\n\n      if (!this.isStopped) {\n        if (!this.retries) {\n          this.subscribeToRetries();\n        }\n\n        if (!this.retriesSubscription || this.retriesSubscription.closed) {\n          return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"complete\", this).call(this);\n        }\n\n        this._unsubscribeAndRecycle();\n\n        this.notifications.next(undefined);\n      }\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var notifications = this.notifications,\n          retriesSubscription = this.retriesSubscription;\n\n      if (notifications) {\n        notifications.unsubscribe();\n        this.notifications = undefined;\n      }\n\n      if (retriesSubscription) {\n        retriesSubscription.unsubscribe();\n        this.retriesSubscription = undefined;\n      }\n\n      this.retries = undefined;\n    }\n  }, {\n    key: \"_unsubscribeAndRecycle\",\n    value: function _unsubscribeAndRecycle() {\n      var _unsubscribe = this._unsubscribe;\n      this._unsubscribe = null;\n\n      _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"_unsubscribeAndRecycle\", this).call(this);\n\n      this._unsubscribe = _unsubscribe;\n      return this;\n    }\n  }, {\n    key: \"subscribeToRetries\",\n    value: function subscribeToRetries() {\n      this.notifications = new Subject();\n      var retries;\n\n      try {\n        var notifier = this.notifier;\n        retries = notifier(this.notifications);\n      } catch (e) {\n        return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"complete\", this).call(this);\n      }\n\n      this.retries = retries;\n      this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n    }\n  }]);\n\n  return RepeatWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/repeatWhen.ts"],"names":[],"mappings":";;;;;;AAGA,SAAS,OAAT,QAAwB,YAAxB;AAIA,SAAS,qBAAT,EAAgC,cAAhC,EAAgD,qBAAhD,QAA6E,mBAA7E;AAgCA,OAAM,SAAU,UAAV,CAAwB,QAAxB,EAAqF;AACzF,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,kBAAJ,CAAuB,QAAvB,CAAZ,CAA3B;AAAA,GAAP;AACD;;IAEK,kB;AACJ,8BAAsB,QAAtB,EAAmF;AAAA;;AAA7D,SAAA,QAAA,GAAA,QAAA;AACrB;;;;yBAEI,U,EAA2B,M,EAAW;AACzC,aAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,oBAAJ,CAAyB,UAAzB,EAAqC,KAAK,QAA1C,EAAoD,MAApD,CAAjB,CAAP;AACD;;;;;;IAQG,oB;;;;;AAOJ,gCAAY,WAAZ,EACoB,QADpB,EAEoB,MAFpB,EAEyC;AAAA;;AAAA;;AACvC,8BAAM,WAAN;AAFkB,UAAA,QAAA,GAAA,QAAA;AACA,UAAA,MAAA,GAAA,MAAA;AAJZ,UAAA,yBAAA,GAAqC,IAArC;AAIiC;AAExC;;;;iCAES;AACR,WAAK,yBAAL,GAAiC,IAAjC;AACA,WAAK,MAAL,CAAY,SAAZ,CAAsB,IAAtB;AACD;;;qCAEa;AACZ,UAAI,KAAK,yBAAL,KAAmC,KAAvC,EAA8C;AAC5C;AACD;AACF;;;+BAEO;AACN,WAAK,yBAAL,GAAiC,KAAjC;;AAEA,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,eAAK,kBAAL;AACD;;AACD,YAAI,CAAC,KAAK,mBAAN,IAA6B,KAAK,mBAAL,CAAyB,MAA1D,EAAkE;AAChE;AACD;;AAED,aAAK,sBAAL;;AACA,aAAK,aAAL,CAAoB,IAApB,CAAyB,SAAzB;AACD;AACF;;;mCAGW;AAAA,UACF,aADE,GACqC,IADrC,CACF,aADE;AAAA,UACa,mBADb,GACqC,IADrC,CACa,mBADb;;AAEV,UAAI,aAAJ,EAAmB;AACjB,QAAA,aAAa,CAAC,WAAd;AACA,aAAK,aAAL,GAAqB,SAArB;AACD;;AACD,UAAI,mBAAJ,EAAyB;AACvB,QAAA,mBAAmB,CAAC,WAApB;AACA,aAAK,mBAAL,GAA2B,SAA3B;AACD;;AACD,WAAK,OAAL,GAAe,SAAf;AACD;;;6CAGqB;AAAA,UACZ,YADY,GACK,IADL,CACZ,YADY;AAGpB,WAAK,YAAL,GAAoB,IAApB;;AACA;;AACA,WAAK,YAAL,GAAoB,YAApB;AAEA,aAAO,IAAP;AACD;;;yCAEyB;AACxB,WAAK,aAAL,GAAqB,IAAI,OAAJ,EAArB;AACA,UAAI,OAAJ;;AACA,UAAI;AAAA,YACM,QADN,GACmB,IADnB,CACM,QADN;AAEF,QAAA,OAAO,GAAG,QAAQ,CAAC,KAAK,aAAN,CAAlB;AACD,OAHD,CAGE,OAAO,CAAP,EAAU;AACV;AACD;;AACD,WAAK,OAAL,GAAe,OAAf;AACA,WAAK,mBAAL,GAA2B,cAAc,CAAC,OAAD,EAAU,IAAI,qBAAJ,CAA0B,IAA1B,CAAV,CAAzC;AACD;;;;EA5EsC,qB","sourcesContent":["import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n    return (source) => source.lift(new RepeatWhenOperator(notifier));\n}\nclass RepeatWhenOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n}\nclass RepeatWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    notifyNext() {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    }\n    notifyComplete() {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return super.complete();\n        }\n    }\n    complete() {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return super.complete();\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next(undefined);\n        }\n    }\n    _unsubscribe() {\n        const { notifications, retriesSubscription } = this;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    _unsubscribeAndRecycle() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        super._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        return this;\n    }\n    subscribeToRetries() {\n        this.notifications = new Subject();\n        let retries;\n        try {\n            const { notifier } = this;\n            retries = notifier(this.notifications);\n        }\n        catch (e) {\n            return super.complete();\n        }\n        this.retries = retries;\n        this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n    }\n}\n//# sourceMappingURL=repeatWhen.js.map"]},"metadata":{},"sourceType":"module"}