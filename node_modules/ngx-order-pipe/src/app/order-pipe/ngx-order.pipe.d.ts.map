{"version":3,"file":"ngx-order.pipe.d.ts","sources":["ngx-order.pipe.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { PipeTransform } from \"@angular/core\";\nexport declare class OrderPipe implements PipeTransform {\n    /**\n     * Check if a value is a string\n     *\n     * @param value\n     */\n    static isString(value: any): boolean;\n    /**\n     * Sorts values ignoring the case\n     *\n     * @param a\n     * @param b\n     */\n    static caseInsensitiveSort(a: any, b: any): any;\n    /**\n     * Default compare method\n     *\n     * @param a\n     * @param b\n     */\n    static defaultCompare(a: any, b: any): 0 | 1 | -1;\n    /**\n     * Parse expression, split into items\n     * @param expression\n     * @returns {string[]}\n     */\n    static parseExpression(expression: string): string[];\n    /**\n     * Get value by expression\n     *\n     * @param object\n     * @param expression\n     * @returns {any}\n     */\n    static getValue(object: any, expression: string[]): any;\n    /**\n     * Set value by expression\n     *\n     * @param object\n     * @param value\n     * @param expression\n     */\n    static setValue(object: any, value: any, expression: string[]): void;\n    transform(value: any | any[], expression?: any, reverse?: boolean, isCaseInsensitive?: boolean, comparator?: Function): any;\n    /**\n     * Sort array\n     *\n     * @param value\n     * @param expression\n     * @param reverse\n     * @param isCaseInsensitive\n     * @param comparator\n     * @returns {any[]}\n     */\n    private sortArray;\n    /**\n     * Transform Object\n     *\n     * @param value\n     * @param expression\n     * @param reverse\n     * @param isCaseInsensitive\n     * @param comparator\n     * @returns {any[]}\n     */\n    private transformObject;\n    /**\n     * Apply multiple expressions\n     *\n     * @param value\n     * @param {any[]} expressions\n     * @param {boolean} reverse\n     * @param {boolean} isCaseInsensitive\n     * @param {Function} comparator\n     * @returns {any}\n     */\n    private multiExpressionTransform;\n}\n"]}